{"version":3,"file":"module.js","mappings":"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CA,SACA,UACA,WACA,WACA,WACA,SACA,YACA,cACA,OACA,QACA,KACA,gBACA,YACA,QACA,QACA,KACA,KACA,SACA,WACA,WACA,YACA,iBACA,SCvEF,IACE,UACA,SACA,UACA,OACA,mBACA,cACA,YACA,aACA,QACA,YACA,QACA,WACA,OACA,MACA,aACA,YACA,YACA,OACA,cACA,gBACA,OACA,aACA,aACA,YACA,YACA,kBACA,kBACA,wBACA,kBACA,2BACA,wBACA,aACA,kBACA,kBACA,kBACA,2BACA,wBACA,cACA,sBACA,kBACA,mBACA,iBACA,kBACA,2BACA,8BACA,iBACA,oBACA,kBACA,UACA,UACA,aACA,WACA,cACA,aACA,aACA,aACA,SACA,cACA,aACA,SACA,cACA,WACA,eACA,WACA,gBACA,aACA,SACA,cACA,iBACA,iBACA,iBACA,MACA,MACA,SACA,QACA,UACA,iBACA,iBACA,SACA,OACA,SACA,SACA,SACA,SACA,aACA,cACA,MACA,YACA,UACA,eACA,mBACA,kBACA,kBACA,UACA,WACA,OACA,QACA,mBACA,kBACA,mBACA,mBACA,cACA,MACA,eACA,wBACA,qBACA,gBACA,sBACA,OACA,QACA,UACA,WACA,kBACA,kBACA,aACA,YACA,iBACA,cACA,aACA,WACA,WACA,gBACA,2BACA,kBACA,oBACA,oBACA,WACA,cACA,MACA,MACA,WACA,UACA,6BACA,SACA,SACA,QACA,WACA,WACA,WACA,eACA,cACA,sBACA,aACA,cACA,yBACA,kBACA,gBACA,eACA,iBACA,sBACA,4BACA,qBACA,2BACA,cACA,YACA,cACA,aACA,kBACA,mBACA,eACA,iBACA,YACA,kBACA,cACA,kBACA,cACA,YACA,iBACA,kBACA,oBACA,gBACA,WACA,WACA,WACA,eACA,gBACA,eACA,gBACA,iBACA,cACA,sBACA,cACA,eACA,mBACA,mBACA,oBACA,aACA,YACA,aACA,oBACA,WACA,YACA,oBACA,WACA,OACA,QACA,gBACA,OACA,QACA,QACA,MACA,cACA,MACA,eACA,eACA,WACA,MACA,SACA,WACA,qBACA,SACA,QACA,sBACA,gBACA,iBACA,eACA,gBACA,WACA,UACA,aACA,aACA,SACA,YACA,uBACA,eACA,0BACA,cACA,oBACA,iBACA,eACA,eACA,YACA,YACA,WACA,sBACA,sBACA,oBACA,gBACA,kBACA,YACA,uBACA,iBACA,gBACA,cACA,sBACA,YACA,gBACA,UACA,WACA,eACA,qBACA,kBACA,wBACA,8BACA,OACA,OACA,UACA,OACA,aACA,WACA,SACA,wBACA,eACA,gBACA,cACA,iBACA,OACA,aACA,MACA,OACA,iBACA,QACA,cACA,aACA,eACA,8BACA,kBACA,iCACA,qCACA,WACA,iBACA,YACA,kBACA,WACA,wBACA,kBACA,kBACA,eACA,cACA,cACA,UACA,iBACA,4BACA,iCACA,uCACA,8CACA,wCACA,kBACA,SACA,WACA,WACA,wBACA,sBACA,YACA,aACA,qBACA,yBACA,qBACA,UACA,kBACA,eACA,6BACA,yBACA,UACA,WACA,oBACA,WACA,aACA,gBACA,iBACA,sBACA,wBACA,4BACA,iBACA,UACA,kBACA,cACA,uBACA,kBACA,2BACA,qBACA,iBACA,0BACA,iBACA,0BACA,mBACA,eACA,wBACA,eACA,wBACA,eACA,wBACA,cACA,uBACA,mBACA,gBACA,gBACA,yBACA,gBACA,yBACA,gBACA,yBACA,gBACA,yBACA,eACA,wBACA,cACA,uBACA,UACA,WACA,aACA,aACA,eACA,aACA,SACA,SACA,mBACA,aACA,sBACA,IACA,QACA,iBACA,qBACA,oBACA,oBACA,kBACA,kBACA,kBACA,iBACA,mBACA,qBACA,mBACA,mBACA,mBACA,kBACA,kBACA,eACA,qBACA,yBACA,qBACA,UACA,WACA,UACA,SACA,MACA,OACA,kBACA,eACA,MACA,QACA,OACA,2BACA,4BACA,8BACA,4BACA,4BACA,UACA,aACA,mBACA,6BACA,2BACA,gBACA,sBACA,sBACA,2BACA,uBACA,oBACA,aACA,OACA,sBACA,qBACA,iBACA,sBACA,4BACA,kCACA,cACA,UACA,eACA,QACA,SACA,iBACA,yBACA,qBACA,0BACA,YACA,qBACA,WACA,wBACA,8BACA,oBACA,2BACA,2BACA,0BACA,eACA,WACA,gBACA,MACA,iBACA,cACA,UACA,UACA,gBACA,gBACA,iBACA,WACA,qBACA,gBACA,aACA,oBACA,8BACA,WACA,oBACA,cACA,uBACA,kBACA,2BACA,eACA,wBACA,iBACA,mBACA,sBACA,UACA,kBACA,WACA,aACA,qBACA,sBACA,sBACA,mBACA,cACA,aACA,cACA,cACA,iBACA,gBACA,iBACA,iBACA,eACA,kBACA,aACA,cACA,iBACA,gBACA,sBACA,qBACA,wBACA,gBACA,aACA,uBACA,mBACA,kBACA,eACA,cACA,YACA,wBACA,eACA,kBACA,YACA,SACA,gBACA,gBACA,eACA,kBACA,kBACA,eACA,UACA,kBACA,aACA,aACA,UACA,UACA,MACA,SACA,SACA,mBACA,YACA,kBACA,WACA,0BACA,MACA,YACA,WACA,MACA,SACA,WACA,WACA,WACA,QACA,WACA,KACA,cACA,SACA,SACA,QACA,KACA,cACA,YACA,UACA,iBACA,mBACA,wBACA,SACA,eACA,WACA,UACA,YACA,YACA,oBACA,aACA,oBACA,WACA,qBACA,eACA,eACA,aACA,QACA,YACA,SACA,cACA,cACA,eACA,WACA,kBACA,UACA,gBACA,qBACA,uBACA,UACA,WACA,aACA,aACA,QACA,MACA,cACA,QACA,OACA,UACA,cACA,WACA,YACA,SACA,aACA,OACA,eACA,SACA,OACA,KACA,SACA,MACA,QACA,QACA,OACA,WACA,wBACA,qBACA,QACA,YACA,OACA,WACA,aACA,eACA,iBACA,mBACA,MACA,SACA,WACA,cACA,qBACA,oBACA,YACA,UACA,oBACA,cACA,YACA,YACA,QACA,cACA,MACA,OACA,mBACA,2BACA,kBACA,YACA,SACA,iBACA,yBACA,sBACA,cACA,kBACA,iBACA,sBACA,gBACA,wBACA,eACA,uBACA,aACA,cACA,MACA,MACA,OACA,kBACA,yBACA,0BACA,QACA,MACA,gBACA,SACA,eACA,eACA,YACA,4BACA,qBACA,0BACA,UACA,uBACA,gBACA,qBACA,0BACA,yCACA,6CACA,8BACA,iBACA,gCACA,oCACA,qBACA,wBACA,uCACA,2CACA,4BACA,2BACA,0CACA,8CACA,+BACA,WACA,iBACA,iBACA,kBACA,iBACA,iBACA,SACA,WACA,SACA,gBACA,+BACA,mCACA,oBACA,eACA,kBACA,iCACA,qCACA,sBACA,8BACA,kCACA,mBACA,cACA,6BACA,iCACA,kBACA,eACA,8BACA,kCACA,mBACA,SACA,SACA,SACA,WACA,SACA,cACA,cACA,gBACA,cACA,iBACA,0BACA,mBACA,mBACA,oBACA,oBACA,sBACA,+BACA,MACA,WACA,YACA,WACA,QACA,iBACA,UACA,YACA,qBACA,UACA,MACA,QACA,YACA,SACA,SACA,kBACA,KACA,4BACA,kCACA,kCACA,4BACA,kCACA,kCACA,0BACA,gCACA,gCACA,4BACA,kCACA,kCACA,cACA,OACA,WACA,KACA,OACA,kBACA,iBACA,uBACA,uBACA,6BACA,4BACA,4BACA,4BACA,4BACA,0BACA,gCACA,gCACA,iCACA,iCACA,yBACA,yBACA,0BACA,0BACA,OACA,WACA,0BACA,8BACA,eACA,MACA,QACA,mBACA,WACA,WACA,mBACA,2BACA,wBACA,gBACA,yBACA,oBACA,yBACA,mBACA,wBACA,kBACA,0BACA,iBACA,yBACA,YACA,oBACA,4BACA,yBACA,iBACA,0BACA,qBACA,0BACA,oBACA,yBACA,mBACA,2BACA,kBACA,0BACA,UACA,cACA,yBACA,WACA,UACA,OACA,SACA,SACA,eACA,oBACA,uBACA,eACA,mBACA,QACA,OACA,WACA,sBACA,eACA,iBACA,cACA,kBACA,kBACA,WACA,eACA,eACA,oBACA,kBACA,mBACA,eACA,qBACA,uBACA,cACA,oBACA,wBACA,2BACA,uBACA,uBACA,sBACA,qBACA,sBACA,qBACA,qBACA,oBACA,sBACA,uBACA,sBACA,uBACA,sBACA,sBACA,qBACA,oBACA,SACA,UACA,aACA,aACA,mBACA,mBACA,YACA,YACA,UACA,cACA,QACA,WACA,eACA,YACA,QACA,WACA,eACA,YACA,gBACA,cACA,uBACA,mBACA,aACA,OACA,oBACA,qBACA,oBACA,0CACA,gBACA,aACA,mBACA,iBACA,YACA,iBACA,qBACA,cACA,UACA,gBACA,gBACA,gBACA,mBACA,aACA,aACA,WACA,UACA,OACA,wBACA,yBACA,uBACA,uBACA,0BACA,wBACA,gBACA,yBACA,MACA,oBACA,OACA,aACA,YACA,UACA,WACA,QACA,eACA,sBACA,wBACA,WACA,cACA,kBACA,gBACA,gBACA,oBACA,OACA,aACA,YACA,kBACA,aACA,mBACA,OACA,6BACA,+BACA,aACA,eACA,YACA,SACA,YACA,gBACA,eACA,gBACA,uBACA,uBACA,kBACA,iBACA,sBACA,mBACA,kBACA,gBACA,gBACA,MACA,WACA,WACA,iBACA,6BACA,qBACA,kBACA,kBACA,MACA,WACA,MACA,OACA,UACA,SACA,UACA,UACA,MACA,WACA,YACA,WACA,aACA,iBACA,WACA,aACA,iBACA,SACA,mBACA,SACA,WACA,oBACA,iBACA,iBACA,kBACA,eACA,eACA,aACA,eACA,eACA,wBACA,qBACA,qBACA,sBACA,mBACA,mBACA,eACA,cACA,cACA,eACA,wBACA,qBACA,qBACA,eACA,wBACA,qBACA,qBACA,cACA,uBACA,oBACA,oBACA,cACA,uBACA,oBACA,oBACA,gBACA,YACA,qBACA,kBACA,kBACA,YACA,qBACA,kBACA,kBACA,SACA,SACA,kBACA,eACA,SACA,kBACA,eACA,YACA,YACA,WACA,oBACA,iBACA,iBACA,UACA,mBACA,gBACA,gBACA,WACA,oBACA,iBACA,iBACA,UACA,mBACA,gBACA,gBACA,UACA,mBACA,gBACA,gBACA,SACA,kBACA,eACA,eACA,gBACA,iBACA,wBACA,wBACA,mBACA,kBACA,uBACA,oBACA,mBACA,iBACA,iBACA,eACA,mBACA,mBACA,WACA,sBACA,4BACA,WACA,UACA,aACA,YACA,mBACA,oBACA,sBACA,qBACA,uBACA,sBACA,oBACA,oBACA,WACA,eACA,0BACA,sBACA,uBACA,gBACA,mBACA,oBACA,uBACA,uBACA,kBACA,iBACA,sBACA,mBACA,kBACA,sBACA,gBACA,gBACA,WACA,oBACA,SACA,aACA,aACA,aACA,YACA,kBACA,kBACA,WACA,oBACA,iBACA,iBACA,YACA,qBACA,kBACA,kBACA,WACA,oBACA,iBACA,iBACA,WACA,oBACA,iBACA,iBACA,UACA,mBACA,gBACA,gBACA,SACA,kBACA,eACA,eACA,kBACA,yBACA,yBACA,wBACA,cACA,SACA,WACA,aACA,mBACA,SACA,aACA,QACA,SACA,OACA,eACA,iBACA,gBACA,4BACA,4BACA,YACA,WACA,WACA,YACA,QACA,WACA,kBACA,SACA,YACA,cACA,QACA,cACA,sBACA,eACA,uBACA,aACA,gBACA,wBACA,cACA,YACA,wBACA,QACA,QACA,QACA,OACA,eACA,iBACA,YACA,YACA,YACA,WACA,QACA,YACA,SACA,OACA,2BACA,SACA,eACA,UACA,gBACA,mBACA,YACA,UACA,eACA,wBACA,yBACA,uBACA,uBACA,0BACA,wBACA,gBACA,OACA,aACA,eACA,WACA,MACA,qBACA,wBACA,uCACA,2CACA,4BACA,oCACA,wCACA,yBACA,qBACA,oCACA,wCACA,yBACA,WACA,MACA,WACA,WACA,uBACA,WACA,YACA,yBACA,eC/tCF,IACE,OACA,UACA,OACA,QACA,0BACA,eACA,OACA,SACA,eACA,kBACA,gBACA,QACA,cACA,eACA,OACA,iBACA,iBACA,QACA,UACA,oBACA,UACA,aACA,QACA,QACA,sBACA,OACA,SACA,iBACA,cACA,SACA,WACA,SACA,MACA,OACA,YACA,WACA,OACA,QACA,QACA,OACA,YACA,UACA,UACA,SACA,SACA,sBACA,SACA,aACA,OACA,UACA,SACA,aACA,QACA,aACA,SACA,eACA,SACA,qBACA,UACA,OACA,QACA,QACA,OACA,SACA,WACA,wBACA,iBACA,qBACA,6BACA,UACA,kCACA,qBACA,gBACA,oBACA,WACA,WACA,aACA,OACA,WACA,yBACA,mBACA,WACA,WACA,gBACA,UACA,eACA,aACA,QACA,YACA,OACA,oBACA,YACA,QACA,WACA,UACA,MACA,OACA,QACA,MACA,mBACA,mBACA,eACA,OACA,qBACA,OACA,OACA,WACA,iBACA,gBACA,aACA,iBACA,gBACA,sBACA,kBACA,OACA,YACA,UACA,cACA,MACA,kBACA,QACA,MACA,SACA,mBACA,SACA,OACA,oBACA,UACA,SACA,YACA,QCnIF,IAAgB,OAAQ,QAAS,OAAQ,OAAQ,MAAO,OCAxD,IACE,SACA,WACA,eACA,QACA,MACA,YACA,cACA,gBACA,sBACA,wBACA,cACA,gBACA,qBACA,QACA,eACA,yBACA,aACA,oBACA,8BACA,SACA,gBACA,0BACA,YACA,mBACA,6BACA,WACA,aACA,YACA,SACA,oB,yHCtBF,IAAIqnB,GAAqB,K,IAQzB,I,SAAKC,GAAAA,EACHC,UAAY,mBADTD,EAEHE,SAAW,kBAFRF,EAGHG,UAAY,mBAHTH,EAIHI,UAAY,mBAJTJ,EAKHK,OAAS,gBALNL,EAMHM,YAAc,qBANXN,EAOHO,QAAU,iBAPPP,EAQHQ,cAAgB,uBARbR,EASHS,SAAW,kBATRT,EAUHU,OAAS,e,EAVNV,KAAAA,GAAAA,CAAAA,IAaE,MAAMW,GAAa,wBACbC,GAAc,qBAEdC,GAAiB,CAC5BC,EACAC,EACAC,EACAC,KAEA,MAAM,OAAEC,EAAM,SAAEC,EAAQ,SAAEC,EAAQ,QAAEC,EAAO,cAAEC,EAAa,KAAEC,GAASR,EAAeS,UAAUC,mBAE9F,IAAIC,EACAC,EACAC,EACAC,E,IAGkBb,EACHA,EACDA,EAOlB,GAVIA,IACFU,GAAoBV,QAAAA,EAAAA,SAAAA,IAAAA,O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","sources":["webpack:///./views/QueryEditor/QueryEditor.css","webpack:///../node_modules/css-loader/dist/runtime/api.js","webpack:///../node_modules/css-loader/dist/runtime/sourceMaps.js","webpack:///../node_modules/dayjs/dayjs.min.js","webpack:///../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack:///../node_modules/style-loader/dist/runtime/insertBySelector.js","webpack:///../node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack:///../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack:///../node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack:///../node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"lodash\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/nonce","webpack:///../node_modules/date-fns/constants.js","webpack:///../node_modules/date-fns/constructFrom.js","webpack:///../node_modules/date-fns/toDate.js","webpack:///../node_modules/date-fns/parseISO.js","webpack:///../node_modules/date-fns-tz/dist/esm/_lib/tzTokenizeDate/index.js","webpack:///../node_modules/date-fns-tz/dist/esm/_lib/newDateUTC/index.js","webpack:///../node_modules/date-fns-tz/dist/esm/_lib/tzParseTimezone/index.js","webpack:///../node_modules/date-fns-tz/dist/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack:///../node_modules/date-fns-tz/dist/esm/_lib/tzPattern/index.js","webpack:///../node_modules/date-fns-tz/dist/esm/toDate/index.js","webpack:///./datasource/sql-series/toAnnotation.ts","webpack:///../node_modules/date-fns-tz/dist/esm/toZonedTime/index.js","webpack:///./datasource/sql-series/toLogs.ts","webpack:///./datasource/sql-series/toTable.ts","webpack:///./datasource/sql-series/toTimeSeries.ts","webpack:///../node_modules/luxon/src/errors.js","webpack:///../node_modules/luxon/src/impl/formats.js","webpack:///../node_modules/luxon/src/zone.js","webpack:///../node_modules/luxon/src/zones/systemZone.js","webpack:///../node_modules/luxon/src/zones/IANAZone.js","webpack:///../node_modules/luxon/src/impl/locale.js","webpack:///../node_modules/luxon/src/impl/english.js","webpack:///../node_modules/luxon/src/zones/fixedOffsetZone.js","webpack:///../node_modules/luxon/src/zones/invalidZone.js","webpack:///../node_modules/luxon/src/impl/zoneUtil.js","webpack:///../node_modules/luxon/src/impl/util.js","webpack:///../node_modules/luxon/src/impl/digits.js","webpack:///../node_modules/luxon/src/settings.js","webpack:///../node_modules/luxon/src/impl/invalid.js","webpack:///../node_modules/luxon/src/impl/conversions.js","webpack:///../node_modules/luxon/src/impl/formatter.js","webpack:///../node_modules/luxon/src/impl/regexParser.js","webpack:///../node_modules/luxon/src/duration.js","webpack:///../node_modules/luxon/src/interval.js","webpack:///../node_modules/luxon/src/info.js","webpack:///../node_modules/luxon/src/impl/diff.js","webpack:///../node_modules/luxon/src/impl/tokenParser.js","webpack:///../node_modules/luxon/src/datetime.js","webpack:///./datasource/sql-series/sql_series.ts","webpack:///./datasource/sql-series/toFlamegraph.ts","webpack:///./datasource/sql-series/toTraces.ts","webpack:///./datasource/scanner/scanner.ts","webpack:///./types/types.ts","webpack:///./datasource/sql-query/sql-query-helper.ts","webpack:///./datasource/sql-query/sql-query-macros.ts","webpack:///./datasource/sql-query/sql_query.ts","webpack:///./datasource/response_parser.ts","webpack:///./datasource/adhoc.ts","webpack:///./views/QueryEditor/components/QueryHeader/QueryHeader.constants.ts","webpack:///./views/QueryEditor/components/QueryHeader/QueryHeader.tsx","webpack:///./views/QueryEditor/components/QueryHeader/helpers/findDifferences.ts","webpack:///./views/QueryEditor/components/QueryTextEditor/QueryMacrosInfo.tsx","webpack:///./views/QueryEditor/components/QueryTextEditor/editor/constants/keywords.ts","webpack:///./views/QueryEditor/components/QueryTextEditor/editor/constants/funcs.ts","webpack:///./views/QueryEditor/components/QueryTextEditor/editor/constants/data-types.ts","webpack:///./views/QueryEditor/components/QueryTextEditor/editor/constants/constants.ts","webpack:///./views/QueryEditor/components/QueryTextEditor/editor/constants/macros.ts","webpack:///./views/QueryEditor/components/QueryTextEditor/editor/initiateEditor.ts","webpack:///./views/QueryEditor/components/QueryTextEditor/editor/autocompletions/functions.ts","webpack:///./views/QueryEditor/components/QueryTextEditor/editor/autocompletions/macros.ts","webpack:///./views/QueryEditor/hooks/useSystemDatabases.ts","webpack:///./views/QueryEditor/hooks/useAutocompletionData.ts","webpack:///./views/constants.ts","webpack:///./views/QueryEditor/components/QueryTextEditor/SQLCodeEditor.tsx","webpack:///./views/QueryEditor/components/QueryTextEditor/FormattedSQL.tsx","webpack:///./views/QueryEditor/components/QueryTextEditor/QueryTextEditor.tsx","webpack:///./views/QueryEditor/components/QueryBuilder/components/UniversalSelectComponent.tsx","webpack:///./views/QueryEditor/components/QueryBuilder/QueryBuilder.tsx","webpack:///./views/QueryEditor/components/QueryBuilder/hooks/useConnectionData.ts","webpack:///./views/QueryEditor/hooks/useQueryState.ts","webpack:///./views/QueryEditor/QueryEditor.css?94d8","webpack:///./views/QueryEditor/helpers/getAdHocFilters.ts","webpack:///./views/QueryEditor/QueryEditor.tsx","webpack:///./views/QueryEditor/helpers/initializeQueryDefaults.ts","webpack:///./views/QueryEditor/hooks/useFormattedData.ts","webpack:///./datasource/datasource.ts","webpack:///./views/ConfigEditor/FormParts/DefaultValues/DefaultValues.api.ts","webpack:///./views/ConfigEditor/FormParts/DefaultValues/DefaultValues.tsx","webpack:///./views/ConfigEditor/constants.ts","webpack:///./module.ts","webpack:///./views/ConfigEditor/ConfigEditor.tsx"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.adhoc-filters-tags {\n  margin: 5px 0;\n}\n\n.adhoc-filters-tags > div {\n  display: none;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./views/QueryEditor/QueryEditor.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;AACf\",\"sourcesContent\":[\".adhoc-filters-tags {\\n  margin: 5px 0;\\n}\\n\\n.adhoc-filters-tags > div {\\n  display: none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",c=\"month\",f=\"quarter\",h=\"year\",d=\"date\",l=\"Invalid Date\",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),ordinal:function(t){var e=[\"th\",\"st\",\"nd\",\"rd\"],n=t%100;return\"[\"+t+(e[(n-20)%10]||e[n]||e[0])+\"]\"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},g=\"en\",D={};D[g]=M;var p=\"$isDayjsObject\",S=function(t){return t instanceof _||!(!t||!t[p])},w=function t(e,n,r){var i;if(!e)return g;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},O=function(t,e){if(S(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},b=v;b.l=w,b.i=S,b.w=function(t,e){return O(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=w(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[p]=!0}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(b.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return b},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=O(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return O(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<O(t)},m.$g=function(t,e,n){return b.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!b.u(e)||e,f=b.p(t),l=function(t,e){var i=b.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return b.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v=\"set\"+(this.$u?\"UTC\":\"\");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+\"Hours\",0);case u:return $(v+\"Minutes\",1);case s:return $(v+\"Seconds\",2);case i:return $(v+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=b.p(t),f=\"set\"+(this.$u?\"UTC\":\"\"),l=(n={},n[a]=f+\"Date\",n[d]=f+\"Date\",n[c]=f+\"Month\",n[h]=f+\"FullYear\",n[u]=f+\"Hours\",n[s]=f+\"Minutes\",n[i]=f+\"Seconds\",n[r]=f+\"Milliseconds\",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[b.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=b.p(f),y=function(t){var e=O(l);return b.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return b.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=b.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return b.s(s%12||12,t,\"0\")},$=f||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case\"YY\":return String(e.$y).slice(-2);case\"YYYY\":return b.s(e.$y,4,\"0\");case\"M\":return a+1;case\"MM\":return b.s(a+1,2,\"0\");case\"MMM\":return h(n.monthsShort,a,c,3);case\"MMMM\":return h(c,a);case\"D\":return e.$D;case\"DD\":return b.s(e.$D,2,\"0\");case\"d\":return String(e.$W);case\"dd\":return h(n.weekdaysMin,e.$W,o,2);case\"ddd\":return h(n.weekdaysShort,e.$W,o,3);case\"dddd\":return o[e.$W];case\"H\":return String(s);case\"HH\":return b.s(s,2,\"0\");case\"h\":return d(1);case\"hh\":return d(2);case\"a\":return $(s,u,!0);case\"A\":return $(s,u,!1);case\"m\":return String(u);case\"mm\":return b.s(u,2,\"0\");case\"s\":return String(e.$s);case\"ss\":return b.s(e.$s,2,\"0\");case\"SSS\":return b.s(e.$ms,3,\"0\");case\"Z\":return i}return null}(t)||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=b.p(d),m=O(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return b.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g}return l?$:b.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=w(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return b.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),k=_.prototype;return O.prototype=k,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",c],[\"$y\",h],[\"$D\",d]].forEach((function(t){k[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),O.extend=function(t,e){return t.$i||(t(e,_,O),t.$i=!0),O},O.locale=w,O.isDayjs=S,O.unix=function(t){return O(1e3*t)},O.en=D[g],O.Ls=D,O.p={},O}));","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__241__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nc = undefined;","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n} from \"./constants.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link parseISO} function options.\n */\n\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n * @param options - An object with options\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function parseISO(argument, options) {\n  const invalidDate = () => constructFrom(options?.in, NaN);\n\n  const additionalDigits = options?.additionalDigits ?? 2;\n  const dateStrings = splitDateString(argument);\n\n  let date;\n  if (dateStrings.date) {\n    const parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(+date)) return invalidDate();\n\n  const timestamp = +date;\n  let time = 0;\n  let offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) return invalidDate();\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) return invalidDate();\n  } else {\n    const tmpDate = new Date(timestamp + time);\n    const result = toDate(0, options?.in);\n    result.setFullYear(\n      tmpDate.getUTCFullYear(),\n      tmpDate.getUTCMonth(),\n      tmpDate.getUTCDate(),\n    );\n    result.setHours(\n      tmpDate.getUTCHours(),\n      tmpDate.getUTCMinutes(),\n      tmpDate.getUTCSeconds(),\n      tmpDate.getUTCMilliseconds(),\n    );\n    return result;\n  }\n\n  return toDate(timestamp + time + offset, options?.in);\n}\n\nconst patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/,\n};\n\nconst dateRegex =\n  /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nconst timeRegex =\n  /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nconst timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  const dateStrings = {};\n  const array = dateString.split(patterns.dateTimeDelimiter);\n  let timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(\n        dateStrings.date.length,\n        dateString.length,\n      );\n    }\n  }\n\n  if (timeString) {\n    const token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], \"\");\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  const regex = new RegExp(\n    \"^(?:(\\\\d{4}|[+-]\\\\d{\" +\n      (4 + additionalDigits) +\n      \"})|(\\\\d{2}|[+-]\\\\d{\" +\n      (2 + additionalDigits) +\n      \"})$)\",\n  );\n\n  const captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return { year: NaN, restDateString: \"\" };\n\n  const year = captures[1] ? parseInt(captures[1]) : null;\n  const century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length),\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n\n  const captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n\n  const isWeekDate = !!captures[4];\n  const dayOfYear = parseDateUnit(captures[1]);\n  const month = parseDateUnit(captures[2]) - 1;\n  const day = parseDateUnit(captures[3]);\n  const week = parseDateUnit(captures[4]);\n  const dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    const date = new Date(0);\n    if (\n      !validateDate(year, month, day) ||\n      !validateDayOfYearDate(year, dayOfYear)\n    ) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  const captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  const hours = parseTimeUnit(captures[1]);\n  const minutes = parseTimeUnit(captures[2]);\n  const seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return (\n    hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000\n  );\n}\n\nfunction parseTimeUnit(value) {\n  return (value && parseFloat(value.replace(\",\", \".\"))) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === \"Z\") return 0;\n\n  const captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n\n  const sign = captures[1] === \"+\" ? -1 : 1;\n  const hours = parseInt(captures[2]);\n  const minutes = (captures[3] && parseInt(captures[3])) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  const date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  const fourthOfJanuaryDay = date.getUTCDay() || 7;\n  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nconst daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nfunction validateDate(year, month, date) {\n  return (\n    month >= 0 &&\n    month <= 11 &&\n    date >= 1 &&\n    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))\n  );\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return (\n    seconds >= 0 &&\n    seconds < 60 &&\n    minutes >= 0 &&\n    minutes < 60 &&\n    hours >= 0 &&\n    hours < 25\n  );\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}\n\n// Fallback for modularized imports:\nexport default parseISO;\n","/**\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\n * `date` as it will be rendered in the `timeZone`.\n */\nexport function tzTokenizeDate(date, timeZone) {\n    const dtf = getDateTimeFormat(timeZone);\n    return 'formatToParts' in dtf ? partsOffset(dtf, date) : hackyOffset(dtf, date);\n}\nconst typeToPos = {\n    year: 0,\n    month: 1,\n    day: 2,\n    hour: 3,\n    minute: 4,\n    second: 5,\n};\nfunction partsOffset(dtf, date) {\n    try {\n        const formatted = dtf.formatToParts(date);\n        const filled = [];\n        for (let i = 0; i < formatted.length; i++) {\n            const pos = typeToPos[formatted[i].type];\n            if (pos !== undefined) {\n                filled[pos] = parseInt(formatted[i].value, 10);\n            }\n        }\n        return filled;\n    }\n    catch (error) {\n        if (error instanceof RangeError) {\n            return [NaN];\n        }\n        throw error;\n    }\n}\nfunction hackyOffset(dtf, date) {\n    const formatted = dtf.format(date);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted);\n    // const [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n    // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n    return [\n        parseInt(parsed[3], 10),\n        parseInt(parsed[1], 10),\n        parseInt(parsed[2], 10),\n        parseInt(parsed[4], 10),\n        parseInt(parsed[5], 10),\n        parseInt(parsed[6], 10),\n    ];\n}\n// Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\nconst dtfCache = {};\n// New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\nconst testDateFormatted = new Intl.DateTimeFormat('en-US', {\n    hourCycle: 'h23',\n    timeZone: 'America/New_York',\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n}).format(new Date('2014-06-25T04:00:00.123Z'));\nconst hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' ||\n    testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';\nfunction getDateTimeFormat(timeZone) {\n    if (!dtfCache[timeZone]) {\n        dtfCache[timeZone] = hourCycleSupported\n            ? new Intl.DateTimeFormat('en-US', {\n                hourCycle: 'h23',\n                timeZone: timeZone,\n                year: 'numeric',\n                month: 'numeric',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            })\n            : new Intl.DateTimeFormat('en-US', {\n                hour12: false,\n                timeZone: timeZone,\n                year: 'numeric',\n                month: 'numeric',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n    }\n    return dtfCache[timeZone];\n}\n","/**\n * Use instead of `new Date(Date.UTC(...))` to support years below 100 which doesn't work\n * otherwise due to the nature of the\n * [`Date` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years.\n *\n * For `Date.UTC(...)`, use `newDateUTC(...).getTime()`.\n */\nexport function newDateUTC(fullYear, month, day, hour, minute, second, millisecond) {\n    const utcDate = new Date(0);\n    utcDate.setUTCFullYear(fullYear, month, day);\n    utcDate.setUTCHours(hour, minute, second, millisecond);\n    return utcDate;\n}\n","import { tzTokenizeDate } from '../tzTokenizeDate/index.js';\nimport { newDateUTC } from '../newDateUTC/index.js';\nconst MILLISECONDS_IN_HOUR = 3600000;\nconst MILLISECONDS_IN_MINUTE = 60000;\nconst patterns = {\n    timezone: /([Z+-].*)$/,\n    timezoneZ: /^(Z)$/,\n    timezoneHH: /^([+-]\\d{2})$/,\n    timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/,\n};\n// Parse constious time zone offset formats to an offset in milliseconds\nexport function tzParseTimezone(timezoneString, date, isUtcDate) {\n    // Empty string\n    if (!timezoneString) {\n        return 0;\n    }\n    // Z\n    let token = patterns.timezoneZ.exec(timezoneString);\n    if (token) {\n        return 0;\n    }\n    let hours;\n    let absoluteOffset;\n    // ±hh\n    token = patterns.timezoneHH.exec(timezoneString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        if (!validateTimezone(hours)) {\n            return NaN;\n        }\n        return -(hours * MILLISECONDS_IN_HOUR);\n    }\n    // ±hh:mm or ±hhmm\n    token = patterns.timezoneHHMM.exec(timezoneString);\n    if (token) {\n        hours = parseInt(token[2], 10);\n        const minutes = parseInt(token[3], 10);\n        if (!validateTimezone(hours, minutes)) {\n            return NaN;\n        }\n        absoluteOffset = Math.abs(hours) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n        return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n    }\n    // IANA time zone\n    if (isValidTimezoneIANAString(timezoneString)) {\n        date = new Date(date || Date.now());\n        const utcDate = isUtcDate ? date : toUtcDate(date);\n        const offset = calcOffset(utcDate, timezoneString);\n        const fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString);\n        return -fixedOffset;\n    }\n    return NaN;\n}\nfunction toUtcDate(date) {\n    return newDateUTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n}\nfunction calcOffset(date, timezoneString) {\n    const tokens = tzTokenizeDate(date, timezoneString);\n    // ms dropped because it's not provided by tzTokenizeDate\n    const asUTC = newDateUTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3] % 24, tokens[4], tokens[5], 0).getTime();\n    let asTS = date.getTime();\n    const over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return asUTC - asTS;\n}\nfunction fixOffset(date, offset, timezoneString) {\n    const localTS = date.getTime();\n    // Our UTC time is just a guess because our offset is just a guess\n    let utcGuess = localTS - offset;\n    // Test whether the zone matches the offset for this ts\n    const o2 = calcOffset(new Date(utcGuess), timezoneString);\n    // If so, offset didn't change, and we're done\n    if (offset === o2) {\n        return offset;\n    }\n    // If not, change the ts by the difference in the offset\n    utcGuess -= o2 - offset;\n    // If that gives us the local time we want, we're done\n    const o3 = calcOffset(new Date(utcGuess), timezoneString);\n    if (o2 === o3) {\n        return o2;\n    }\n    // If it's different, we're in a hole time. The offset has changed, but we don't adjust the time\n    return Math.max(o2, o3);\n}\nfunction validateTimezone(hours, minutes) {\n    return -23 <= hours && hours <= 23 && (minutes == null || (0 <= minutes && minutes <= 59));\n}\nconst validIANATimezoneCache = {};\nfunction isValidTimezoneIANAString(timeZoneString) {\n    if (validIANATimezoneCache[timeZoneString])\n        return true;\n    try {\n        new Intl.DateTimeFormat(undefined, { timeZone: timeZoneString });\n        validIANATimezoneCache[timeZoneString] = true;\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n}\n","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n    const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    utcDate.setUTCFullYear(date.getFullYear());\n    return +date - +utcDate;\n}\n","/** Regex to identify the presence of a time zone specifier in a date string */\nexport const tzPattern = /(Z|[+-]\\d{2}(?::?\\d{2})?| UTC| [a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?)$/;\n","import { getTimezoneOffsetInMilliseconds } from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\nimport { tzPattern } from '../_lib/tzPattern/index.js';\nconst MILLISECONDS_IN_HOUR = 3600000;\nconst MILLISECONDS_IN_MINUTE = 60000;\nconst DEFAULT_ADDITIONAL_DIGITS = 2;\nconst patterns = {\n    dateTimePattern: /^([0-9W+-]+)(T| )(.*)/,\n    datePattern: /^([0-9W+-]+)(.*)/,\n    plainTime: /:/,\n    // year tokens\n    YY: /^(\\d{2})$/,\n    YYY: [\n        /^([+-]\\d{2})$/, // 0 additional digits\n        /^([+-]\\d{3})$/, // 1 additional digit\n        /^([+-]\\d{4})$/, // 2 additional digits\n    ],\n    YYYY: /^(\\d{4})/,\n    YYYYY: [\n        /^([+-]\\d{4})/, // 0 additional digits\n        /^([+-]\\d{5})/, // 1 additional digit\n        /^([+-]\\d{6})/, // 2 additional digits\n    ],\n    // date tokens\n    MM: /^-(\\d{2})$/,\n    DDD: /^-?(\\d{3})$/,\n    MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n    Www: /^-?W(\\d{2})$/,\n    WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n    HH: /^(\\d{2}([.,]\\d*)?)$/,\n    HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n    HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n    // time zone tokens (to identify the presence of a tz)\n    timeZone: tzPattern,\n};\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param argument the value to convert\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {string} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n *\n * @returns the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function toDate(argument, options = {}) {\n    if (arguments.length < 1) {\n        throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n    if (argument === null) {\n        return new Date(NaN);\n    }\n    const additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : Number(options.additionalDigits);\n    if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n        throw new RangeError('additionalDigits must be 0, 1 or 2');\n    }\n    // Clone the date\n    if (argument instanceof Date ||\n        (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')) {\n        // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n        return new Date(argument.getTime());\n    }\n    else if (typeof argument === 'number' ||\n        Object.prototype.toString.call(argument) === '[object Number]') {\n        return new Date(argument);\n    }\n    else if (!(Object.prototype.toString.call(argument) === '[object String]')) {\n        return new Date(NaN);\n    }\n    const dateStrings = splitDateString(argument);\n    const { year, restDateString } = parseYear(dateStrings.date, additionalDigits);\n    const date = parseDate(restDateString, year);\n    if (date === null || isNaN(date.getTime())) {\n        return new Date(NaN);\n    }\n    if (date) {\n        const timestamp = date.getTime();\n        let time = 0;\n        let offset;\n        if (dateStrings.time) {\n            time = parseTime(dateStrings.time);\n            if (time === null || isNaN(time)) {\n                return new Date(NaN);\n            }\n        }\n        if (dateStrings.timeZone || options.timeZone) {\n            offset = tzParseTimezone(dateStrings.timeZone || options.timeZone, new Date(timestamp + time));\n            if (isNaN(offset)) {\n                return new Date(NaN);\n            }\n        }\n        else {\n            // get offset accurate to hour in time zones that change offset\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));\n        }\n        return new Date(timestamp + time + offset);\n    }\n    else {\n        return new Date(NaN);\n    }\n}\nfunction splitDateString(dateString) {\n    const dateStrings = {};\n    let parts = patterns.dateTimePattern.exec(dateString);\n    let timeString;\n    if (!parts) {\n        parts = patterns.datePattern.exec(dateString);\n        if (parts) {\n            dateStrings.date = parts[1];\n            timeString = parts[2];\n        }\n        else {\n            dateStrings.date = null;\n            timeString = dateString;\n        }\n    }\n    else {\n        dateStrings.date = parts[1];\n        timeString = parts[3];\n    }\n    if (timeString) {\n        const token = patterns.timeZone.exec(timeString);\n        if (token) {\n            dateStrings.time = timeString.replace(token[1], '');\n            dateStrings.timeZone = token[1].trim();\n        }\n        else {\n            dateStrings.time = timeString;\n        }\n    }\n    return dateStrings;\n}\nfunction parseYear(dateString, additionalDigits) {\n    if (dateString) {\n        const patternYYY = patterns.YYY[additionalDigits];\n        const patternYYYYY = patterns.YYYYY[additionalDigits];\n        // YYYY or ±YYYYY\n        let token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n        if (token) {\n            const yearString = token[1];\n            return {\n                year: parseInt(yearString, 10),\n                restDateString: dateString.slice(yearString.length),\n            };\n        }\n        // YY or ±YYY\n        token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\n        if (token) {\n            const centuryString = token[1];\n            return {\n                year: parseInt(centuryString, 10) * 100,\n                restDateString: dateString.slice(centuryString.length),\n            };\n        }\n    }\n    // Invalid ISO-formatted year\n    return {\n        year: null,\n    };\n}\nfunction parseDate(dateString, year) {\n    // Invalid ISO-formatted year\n    if (year === null) {\n        return null;\n    }\n    let date;\n    let month;\n    let week;\n    // YYYY\n    if (!dateString || !dateString.length) {\n        date = new Date(0);\n        date.setUTCFullYear(year);\n        return date;\n    }\n    // YYYY-MM\n    let token = patterns.MM.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        month = parseInt(token[1], 10) - 1;\n        if (!validateDate(year, month)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, month);\n        return date;\n    }\n    // YYYY-DDD or YYYYDDD\n    token = patterns.DDD.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        const dayOfYear = parseInt(token[1], 10);\n        if (!validateDayOfYearDate(year, dayOfYear)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, 0, dayOfYear);\n        return date;\n    }\n    // yyyy-MM-dd or YYYYMMDD\n    token = patterns.MMDD.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        month = parseInt(token[1], 10) - 1;\n        const day = parseInt(token[2], 10);\n        if (!validateDate(year, month, day)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, month, day);\n        return date;\n    }\n    // YYYY-Www or YYYYWww\n    token = patterns.Www.exec(dateString);\n    if (token) {\n        week = parseInt(token[1], 10) - 1;\n        if (!validateWeekDate(week)) {\n            return new Date(NaN);\n        }\n        return dayOfISOWeekYear(year, week);\n    }\n    // YYYY-Www-D or YYYYWwwD\n    token = patterns.WwwD.exec(dateString);\n    if (token) {\n        week = parseInt(token[1], 10) - 1;\n        const dayOfWeek = parseInt(token[2], 10) - 1;\n        if (!validateWeekDate(week, dayOfWeek)) {\n            return new Date(NaN);\n        }\n        return dayOfISOWeekYear(year, week, dayOfWeek);\n    }\n    // Invalid ISO-formatted date\n    return null;\n}\nfunction parseTime(timeString) {\n    let hours;\n    let minutes;\n    // hh\n    let token = patterns.HH.exec(timeString);\n    if (token) {\n        hours = parseFloat(token[1].replace(',', '.'));\n        if (!validateTime(hours)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR;\n    }\n    // hh:mm or hhmm\n    token = patterns.HHMM.exec(timeString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        minutes = parseFloat(token[2].replace(',', '.'));\n        if (!validateTime(hours, minutes)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n    }\n    // hh:mm:ss or hhmmss\n    token = patterns.HHMMSS.exec(timeString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        minutes = parseInt(token[2], 10);\n        const seconds = parseFloat(token[3].replace(',', '.'));\n        if (!validateTime(hours, minutes, seconds)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n    }\n    // Invalid ISO-formatted time\n    return null;\n}\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n    week = week || 0;\n    day = day || 0;\n    const date = new Date(0);\n    date.setUTCFullYear(isoWeekYear, 0, 4);\n    const fourthOfJanuaryDay = date.getUTCDay() || 7;\n    const diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n    date.setUTCDate(date.getUTCDate() + diff);\n    return date;\n}\n// Validation functions\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nfunction isLeapYearIndex(year) {\n    return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\nfunction validateDate(year, month, date) {\n    if (month < 0 || month > 11) {\n        return false;\n    }\n    if (date != null) {\n        if (date < 1) {\n            return false;\n        }\n        const isLeapYear = isLeapYearIndex(year);\n        if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n            return false;\n        }\n        if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction validateDayOfYearDate(year, dayOfYear) {\n    if (dayOfYear < 1) {\n        return false;\n    }\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear && dayOfYear > 366) {\n        return false;\n    }\n    if (!isLeapYear && dayOfYear > 365) {\n        return false;\n    }\n    return true;\n}\nfunction validateWeekDate(week, day) {\n    if (week < 0 || week > 52) {\n        return false;\n    }\n    if (day != null && (day < 0 || day > 6)) {\n        return false;\n    }\n    return true;\n}\nfunction validateTime(hours, minutes, seconds) {\n    if (hours < 0 || hours >= 25) {\n        return false;\n    }\n    if (minutes != null && (minutes < 0 || minutes >= 60)) {\n        return false;\n    }\n    if (seconds != null && (seconds < 0 || seconds >= 60)) {\n        return false;\n    }\n    return true;\n}\n","import { Field } from './sql_series';\nimport { parseISO } from 'date-fns';\nimport { toZonedTime } from 'date-fns-tz';\n\nexport const toAnnotation = (input: any, meta: any): any[] => {\n  let series: any[] = input;\n\n  function parseTimeBasedOnType(timeStr: string, type: string): number {\n    if (type.startsWith('DateTime64')) {\n      const match = type.match(/DateTime64\\(\\d+,\\s*'([^']+)'\\)/);\n      if (match) {\n        const timezone = match[1];\n        const date = parseISO(timeStr);\n        return toZonedTime(date, timezone).getTime();\n      }\n      return parseISO(timeStr).getTime();\n    }\n    if (type === 'DateTime' || type === 'DateTime64') {\n      return parseISO(timeStr).getTime();\n    }\n\n    // Default to timestamp parsing if no other type matches\n    return parseInt(timeStr, 10);\n  }\n\n  function transformAnnotationData(inputData: any): any[] {\n    const fields: { [key: string]: Field } = {\n      time: { name: 'time', type: 'number', values: [], config: {} },\n      timeEnd: { name: 'timeEnd', type: 'number', values: [], config: {} },\n      title: { name: 'title', type: 'string', values: [], config: {} },\n      text: { name: 'text', type: 'string', values: [], config: {} },\n      tags: { name: 'tags', type: 'array', values: [], config: {} },\n    };\n\n    inputData.forEach((annotation) => {\n      const timeType = meta.find((m: any) => m.name === 'time')?.type || 'number';\n      const timeEndType = meta.find((m: any) => m.name === 'time_end')?.type || 'number';\n\n      fields.time.values.push(parseTimeBasedOnType(annotation.time, timeType));\n      fields.timeEnd.values.push(parseTimeBasedOnType(annotation.time_end, timeEndType));\n      fields.title.values.push(annotation.title);\n      fields.text.values.push(annotation.text);\n      fields.tags.values.push(annotation.tags ? annotation.tags.split(',') : []); // Split tags into an array\n    });\n\n    return [\n      {\n        fields: Object.values(fields),\n        length: inputData.length, // Using the provided rows count\n      },\n    ];\n  }\n\n  return transformAnnotationData(series);\n};\n","import { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\nimport { toDate } from '../toDate/index.js';\n/**\n * @name toZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param date the date with the relevant UTC time\n * @param timeZone the time zone to get local time for, can be an offset or IANA time zone\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n *\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = toZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\nexport function toZonedTime(date, timeZone, options) {\n    date = toDate(date, options);\n    const offsetMilliseconds = tzParseTimezone(timeZone, date, true);\n    const d = new Date(date.getTime() - offsetMilliseconds);\n    const resultDate = new Date(0);\n    resultDate.setFullYear(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());\n    resultDate.setHours(d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\n    return resultDate;\n}\n","import {createDataFrame, DataFrame, DataFrameType, FieldType} from '@grafana/data';\nimport {each, find, omitBy, pickBy} from 'lodash';\nimport {convertTimezonedDateToUTC} from './sql_series';\n\nconst transformObject = (obj) => {\n  // Check if the input is an object and not null\n  if (obj && typeof obj === 'object') {\n    // Create a new object to store the transformed properties\n    const result = Array.isArray(obj) ? [] : {};\n\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        const value = obj[key];\n\n        // If the value is an object (and not null), convert it to a string\n        if (value && typeof value === 'object') {\n          result[key] = JSON.stringify(value);\n        } else {\n          // Otherwise, keep the primitive value as it is\n          result[key] = value;\n        }\n      }\n    }\n\n    return result;\n  }\n  // Return the original value if it's not an object\n  return obj;\n}\n\nconst _toFieldType = (type: string, index?: number): FieldType | Object => {\n  if (type.startsWith('Nullable(')) {\n    type = type.slice('Nullable('.length);\n    type = type.slice(0, -')'.length);\n  }\n\n  // Regex patterns\n  const dateTimeCombinedRegexTrimmed = /^\\s*DateTime(?:64)?\\s*\\(\\s*(?:\\d+\\s*,\\s*)?['\"]([^'\"]+)['\"]\\s*\\)\\s*$/i;\n\n  const dateTimeWithTZMatch = type.match(dateTimeCombinedRegexTrimmed);\n\n  let timezone;\n  if (dateTimeWithTZMatch) {\n    timezone = dateTimeWithTZMatch[1];\n    return { fieldType: FieldType.time, timezone };\n  }\n\n  if (type.startsWith('Date')) {\n    return FieldType.time;\n  }\n  // Assuming that fist column is time\n  // That's special case for 'Column:TimeStamp'\n  if (index === 0 && type.startsWith('UInt')) {\n    return FieldType.time;\n  }\n\n  if (type.startsWith('UInt') || type.startsWith('Int') || type.startsWith('Float') || type.startsWith('Decimal')) {\n    return FieldType.number;\n  }\n  if (type.startsWith('IPv')) {\n    return FieldType.other;\n  }\n  return FieldType.string;\n};\n\nexport const toLogs = (self: any): DataFrame[] => {\n  const reservedFields = ['severity', 'level', 'id'];\n\n  if (self.series.length === 0) {\n    return [];\n  }\n\n  let types: { [key: string]: any } = {};\n  let labelFields: any[] = [];\n  const labelFieldsList: any[] = []\n  let timestampKey;\n  // Trying to find message field, If we have a \"content\" field - take it, If not - take the first string field\n  let messageField = find(self.meta, ['name', 'content'])?.name;\n  if (messageField === undefined) {\n    messageField = find(self.meta, (o: any) => _toFieldType(o.type) === FieldType.string)?.name;\n  }\n\n  // If no string fields - this query is unusable for logs, because Grafana requires at least one text field\n  if (messageField === undefined) {\n    return [];\n  }\n\n  each(self.meta, function (col: any, index: number) {\n    let type = _toFieldType(col.type, index);\n\n    if ((type === FieldType.number || type === FieldType.string) && col.name !== messageField && !reservedFields.includes(col.name)) {\n      labelFields.push(col.name);\n    }\n\n    types[col.name] = type;\n  });\n\n  const dataObjectValues = Object.entries(self.series[0]).reduce((acc, [key, value]) => {\n    acc[key] = {\n      type: types[key],\n      values: [],\n      name: key,\n    };\n\n    return acc;\n  },{});\n\n  each(self.series, function (ser: any) {\n    const labels = pickBy(ser, (_value: any, key: string) => labelFields.includes(key));\n\n    if (Object.keys(labels).length > 0) {\n      labelFieldsList.push(transformObject(labels))\n    }\n\n    const data = omitBy(ser, (_value: any, key: string) => {\n      labelFields.includes(key);\n    });\n\n    const timestampObject = Object.entries(types)?.find(object => object[1] === 'time')\n    timestampKey = timestampObject? timestampObject[0] : null;\n\n    Object.entries(data)?.forEach(([key, value]) => {\n      if (\n        types[key] &&\n        types[key] instanceof Object &&\n        'fieldType' in types[key] &&\n        types[key].fieldType === FieldType.time\n      ) {\n        timestampKey = key;\n        dataObjectValues[key].values.push(convertTimezonedDateToUTC(value, types[key].timezone));\n      } else {\n        dataObjectValues[key].values.push(value);\n      }\n\n    });\n  });\n\n  const result = createDataFrame({\n    fields: [\n      dataObjectValues[timestampKey]?.values.length && {\n        name: 'timestamp',\n        type: FieldType.time,\n        values: dataObjectValues[timestampKey]?.values,\n      },\n      (dataObjectValues['level']?.values?.length || dataObjectValues['severity']?.values?.length) && {\n        name: 'severity',\n        type: (dataObjectValues['level'] || dataObjectValues['severity'])?.type,\n        values: (dataObjectValues['level'] || dataObjectValues['severity'])?.values,\n      },\n      dataObjectValues[messageField] && {\n        name: 'body',\n        type: dataObjectValues[messageField].type,\n        values: dataObjectValues[messageField].values,\n        config: { filterable: false }\n      },\n      labelFieldsList.length && {\n        name: 'labels',\n        values: labelFieldsList,\n        type: FieldType.other,\n      },\n      dataObjectValues['id']?.values?.length &&\n      {\n        name: 'id',\n        type: (dataObjectValues['id'])?.type,\n        values: (dataObjectValues['id'])?.values,\n      },\n    ].filter(Boolean),\n    meta: {\n      type: DataFrameType.LogLines,\n      preferredVisualisationType: 'logs'\n    },\n    refId: self.refId,\n  });\n\n  return [result]\n};\n","import { each } from 'lodash';\n\nconst _toJSTypeInTable = (type: any): string => {\n  switch (type) {\n    case 'UInt8':\n    case 'UInt16':\n    case 'UInt32':\n    case 'UInt64':\n    case 'Int8':\n    case 'Int16':\n    case 'Int32':\n    case 'Int64':\n    case 'Float32':\n    case 'Float64':\n    case 'Decimal':\n    case 'Decimal32':\n    case 'Decimal64':\n    case 'Decimal128':\n    case 'Nullable(UInt8)':\n    case 'Nullable(UInt16)':\n    case 'Nullable(UInt32)':\n    case 'Nullable(UInt64)':\n    case 'Nullable(Int8)':\n    case 'Nullable(Int16)':\n    case 'Nullable(Int32)':\n    case 'Nullable(Int64)':\n    case 'Nullable(Float32)':\n    case 'Nullable(Float64)':\n    case 'Nullable(Decimal)':\n    case 'Nullable(Decimal32)':\n    case 'Nullable(Decimal64)':\n    case 'Nullable(Decimal128)':\n      return 'number';\n    default:\n      return 'string';\n  }\n};\n\nconst _formatValueByType = (value: any, t: string) => {\n  if (value === null) {\n    return value;\n  }\n\n  if (typeof value === 'object') {\n    return JSON.stringify(value);\n  }\n\n  let numeric = Number(value);\n  if (isNaN(numeric) || t !== 'number') {\n    return value;\n  } else {\n    return numeric;\n  }\n};\n\nexport const toTable = (self): any => {\n  let data: Array<{ columns: any[]; rows: any[]; type: string }> = [];\n  if (self.series.length === 0) {\n    return data;\n  }\n\n  let columns: any[] = [];\n  each(self.meta, function (col) {\n    columns.push({ text: col.name, type: _toJSTypeInTable(col.type) });\n  });\n\n  let rows: any[] = [];\n  each(self.series, function (ser) {\n    let r: any[] = [];\n    each(columns, function (col, index) {\n      r.push(_formatValueByType(ser[col.text], _toJSTypeInTable(self.meta[index].type)));\n    });\n    rows.push(r);\n  });\n\n  data.push({\n    columns: columns,\n    rows: rows,\n    type: 'table',\n  });\n\n  return data;\n};\n","import { each, isArray } from 'lodash';\nimport { _toFieldType, convertTimezonedDateToUTC } from './sql_series';\nimport { FieldType } from '@grafana/data';\n\nconst _formatValue = (value: any) => {\n  if (value === null) {\n    return value;\n  }\n\n  if (typeof value === 'object') {\n    return JSON.stringify(value);\n  }\n\n  let numeric = Number(value);\n  if (isNaN(numeric)) {\n    return value;\n  } else {\n    return numeric;\n  }\n};\n\nconst extrapolateDataPoints = (datapoints: any, self) => {\n  if (datapoints.length < 10 || (!self.tillNow && datapoints[0][0] !== 0)) {\n    return datapoints;\n  }\n\n  // Duration between first/last samples and boundary of range.\n  const durationToStart = datapoints[0][1] / 1000 - self.from;\n  const durationToEnd = self.to - datapoints[datapoints.length - 1][1] / 1000;\n\n  // If the first/last samples are close to the boundaries of the range,\n  // extrapolate the result.\n  const sampledInterval = (datapoints[datapoints.length - 1][1] - datapoints[0][1]) / 1000;\n  const averageDurationBetweenSamples = sampledInterval / (datapoints.length - 1);\n\n  let diff;\n  // close to left border and value is 0 because of runningDifference function\n  if (durationToStart < averageDurationBetweenSamples && datapoints[0][0] === 0) {\n    diff = ((datapoints[1][0] - datapoints[2][0]) / datapoints[1][0]) * 0.1;\n    diff %= 1;\n\n    if (isNaN(diff)) {\n      diff = 0;\n    }\n\n    const newDatapointValue = datapoints[1][0] * (1 + diff);\n    if (!isNaN(newDatapointValue)) {\n      datapoints[0][0] = newDatapointValue;\n    }\n  }\n\n  if (durationToEnd < averageDurationBetweenSamples) {\n    let l = datapoints.length;\n    diff = ((datapoints[l - 2][0] - datapoints[l - 3][0]) / datapoints[l - 2][0]) * 0.1;\n    diff %= 1;\n\n    if (isNaN(diff)) {\n      diff = 0;\n    }\n\n    const newDatapointValue = datapoints[l - 2][0] * (1 + diff);\n\n    if (!isNaN(newDatapointValue)) {\n      datapoints[l - 1][0] = newDatapointValue;\n    }\n  }\n\n  return datapoints;\n};\n\nconst _pushDatapoint = (metrics: any, timestamp: number, key: string, value: number) => {\n  if (!metrics[key]) {\n    metrics[key] = [];\n    /* Fill null values for each new series */\n    for (let seriesName in metrics) {\n      metrics[seriesName].forEach((v: any) => {\n        if (v[1] < timestamp) {\n          metrics[key].push([null, v[1]]);\n        }\n      });\n      break;\n    }\n  }\n\n  metrics[key].push([_formatValue(value), timestamp]);\n};\n\nexport const toTimeSeries = (extrapolate = true, self): any => {\n  let timeSeries: any[] = [];\n  if (self.series.length === 0) {\n    return timeSeries;\n  }\n\n  let metrics: { [key: string]: any[] } = {};\n  // timeCol have to be the first column always\n  let timeCol = self.meta[0];\n  let timeColType = _toFieldType(timeCol.type || '');\n  let lastTimeStamp = self.series[0][timeCol.name];\n  let keyColumns = self.keys.filter((name: string) => {\n    return name !== timeCol.name;\n  });\n  each(self.series, function (row) {\n    let t = _formatValue(row[timeCol.name]);\n    /* Build composite key (categories) from GROUP BY */\n    let metricKey: any = null;\n\n    if (keyColumns.length > 0) {\n      metricKey = keyColumns\n        .map((name: string) => {\n          const value = row[name];\n\n          if (typeof value === 'undefined') {\n            return undefined;\n          }\n\n          if (typeof value === 'object') {\n            return JSON.stringify(value);\n          } else {\n            return String(value);\n          }\n        })\n        .join(', ');\n    }\n\n    /* Make sure all series end with a value or nil for current timestamp\n     * to render discontinuous timeseries properly. */\n    if (lastTimeStamp < t) {\n      each(metrics, function (dataPoints, seriesName) {\n        if (dataPoints[dataPoints.length - 1][1] < lastTimeStamp) {\n          dataPoints.push([null, lastTimeStamp]);\n        }\n      });\n      lastTimeStamp = t;\n    }\n    /* For each metric-value pair in row, construct a datapoint */\n    each(row, function (val, key) {\n      /* Skip timestamp and GROUP BY keys */\n      if ((self.keys.length === 0 && timeCol.name === key) || self.keys.indexOf(key) >= 0) {\n        return;\n      }\n      /* If composite key is specified, e.g. 'category1',\n       * use it instead of the metric name, e.g. count() */\n      if (metricKey) {\n        key = metricKey;\n      }\n      if (timeColType?.fieldType === FieldType.time) {\n        t = convertTimezonedDateToUTC(t, timeColType.timezone);\n      }\n\n      if (isArray(val)) {\n        /* Expand groupArray into multiple timeseries */\n        each(val, function (arr) {\n          _pushDatapoint(metrics, t, arr[0], arr[1]);\n        });\n      } else {\n        _pushDatapoint(metrics, t, key, val);\n      }\n    });\n  });\n\n  each(metrics, function (dataPoints, seriesName) {\n    if (extrapolate) {\n      timeSeries.push({ target: seriesName, datapoints: extrapolateDataPoints(dataPoints, self), refId: seriesName && self.refId ? `${self.refId} - ${seriesName}` : undefined});\n    } else {\n      timeSeries.push({ target: seriesName, datapoints: dataPoints, refId: seriesName && self.refId ? `${self.refId} - ${seriesName}` : undefined});\n    }\n  });\n\n  return timeSeries;\n};\n","// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nexport class ZoneIsAbstractError extends LuxonError {\n  constructor() {\n    super(\"Zone is an abstract class\");\n  }\n}\n","/**\n * @private\n */\n\nconst n = \"numeric\",\n  s = \"short\",\n  l = \"long\";\n\nexport const DATE_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n};\n\nexport const DATE_MED = {\n  year: n,\n  month: s,\n  day: n,\n};\n\nexport const DATE_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n};\n\nexport const DATE_FULL = {\n  year: n,\n  month: l,\n  day: n,\n};\n\nexport const DATE_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n};\n\nexport const TIME_SIMPLE = {\n  hour: n,\n  minute: n,\n};\n\nexport const TIME_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const TIME_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s,\n};\n\nexport const TIME_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l,\n};\n\nexport const TIME_24_SIMPLE = {\n  hour: n,\n  minute: n,\n  hourCycle: \"h23\",\n};\n\nexport const TIME_24_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n};\n\nexport const TIME_24_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n  timeZoneName: s,\n};\n\nexport const TIME_24_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n  timeZoneName: l,\n};\n\nexport const DATETIME_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_SHORT_WITH_SECONDS = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const DATETIME_MED = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_MED_WITH_SECONDS = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const DATETIME_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_FULL = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  timeZoneName: s,\n};\n\nexport const DATETIME_FULL_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s,\n};\n\nexport const DATETIME_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  timeZoneName: l,\n};\n\nexport const DATETIME_HUGE_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l,\n};\n","import { ZoneIsAbstractError } from \"./errors.js\";\n\n/**\n * @interface\n */\nexport default class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The IANA name of this zone.\n   * Defaults to `name` if not overwritten by a subclass.\n   * @abstract\n   * @type {string}\n   */\n  get ianaName() {\n    return this.name;\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n  get isUniversal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n","import { formatOffset, parseZoneInfo } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\nexport default class SystemZone extends Zone {\n  /**\n   * Get a singleton instance of the local zone\n   * @return {SystemZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new SystemZone();\n    }\n    return singleton;\n  }\n\n  /** @override **/\n  get type() {\n    return \"system\";\n  }\n\n  /** @override **/\n  get name() {\n    return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"system\";\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n","import { formatOffset, parseZoneInfo, isUndefined, objToLocalTS } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet dtfCache = {};\nfunction makeDTF(zone) {\n  if (!dtfCache[zone]) {\n    dtfCache[zone] = new Intl.DateTimeFormat(\"en-US\", {\n      hour12: false,\n      timeZone: zone,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      era: \"short\",\n    });\n  }\n  return dtfCache[zone];\n}\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  era: 3,\n  hour: 4,\n  minute: 5,\n  second: 6,\n};\n\nfunction hackyOffset(dtf, date) {\n  const formatted = dtf.format(date).replace(/\\u200E/g, \"\"),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+) (AD|BC),? (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;\n  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  const formatted = dtf.formatToParts(date);\n  const filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i];\n    const pos = typeToPos[type];\n\n    if (type === \"era\") {\n      filled[pos] = value;\n    } else if (!isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nlet ianaZoneCache = {};\n/**\n * A zone identified by an IANA identifier, like America/New_York\n * @implements {Zone}\n */\nexport default class IANAZone extends Zone {\n  /**\n   * @param {string} name - Zone name\n   * @return {IANAZone}\n   */\n  static create(name) {\n    if (!ianaZoneCache[name]) {\n      ianaZoneCache[name] = new IANAZone(name);\n    }\n    return ianaZoneCache[name];\n  }\n\n  /**\n   * Reset local caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCache() {\n    ianaZoneCache = {};\n    dtfCache = {};\n  }\n\n  /**\n   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.\n   * @param {string} s - The string to check validity on\n   * @example IANAZone.isValidSpecifier(\"America/New_York\") //=> true\n   * @example IANAZone.isValidSpecifier(\"Sport~~blorp\") //=> false\n   * @deprecated For backward compatibility, this forwards to isValidZone, better use `isValidZone()` directly instead.\n   * @return {boolean}\n   */\n  static isValidSpecifier(s) {\n    return this.isValidZone(s);\n  }\n\n  /**\n   * Returns whether the provided string identifies a real zone\n   * @param {string} zone - The string to check\n   * @example IANAZone.isValidZone(\"America/New_York\") //=> true\n   * @example IANAZone.isValidZone(\"Fantasia/Castle\") //=> false\n   * @example IANAZone.isValidZone(\"Sport~~blorp\") //=> false\n   * @return {boolean}\n   */\n  static isValidZone(zone) {\n    if (!zone) {\n      return false;\n    }\n    try {\n      new Intl.DateTimeFormat(\"en-US\", { timeZone: zone }).format();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(name) {\n    super();\n    /** @private **/\n    this.zoneName = name;\n    /** @private **/\n    this.valid = IANAZone.isValidZone(name);\n  }\n\n  /**\n   * The type of zone. `iana` for all instances of `IANAZone`.\n   * @override\n   * @type {string}\n   */\n  get type() {\n    return \"iana\";\n  }\n\n  /**\n   * The name of this zone (i.e. the IANA zone name).\n   * @override\n   * @type {string}\n   */\n  get name() {\n    return this.zoneName;\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year:\n   * Always returns false for all IANA zones.\n   * @override\n   * @type {boolean}\n   */\n  get isUniversal() {\n    return false;\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale, this.name);\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    const date = new Date(ts);\n\n    if (isNaN(date)) return NaN;\n\n    const dtf = makeDTF(this.name);\n    let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts\n      ? partsOffset(dtf, date)\n      : hackyOffset(dtf, date);\n\n    if (adOrBc === \"BC\") {\n      year = -Math.abs(year) + 1;\n    }\n\n    // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat\n    const adjustedHour = hour === 24 ? 0 : hour;\n\n    const asUTC = objToLocalTS({\n      year,\n      month,\n      day,\n      hour: adjustedHour,\n      minute,\n      second,\n      millisecond: 0,\n    });\n\n    let asTS = +date;\n    const over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @override\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    return otherZone.type === \"iana\" && otherZone.name === this.name;\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @override\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.valid;\n  }\n}\n","import { hasLocaleWeekInfo, hasRelative, padStart, roundTo, validateWeekSettings } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport Settings from \"../settings.js\";\nimport DateTime from \"../datetime.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n// todo - remap caching\n\nlet intlLFCache = {};\nfunction getCachedLF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlLFCache[key];\n  if (!dtf) {\n    dtf = new Intl.ListFormat(locString, opts);\n    intlLFCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlDTCache = {};\nfunction getCachedDTF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlNumCache = {};\nfunction getCachedINF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\n\nlet intlRelCache = {};\nfunction getCachedRTF(locString, opts = {}) {\n  const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options\n  const key = JSON.stringify([locString, cacheKeyOpts]);\n  let inf = intlRelCache[key];\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n  return inf;\n}\n\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  }\n}\n\nlet weekInfoCache = {};\nfunction getCachedWeekInfo(locString) {\n  let data = weekInfoCache[locString];\n  if (!data) {\n    const locale = new Intl.Locale(locString);\n    // browsers currently implement this as a property, but spec says it should be a getter function\n    data = \"getWeekInfo\" in locale ? locale.getWeekInfo() : locale.weekInfo;\n    weekInfoCache[locString] = data;\n  }\n  return data;\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  // private subtags and unicode subtags have ordering requirements,\n  // and we're not properly parsing this, so just strip out the\n  // private ones if they exist.\n  const xIndex = localeStr.indexOf(\"-x-\");\n  if (xIndex !== -1) {\n    localeStr = localeStr.substring(0, xIndex);\n  }\n\n  const uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    let options;\n    let selectedStr;\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n      selectedStr = localeStr;\n    } catch (e) {\n      const smaller = localeStr.substring(0, uIndex);\n      options = getCachedDTF(smaller).resolvedOptions();\n      selectedStr = smaller;\n    }\n\n    const { numberingSystem, calendar } = options;\n    return [selectedStr, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (outputCalendar || numberingSystem) {\n    if (!localeStr.includes(\"-u-\")) {\n      localeStr += \"-u\";\n    }\n\n    if (outputCalendar) {\n      localeStr += `-ca-${outputCalendar}`;\n    }\n\n    if (numberingSystem) {\n      localeStr += `-nu-${numberingSystem}`;\n    }\n    return localeStr;\n  } else {\n    return localeStr;\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2009, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, englishFn, intlFn) {\n  const mode = loc.listingMode();\n\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return (\n      loc.numberingSystem === \"latn\" ||\n      !loc.locale ||\n      loc.locale.startsWith(\"en\") ||\n      new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\"\n    );\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n\n    const { padTo, floor, ...otherOpts } = opts;\n\n    if (!forceSimple || Object.keys(otherOpts).length > 0) {\n      const intlOpts = { useGrouping: false, ...opts };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  format(i) {\n    if (this.inf) {\n      const fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser's numberformatter defaults\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(fixed, this.padTo);\n    }\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n    this.originalZone = undefined;\n\n    let z = undefined;\n    if (this.opts.timeZone) {\n      // Don't apply any workarounds if a timeZone is explicitly provided in opts\n      this.dt = dt;\n    } else if (dt.zone.type === \"fixed\") {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.\n      // 2. Unsupported by the browser:\n      //    - some do not support Etc/\n      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata\n      const gmtOffset = -1 * (dt.offset / 60);\n      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;\n      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {\n        z = offsetZ;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so\n        // we manually apply the offset and substitute the zone as needed.\n        z = \"UTC\";\n        this.dt = dt.offset === 0 ? dt : dt.setZone(\"UTC\").plus({ minutes: dt.offset });\n        this.originalZone = dt.zone;\n      }\n    } else if (dt.zone.type === \"system\") {\n      this.dt = dt;\n    } else if (dt.zone.type === \"iana\") {\n      this.dt = dt;\n      z = dt.zone.name;\n    } else {\n      // Custom zones can have any offset / offsetName so we just manually\n      // apply the offset and substitute the zone as needed.\n      z = \"UTC\";\n      this.dt = dt.setZone(\"UTC\").plus({ minutes: dt.offset });\n      this.originalZone = dt.zone;\n    }\n\n    const intlOpts = { ...this.opts };\n    intlOpts.timeZone = intlOpts.timeZone || z;\n    this.dtf = getCachedDTF(intl, intlOpts);\n  }\n\n  format() {\n    if (this.originalZone) {\n      // If we have to substitute in the actual zone name, we have to use\n      // formatToParts so that the timezone can be replaced.\n      return this.formatToParts()\n        .map(({ value }) => value)\n        .join(\"\");\n    }\n    return this.dtf.format(this.dt.toJSDate());\n  }\n\n  formatToParts() {\n    const parts = this.dtf.formatToParts(this.dt.toJSDate());\n    if (this.originalZone) {\n      return parts.map((part) => {\n        if (part.type === \"timeZoneName\") {\n          const offsetName = this.originalZone.offsetName(this.dt.ts, {\n            locale: this.dt.locale,\n            format: this.opts.timeZoneName,\n          });\n          return {\n            ...part,\n            value: offsetName,\n          };\n        } else {\n          return part;\n        }\n      });\n    }\n    return parts;\n  }\n\n  resolvedOptions() {\n    return this.dtf.resolvedOptions();\n  }\n}\n\n/**\n * @private\n */\nclass PolyRelFormatter {\n  constructor(intl, isEnglish, opts) {\n    this.opts = { style: \"long\", ...opts };\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n\n  format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return English.formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n    }\n  }\n\n  formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  }\n}\n\nconst fallbackWeekSettings = {\n  firstDay: 1,\n  minimalDays: 4,\n  weekend: [6, 7],\n};\n\n/**\n * @private\n */\n\nexport default class Locale {\n  static fromOpts(opts) {\n    return Locale.create(\n      opts.locale,\n      opts.numberingSystem,\n      opts.outputCalendar,\n      opts.weekSettings,\n      opts.defaultToEN\n    );\n  }\n\n  static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale;\n    // the system locale is useful for human-readable strings but annoying for parsing/formatting known formats\n    const localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale());\n    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;\n    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar, weekSettings } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar, weekSettings);\n  }\n\n  constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.weekSettings = weekSettings;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = null;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  get fastNumbers() {\n    if (this.fastNumbersCached == null) {\n      this.fastNumbersCached = supportsFastNumbers(this);\n    }\n\n    return this.fastNumbersCached;\n  }\n\n  listingMode() {\n    const isActuallyEn = this.isEnglish();\n    const hasNoWeirdness =\n      (this.numberingSystem === null || this.numberingSystem === \"latn\") &&\n      (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n    return isActuallyEn && hasNoWeirdness ? \"en\" : \"intl\";\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        validateWeekSettings(alts.weekSettings) || this.weekSettings,\n        alts.defaultToEN || false\n      );\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: true });\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: false });\n  }\n\n  months(length, format = false) {\n    return listStuff(this, length, English.months, () => {\n      const intl = format ? { month: length, day: \"numeric\" } : { month: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, \"month\"));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false) {\n    return listStuff(this, length, English.weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: \"numeric\", month: \"long\", day: \"numeric\" }\n          : { weekday: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>\n          this.extract(dt, intl, \"weekday\")\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems() {\n    return listStuff(\n      this,\n      undefined,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: \"numeric\", hourCycle: \"h12\" };\n          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(\n            (dt) => this.extract(dt, intl, \"dayperiod\")\n          );\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length) {\n    return listStuff(this, length, English.eras, () => {\n      const intl = { era: length };\n\n      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>\n          this.extract(dt, intl, \"era\")\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find((m) => m.type.toLowerCase() === field);\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}) {\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  relFormatter(opts = {}) {\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  }\n\n  listFormatter(opts = {}) {\n    return getCachedLF(this.intl, opts);\n  }\n\n  isEnglish() {\n    return (\n      this.locale === \"en\" ||\n      this.locale.toLowerCase() === \"en-us\" ||\n      new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\")\n    );\n  }\n\n  getWeekSettings() {\n    if (this.weekSettings) {\n      return this.weekSettings;\n    } else if (!hasLocaleWeekInfo()) {\n      return fallbackWeekSettings;\n    } else {\n      return getCachedWeekInfo(this.locale);\n    }\n  }\n\n  getStartOfWeek() {\n    return this.getWeekSettings().firstDay;\n  }\n\n  getMinDaysInFirstWeek() {\n    return this.getWeekSettings().minimalDays;\n  }\n\n  getWeekendDays() {\n    return this.getWeekSettings().weekend;\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n\n  toString() {\n    return `Locale(${this.locale}, ${this.numberingSystem}, ${this.outputCalendar})`;\n  }\n}\n","import * as Formats from \"./formats.js\";\nimport { pick } from \"./util.js\";\n\nfunction stringify(obj) {\n  return JSON.stringify(obj, Object.keys(obj).sort());\n}\n\n/**\n * @private\n */\n\nexport const monthsLong = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nexport const monthsShort = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\nexport const monthsNarrow = [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"];\n\nexport function months(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...monthsNarrow];\n    case \"short\":\n      return [...monthsShort];\n    case \"long\":\n      return [...monthsLong];\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"];\n    case \"2-digit\":\n      return [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n    default:\n      return null;\n  }\n}\n\nexport const weekdaysLong = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n];\n\nexport const weekdaysShort = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n\nexport const weekdaysNarrow = [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\n\nexport function weekdays(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...weekdaysNarrow];\n    case \"short\":\n      return [...weekdaysShort];\n    case \"long\":\n      return [...weekdaysLong];\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"];\n    default:\n      return null;\n  }\n}\n\nexport const meridiems = [\"AM\", \"PM\"];\n\nexport const erasLong = [\"Before Christ\", \"Anno Domini\"];\n\nexport const erasShort = [\"BC\", \"AD\"];\n\nexport const erasNarrow = [\"B\", \"A\"];\n\nexport function eras(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...erasNarrow];\n    case \"short\":\n      return [...erasShort];\n    case \"long\":\n      return [...erasLong];\n    default:\n      return null;\n  }\n}\n\nexport function meridiemForDateTime(dt) {\n  return meridiems[dt.hour < 12 ? 0 : 1];\n}\n\nexport function weekdayForDateTime(dt, length) {\n  return weekdays(length)[dt.weekday - 1];\n}\n\nexport function monthForDateTime(dt, length) {\n  return months(length)[dt.month - 1];\n}\n\nexport function eraForDateTime(dt, length) {\n  return eras(length)[dt.year < 0 ? 0 : 1];\n}\n\nexport function formatRelativeTime(unit, count, numeric = \"always\", narrow = false) {\n  const units = {\n    years: [\"year\", \"yr.\"],\n    quarters: [\"quarter\", \"qtr.\"],\n    months: [\"month\", \"mo.\"],\n    weeks: [\"week\", \"wk.\"],\n    days: [\"day\", \"day\", \"days\"],\n    hours: [\"hour\", \"hr.\"],\n    minutes: [\"minute\", \"min.\"],\n    seconds: [\"second\", \"sec.\"],\n  };\n\n  const lastable = [\"hours\", \"minutes\", \"seconds\"].indexOf(unit) === -1;\n\n  if (numeric === \"auto\" && lastable) {\n    const isDay = unit === \"days\";\n    switch (count) {\n      case 1:\n        return isDay ? \"tomorrow\" : `next ${units[unit][0]}`;\n      case -1:\n        return isDay ? \"yesterday\" : `last ${units[unit][0]}`;\n      case 0:\n        return isDay ? \"today\" : `this ${units[unit][0]}`;\n      default: // fall through\n    }\n  }\n\n  const isInPast = Object.is(count, -0) || count < 0,\n    fmtValue = Math.abs(count),\n    singular = fmtValue === 1,\n    lilUnits = units[unit],\n    fmtUnit = narrow\n      ? singular\n        ? lilUnits[1]\n        : lilUnits[2] || lilUnits[1]\n      : singular\n      ? units[unit][0]\n      : unit;\n  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;\n}\n\nexport function formatString(knownFormat) {\n  // these all have the offsets removed because we don't have access to them\n  // without all the intl stuff this is backfilling\n  const filtered = pick(knownFormat, [\n      \"weekday\",\n      \"era\",\n      \"year\",\n      \"month\",\n      \"day\",\n      \"hour\",\n      \"minute\",\n      \"second\",\n      \"timeZoneName\",\n      \"hourCycle\",\n    ]),\n    key = stringify(filtered),\n    dateTimeHuge = \"EEEE, LLLL d, yyyy, h:mm a\";\n  switch (key) {\n    case stringify(Formats.DATE_SHORT):\n      return \"M/d/yyyy\";\n    case stringify(Formats.DATE_MED):\n      return \"LLL d, yyyy\";\n    case stringify(Formats.DATE_MED_WITH_WEEKDAY):\n      return \"EEE, LLL d, yyyy\";\n    case stringify(Formats.DATE_FULL):\n      return \"LLLL d, yyyy\";\n    case stringify(Formats.DATE_HUGE):\n      return \"EEEE, LLLL d, yyyy\";\n    case stringify(Formats.TIME_SIMPLE):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_SECONDS):\n      return \"h:mm:ss a\";\n    case stringify(Formats.TIME_WITH_SHORT_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_LONG_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_24_SIMPLE):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_SECONDS):\n      return \"HH:mm:ss\";\n    case stringify(Formats.TIME_24_WITH_SHORT_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_LONG_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.DATETIME_SHORT):\n      return \"M/d/yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_MED):\n      return \"LLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_FULL):\n      return \"LLLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_HUGE):\n      return dateTimeHuge;\n    case stringify(Formats.DATETIME_SHORT_WITH_SECONDS):\n      return \"M/d/yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_MED_WITH_SECONDS):\n      return \"LLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_MED_WITH_WEEKDAY):\n      return \"EEE, d LLL yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_FULL_WITH_SECONDS):\n      return \"LLLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_HUGE_WITH_SECONDS):\n      return \"EEEE, LLLL d, yyyy, h:mm:ss a\";\n    default:\n      return dateTimeHuge;\n  }\n}\n","import { formatOffset, signedOffset } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\nexport default class FixedOffsetZone extends Zone {\n  /**\n   * Get a singleton instance of UTC\n   * @return {FixedOffsetZone}\n   */\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  /**\n   * Get an instance with a specified offset\n   * @param {number} offset - The offset in minutes\n   * @return {FixedOffsetZone}\n   */\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  /**\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\n   * @param {string} s - The offset string to parse\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\n   * @return {FixedOffsetZone}\n   */\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    /** @private **/\n    this.fixed = offset;\n  }\n\n  /**\n   * The type of zone. `fixed` for all instances of `FixedOffsetZone`.\n   * @override\n   * @type {string}\n   */\n  get type() {\n    return \"fixed\";\n  }\n\n  /**\n   * The name of this zone.\n   * All fixed zones' names always start with \"UTC\" (plus optional offset)\n   * @override\n   * @type {string}\n   */\n  get name() {\n    return this.fixed === 0 ? \"UTC\" : `UTC${formatOffset(this.fixed, \"narrow\")}`;\n  }\n\n  /**\n   * The IANA name of this zone, i.e. `Etc/UTC` or `Etc/GMT+/-nn`\n   *\n   * @override\n   * @type {string}\n   */\n  get ianaName() {\n    if (this.fixed === 0) {\n      return \"Etc/UTC\";\n    } else {\n      return `Etc/GMT${formatOffset(-this.fixed, \"narrow\")}`;\n    }\n  }\n\n  /**\n   * Returns the offset's common name at the specified timestamp.\n   *\n   * For fixed offset zones this equals to the zone name.\n   * @override\n   */\n  offsetName() {\n    return this.name;\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    return formatOffset(this.fixed, format);\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year:\n   * Always returns true for all fixed offset zones.\n   * @override\n   * @type {boolean}\n   */\n  get isUniversal() {\n    return true;\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   *\n   * For fixed offset zones, this is constant and does not depend on a timestamp.\n   * @override\n   * @return {number}\n   */\n  offset() {\n    return this.fixed;\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone (i.e. also fixed and same offset)\n   * @override\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n  }\n\n  /**\n   * Return whether this Zone is valid:\n   * All fixed offset zones are valid.\n   * @override\n   * @type {boolean}\n   */\n  get isValid() {\n    return true;\n  }\n}\n","import Zone from \"../zone.js\";\n\n/**\n * A zone that failed to parse. You should never need to instantiate this.\n * @implements {Zone}\n */\nexport default class InvalidZone extends Zone {\n  constructor(zoneName) {\n    super();\n    /**  @private */\n    this.zoneName = zoneName;\n  }\n\n  /** @override **/\n  get type() {\n    return \"invalid\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.zoneName;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName() {\n    return null;\n  }\n\n  /** @override **/\n  formatOffset() {\n    return \"\";\n  }\n\n  /** @override **/\n  offset() {\n    return NaN;\n  }\n\n  /** @override **/\n  equals() {\n    return false;\n  }\n\n  /** @override **/\n  get isValid() {\n    return false;\n  }\n}\n","/**\n * @private\n */\n\nimport Zone from \"../zone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport InvalidZone from \"../zones/invalidZone.js\";\n\nimport { isUndefined, isString, isNumber } from \"./util.js\";\nimport SystemZone from \"../zones/systemZone.js\";\n\nexport function normalizeZone(input, defaultZone) {\n  let offset;\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  } else if (input instanceof Zone) {\n    return input;\n  } else if (isString(input)) {\n    const lowered = input.toLowerCase();\n    if (lowered === \"default\") return defaultZone;\n    else if (lowered === \"local\" || lowered === \"system\") return SystemZone.instance;\n    else if (lowered === \"utc\" || lowered === \"gmt\") return FixedOffsetZone.utcInstance;\n    else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);\n  } else if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  } else if (typeof input === \"object\" && \"offset\" in input && typeof input.offset === \"function\") {\n    // This is dumb, but the instanceof check above doesn't seem to really work\n    // so we're duck checking it\n    return input;\n  } else {\n    return new InvalidZone(input);\n  }\n}\n","/*\n  This is just a junk drawer, containing anything used across multiple classes.\n  Because Luxon is small(ish), this should stay small and we won't worry about splitting\n  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.\n*/\n\nimport { InvalidArgumentError } from \"../errors.js\";\nimport Settings from \"../settings.js\";\nimport { dayOfWeek, isoWeekdayToLocal } from \"./conversions.js\";\n\n/**\n * @private\n */\n\n// TYPES\n\nexport function isUndefined(o) {\n  return typeof o === \"undefined\";\n}\n\nexport function isNumber(o) {\n  return typeof o === \"number\";\n}\n\nexport function isInteger(o) {\n  return typeof o === \"number\" && o % 1 === 0;\n}\n\nexport function isString(o) {\n  return typeof o === \"string\";\n}\n\nexport function isDate(o) {\n  return Object.prototype.toString.call(o) === \"[object Date]\";\n}\n\n// CAPABILITIES\n\nexport function hasRelative() {\n  try {\n    return typeof Intl !== \"undefined\" && !!Intl.RelativeTimeFormat;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function hasLocaleWeekInfo() {\n  try {\n    return (\n      typeof Intl !== \"undefined\" &&\n      !!Intl.Locale &&\n      (\"weekInfo\" in Intl.Locale.prototype || \"getWeekInfo\" in Intl.Locale.prototype)\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n// OBJECTS AND ARRAYS\n\nexport function maybeArray(thing) {\n  return Array.isArray(thing) ? thing : [thing];\n}\n\nexport function bestBy(arr, by, compare) {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  return arr.reduce((best, next) => {\n    const pair = [by(next), next];\n    if (!best) {\n      return pair;\n    } else if (compare(best[0], pair[0]) === best[0]) {\n      return best;\n    } else {\n      return pair;\n    }\n  }, null)[1];\n}\n\nexport function pick(obj, keys) {\n  return keys.reduce((a, k) => {\n    a[k] = obj[k];\n    return a;\n  }, {});\n}\n\nexport function hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexport function validateWeekSettings(settings) {\n  if (settings == null) {\n    return null;\n  } else if (typeof settings !== \"object\") {\n    throw new InvalidArgumentError(\"Week settings must be an object\");\n  } else {\n    if (\n      !integerBetween(settings.firstDay, 1, 7) ||\n      !integerBetween(settings.minimalDays, 1, 7) ||\n      !Array.isArray(settings.weekend) ||\n      settings.weekend.some((v) => !integerBetween(v, 1, 7))\n    ) {\n      throw new InvalidArgumentError(\"Invalid week settings\");\n    }\n    return {\n      firstDay: settings.firstDay,\n      minimalDays: settings.minimalDays,\n      weekend: Array.from(settings.weekend),\n    };\n  }\n}\n\n// NUMBERS AND STRINGS\n\nexport function integerBetween(thing, bottom, top) {\n  return isInteger(thing) && thing >= bottom && thing <= top;\n}\n\n// x % n but takes the sign of n instead of x\nexport function floorMod(x, n) {\n  return x - n * Math.floor(x / n);\n}\n\nexport function padStart(input, n = 2) {\n  const isNeg = input < 0;\n  let padded;\n  if (isNeg) {\n    padded = \"-\" + (\"\" + -input).padStart(n, \"0\");\n  } else {\n    padded = (\"\" + input).padStart(n, \"0\");\n  }\n  return padded;\n}\n\nexport function parseInteger(string) {\n  if (isUndefined(string) || string === null || string === \"\") {\n    return undefined;\n  } else {\n    return parseInt(string, 10);\n  }\n}\n\nexport function parseFloating(string) {\n  if (isUndefined(string) || string === null || string === \"\") {\n    return undefined;\n  } else {\n    return parseFloat(string);\n  }\n}\n\nexport function parseMillis(fraction) {\n  // Return undefined (instead of 0) in these cases, where fraction is not set\n  if (isUndefined(fraction) || fraction === null || fraction === \"\") {\n    return undefined;\n  } else {\n    const f = parseFloat(\"0.\" + fraction) * 1000;\n    return Math.floor(f);\n  }\n}\n\nexport function roundTo(number, digits, towardZero = false) {\n  const factor = 10 ** digits,\n    rounder = towardZero ? Math.trunc : Math.round;\n  return rounder(number * factor) / factor;\n}\n\n// DATE BASICS\n\nexport function isLeapYear(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function daysInYear(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\n\nexport function daysInMonth(year, month) {\n  const modMonth = floorMod(month - 1, 12) + 1,\n    modYear = year + (month - modMonth) / 12;\n\n  if (modMonth === 2) {\n    return isLeapYear(modYear) ? 29 : 28;\n  } else {\n    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];\n  }\n}\n\n// convert a calendar object to a local timestamp (epoch, but with the offset baked in)\nexport function objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    // set the month and day again, this is necessary because year 2000 is a leap year, but year 100 is not\n    // so if obj.year is in 99, but obj.day makes it roll over into year 100,\n    // the calculations done by Date.UTC are using year 2000 - which is incorrect\n    d.setUTCFullYear(obj.year, obj.month - 1, obj.day);\n  }\n  return +d;\n}\n\n// adapted from moment.js: https://github.com/moment/moment/blob/000ac1800e620f770f4eb31b5ae908f6167b0ab2/src/lib/units/week-calendar-utils.js\nfunction firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {\n  const fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);\n  return -fwdlw + minDaysInFirstWeek - 1;\n}\n\nexport function weeksInWeekYear(weekYear, minDaysInFirstWeek = 4, startOfWeek = 1) {\n  const weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);\n  const weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);\n  return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;\n}\n\nexport function untruncateYear(year) {\n  if (year > 99) {\n    return year;\n  } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;\n}\n\n// PARSING\n\nexport function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\n  const date = new Date(ts),\n    intlOpts = {\n      hourCycle: \"h23\",\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    };\n\n  if (timeZone) {\n    intlOpts.timeZone = timeZone;\n  }\n\n  const modified = { timeZoneName: offsetFormat, ...intlOpts };\n\n  const parsed = new Intl.DateTimeFormat(locale, modified)\n    .formatToParts(date)\n    .find((m) => m.type.toLowerCase() === \"timezonename\");\n  return parsed ? parsed.value : null;\n}\n\n// signedOffset('-5', '30') -> -330\nexport function signedOffset(offHourStr, offMinuteStr) {\n  let offHour = parseInt(offHourStr, 10);\n\n  // don't || this because we want to preserve -0\n  if (Number.isNaN(offHour)) {\n    offHour = 0;\n  }\n\n  const offMin = parseInt(offMinuteStr, 10) || 0,\n    offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;\n  return offHour * 60 + offMinSigned;\n}\n\n// COERCION\n\nexport function asNumber(value) {\n  const numericValue = Number(value);\n  if (typeof value === \"boolean\" || value === \"\" || Number.isNaN(numericValue))\n    throw new InvalidArgumentError(`Invalid unit value ${value}`);\n  return numericValue;\n}\n\nexport function normalizeObject(obj, normalizer) {\n  const normalized = {};\n  for (const u in obj) {\n    if (hasOwnProperty(obj, u)) {\n      const v = obj[u];\n      if (v === undefined || v === null) continue;\n      normalized[normalizer(u)] = asNumber(v);\n    }\n  }\n  return normalized;\n}\n\n/**\n * Returns the offset's value as a string\n * @param {number} ts - Epoch milliseconds for which to get the offset\n * @param {string} format - What style of offset to return.\n *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n * @return {string}\n */\nexport function formatOffset(offset, format) {\n  const hours = Math.trunc(Math.abs(offset / 60)),\n    minutes = Math.trunc(Math.abs(offset % 60)),\n    sign = offset >= 0 ? \"+\" : \"-\";\n\n  switch (format) {\n    case \"short\":\n      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;\n    case \"narrow\":\n      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : \"\"}`;\n    case \"techie\":\n      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;\n    default:\n      throw new RangeError(`Value format ${format} is out of range for property format`);\n  }\n}\n\nexport function timeObject(obj) {\n  return pick(obj, [\"hour\", \"minute\", \"second\", \"millisecond\"]);\n}\n","const numberingSystems = {\n  arab: \"[\\u0660-\\u0669]\",\n  arabext: \"[\\u06F0-\\u06F9]\",\n  bali: \"[\\u1B50-\\u1B59]\",\n  beng: \"[\\u09E6-\\u09EF]\",\n  deva: \"[\\u0966-\\u096F]\",\n  fullwide: \"[\\uFF10-\\uFF19]\",\n  gujr: \"[\\u0AE6-\\u0AEF]\",\n  hanidec: \"[〇|一|二|三|四|五|六|七|八|九]\",\n  khmr: \"[\\u17E0-\\u17E9]\",\n  knda: \"[\\u0CE6-\\u0CEF]\",\n  laoo: \"[\\u0ED0-\\u0ED9]\",\n  limb: \"[\\u1946-\\u194F]\",\n  mlym: \"[\\u0D66-\\u0D6F]\",\n  mong: \"[\\u1810-\\u1819]\",\n  mymr: \"[\\u1040-\\u1049]\",\n  orya: \"[\\u0B66-\\u0B6F]\",\n  tamldec: \"[\\u0BE6-\\u0BEF]\",\n  telu: \"[\\u0C66-\\u0C6F]\",\n  thai: \"[\\u0E50-\\u0E59]\",\n  tibt: \"[\\u0F20-\\u0F29]\",\n  latn: \"\\\\d\",\n};\n\nconst numberingSystemsUTF16 = {\n  arab: [1632, 1641],\n  arabext: [1776, 1785],\n  bali: [6992, 7001],\n  beng: [2534, 2543],\n  deva: [2406, 2415],\n  fullwide: [65296, 65303],\n  gujr: [2790, 2799],\n  khmr: [6112, 6121],\n  knda: [3302, 3311],\n  laoo: [3792, 3801],\n  limb: [6470, 6479],\n  mlym: [3430, 3439],\n  mong: [6160, 6169],\n  mymr: [4160, 4169],\n  orya: [2918, 2927],\n  tamldec: [3046, 3055],\n  telu: [3174, 3183],\n  thai: [3664, 3673],\n  tibt: [3872, 3881],\n};\n\nconst hanidecChars = numberingSystems.hanidec.replace(/[\\[|\\]]/g, \"\").split(\"\");\n\nexport function parseDigits(str) {\n  let value = parseInt(str, 10);\n  if (isNaN(value)) {\n    value = \"\";\n    for (let i = 0; i < str.length; i++) {\n      const code = str.charCodeAt(i);\n\n      if (str[i].search(numberingSystems.hanidec) !== -1) {\n        value += hanidecChars.indexOf(str[i]);\n      } else {\n        for (const key in numberingSystemsUTF16) {\n          const [min, max] = numberingSystemsUTF16[key];\n          if (code >= min && code <= max) {\n            value += code - min;\n          }\n        }\n      }\n    }\n    return parseInt(value, 10);\n  } else {\n    return value;\n  }\n}\n\n// cache of {numberingSystem: {append: regex}}\nlet digitRegexCache = {};\nexport function resetDigitRegexCache() {\n  digitRegexCache = {};\n}\n\nexport function digitRegex({ numberingSystem }, append = \"\") {\n  const ns = numberingSystem || \"latn\";\n\n  if (!digitRegexCache[ns]) {\n    digitRegexCache[ns] = {};\n  }\n  if (!digitRegexCache[ns][append]) {\n    digitRegexCache[ns][append] = new RegExp(`${numberingSystems[ns]}${append}`);\n  }\n\n  return digitRegexCache[ns][append];\n}\n","import SystemZone from \"./zones/systemZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport DateTime from \"./datetime.js\";\n\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\nimport { validateWeekSettings } from \"./impl/util.js\";\nimport { resetDigitRegexCache } from \"./impl/digits.js\";\n\nlet now = () => Date.now(),\n  defaultZone = \"system\",\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  twoDigitCutoffYear = 60,\n  throwOnInvalid,\n  defaultWeekSettings = null;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport default class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * Use the value \"system\" to reset this value to the system's time zone.\n   * @type {string}\n   */\n  static set defaultZone(zone) {\n    defaultZone = zone;\n  }\n\n  /**\n   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\n   * The default value is the system's time zone (the one set on the machine that runs this code).\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return normalizeZone(defaultZone, SystemZone.instance);\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * @typedef {Object} WeekSettings\n   * @property {number} firstDay\n   * @property {number} minimalDays\n   * @property {number[]} weekend\n   */\n\n  /**\n   * @return {WeekSettings|null}\n   */\n  static get defaultWeekSettings() {\n    return defaultWeekSettings;\n  }\n\n  /**\n   * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and\n   * how many days are required in the first week of a year.\n   * Does not affect existing instances.\n   *\n   * @param {WeekSettings|null} weekSettings\n   */\n  static set defaultWeekSettings(weekSettings) {\n    defaultWeekSettings = validateWeekSettings(weekSettings);\n  }\n\n  /**\n   * Get the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.\n   * @type {number}\n   */\n  static get twoDigitCutoffYear() {\n    return twoDigitCutoffYear;\n  }\n\n  /**\n   * Set the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.\n   * @type {number}\n   * @example Settings.twoDigitCutoffYear = 0 // all 'yy' are interpreted as 20th century\n   * @example Settings.twoDigitCutoffYear = 99 // all 'yy' are interpreted as 21st century\n   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 2049; '50' -> 1950\n   * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50\n   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50\n   */\n  static set twoDigitCutoffYear(cutoffYear) {\n    twoDigitCutoffYear = cutoffYear % 100;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n    DateTime.resetCache();\n    resetDigitRegexCache();\n  }\n}\n","export default class Invalid {\n  constructor(reason, explanation) {\n    this.reason = reason;\n    this.explanation = explanation;\n  }\n\n  toMessage() {\n    if (this.explanation) {\n      return `${this.reason}: ${this.explanation}`;\n    } else {\n      return this.reason;\n    }\n  }\n}\n","import {\n  integerBetween,\n  isLeapYear,\n  timeObject,\n  daysInYear,\n  daysInMonth,\n  weeksInWeekYear,\n  isInteger,\n  isUndefined,\n} from \"./util.js\";\nimport Invalid from \"./invalid.js\";\nimport { ConflictingSpecificationError } from \"../errors.js\";\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction unitOutOfRange(unit, value) {\n  return new Invalid(\n    \"unit out of range\",\n    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`\n  );\n}\n\nexport function dayOfWeek(year, month, day) {\n  const d = new Date(Date.UTC(year, month - 1, day));\n\n  if (year < 100 && year >= 0) {\n    d.setUTCFullYear(d.getUTCFullYear() - 1900);\n  }\n\n  const js = d.getUTCDay();\n\n  return js === 0 ? 7 : js;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex((i) => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\nexport function isoWeekdayToLocal(isoWeekday, startOfWeek) {\n  return ((isoWeekday - startOfWeek + 7) % 7) + 1;\n}\n\n/**\n * @private\n */\n\nexport function gregorianToWeek(gregObj, minDaysInFirstWeek = 4, startOfWeek = 1) {\n  const { year, month, day } = gregObj,\n    ordinal = computeOrdinal(year, month, day),\n    weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);\n\n  let weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7),\n    weekYear;\n\n  if (weekNumber < 1) {\n    weekYear = year - 1;\n    weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);\n  } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {\n    weekYear = year + 1;\n    weekNumber = 1;\n  } else {\n    weekYear = year;\n  }\n\n  return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };\n}\n\nexport function weekToGregorian(weekData, minDaysInFirstWeek = 4, startOfWeek = 1) {\n  const { weekYear, weekNumber, weekday } = weekData,\n    weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek),\n    yearInDays = daysInYear(weekYear);\n\n  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek,\n    year;\n\n  if (ordinal < 1) {\n    year = weekYear - 1;\n    ordinal += daysInYear(year);\n  } else if (ordinal > yearInDays) {\n    year = weekYear + 1;\n    ordinal -= daysInYear(weekYear);\n  } else {\n    year = weekYear;\n  }\n\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n  return { year, month, day, ...timeObject(weekData) };\n}\n\nexport function gregorianToOrdinal(gregData) {\n  const { year, month, day } = gregData;\n  const ordinal = computeOrdinal(year, month, day);\n  return { year, ordinal, ...timeObject(gregData) };\n}\n\nexport function ordinalToGregorian(ordinalData) {\n  const { year, ordinal } = ordinalData;\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n  return { year, month, day, ...timeObject(ordinalData) };\n}\n\n/**\n * Check if local week units like localWeekday are used in obj.\n * If so, validates that they are not mixed with ISO week units and then copies them to the normal week unit properties.\n * Modifies obj in-place!\n * @param obj the object values\n */\nexport function usesLocalWeekValues(obj, loc) {\n  const hasLocaleWeekData =\n    !isUndefined(obj.localWeekday) ||\n    !isUndefined(obj.localWeekNumber) ||\n    !isUndefined(obj.localWeekYear);\n  if (hasLocaleWeekData) {\n    const hasIsoWeekData =\n      !isUndefined(obj.weekday) || !isUndefined(obj.weekNumber) || !isUndefined(obj.weekYear);\n\n    if (hasIsoWeekData) {\n      throw new ConflictingSpecificationError(\n        \"Cannot mix locale-based week fields with ISO-based week fields\"\n      );\n    }\n    if (!isUndefined(obj.localWeekday)) obj.weekday = obj.localWeekday;\n    if (!isUndefined(obj.localWeekNumber)) obj.weekNumber = obj.localWeekNumber;\n    if (!isUndefined(obj.localWeekYear)) obj.weekYear = obj.localWeekYear;\n    delete obj.localWeekday;\n    delete obj.localWeekNumber;\n    delete obj.localWeekYear;\n    return {\n      minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),\n      startOfWeek: loc.getStartOfWeek(),\n    };\n  } else {\n    return { minDaysInFirstWeek: 4, startOfWeek: 1 };\n  }\n}\n\nexport function hasInvalidWeekData(obj, minDaysInFirstWeek = 4, startOfWeek = 1) {\n  const validYear = isInteger(obj.weekYear),\n    validWeek = integerBetween(\n      obj.weekNumber,\n      1,\n      weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)\n    ),\n    validWeekday = integerBetween(obj.weekday, 1, 7);\n\n  if (!validYear) {\n    return unitOutOfRange(\"weekYear\", obj.weekYear);\n  } else if (!validWeek) {\n    return unitOutOfRange(\"week\", obj.weekNumber);\n  } else if (!validWeekday) {\n    return unitOutOfRange(\"weekday\", obj.weekday);\n  } else return false;\n}\n\nexport function hasInvalidOrdinalData(obj) {\n  const validYear = isInteger(obj.year),\n    validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validOrdinal) {\n    return unitOutOfRange(\"ordinal\", obj.ordinal);\n  } else return false;\n}\n\nexport function hasInvalidGregorianData(obj) {\n  const validYear = isInteger(obj.year),\n    validMonth = integerBetween(obj.month, 1, 12),\n    validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validMonth) {\n    return unitOutOfRange(\"month\", obj.month);\n  } else if (!validDay) {\n    return unitOutOfRange(\"day\", obj.day);\n  } else return false;\n}\n\nexport function hasInvalidTimeData(obj) {\n  const { hour, minute, second, millisecond } = obj;\n  const validHour =\n      integerBetween(hour, 0, 23) ||\n      (hour === 24 && minute === 0 && second === 0 && millisecond === 0),\n    validMinute = integerBetween(minute, 0, 59),\n    validSecond = integerBetween(second, 0, 59),\n    validMillisecond = integerBetween(millisecond, 0, 999);\n\n  if (!validHour) {\n    return unitOutOfRange(\"hour\", hour);\n  } else if (!validMinute) {\n    return unitOutOfRange(\"minute\", minute);\n  } else if (!validSecond) {\n    return unitOutOfRange(\"second\", second);\n  } else if (!validMillisecond) {\n    return unitOutOfRange(\"millisecond\", millisecond);\n  } else return false;\n}\n","import * as English from \"./english.js\";\nimport * as Formats from \"./formats.js\";\nimport { padStart } from \"./util.js\";\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = \"\";\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\nconst macroTokenToFormatOpts = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS,\n};\n\n/**\n * @private\n */\n\nexport default class Formatter {\n  static create(locale, opts = {}) {\n    return new Formatter(locale, opts);\n  }\n\n  static parseFormat(fmt) {\n    // white-space is always considered a literal in user-provided formats\n    // the \" \" token has a special meaning (see unitForToken)\n\n    let current = null,\n      currentFull = \"\",\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed || /^\\s+$/.test(currentFull), val: currentFull });\n        }\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: /^\\s+$/.test(currentFull), val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed || /^\\s+$/.test(currentFull), val: currentFull });\n    }\n\n    return splits;\n  }\n\n  static macroTokenToFormatOpts(token) {\n    return macroTokenToFormatOpts[token];\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  dtFormatter(dt, opts = {}) {\n    return this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n  }\n\n  formatDateTime(dt, opts) {\n    return this.dtFormatter(dt, opts).format();\n  }\n\n  formatDateTimeParts(dt, opts) {\n    return this.dtFormatter(dt, opts).formatToParts();\n  }\n\n  formatInterval(interval, opts) {\n    const df = this.dtFormatter(interval.start, opts);\n    return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());\n  }\n\n  resolvedOptions(dt, opts) {\n    return this.dtFormatter(dt, opts).resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n\n    const opts = { ...this.opts };\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === \"en\",\n      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\",\n      string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = (opts) => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return \"Z\";\n        }\n\n        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n      },\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: \"numeric\", hourCycle: \"h12\" }, \"dayperiod\"),\n      month = (length, standalone) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: \"numeric\" }, \"month\"),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: \"long\", day: \"numeric\" },\n              \"weekday\"\n            ),\n      maybeMacro = (token) => {\n        const formatOpts = Formatter.macroTokenToFormatOpts(token);\n        if (formatOpts) {\n          return this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n      era = (length) =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, \"era\"),\n      tokenToString = (token) => {\n        // Where possible: https://cldr.unicode.org/translation/date-time/date-time-symbols\n        switch (token) {\n          // ms\n          case \"S\":\n            return this.num(dt.millisecond);\n          case \"u\":\n          // falls through\n          case \"SSS\":\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case \"s\":\n            return this.num(dt.second);\n          case \"ss\":\n            return this.num(dt.second, 2);\n          // fractional seconds\n          case \"uu\":\n            return this.num(Math.floor(dt.millisecond / 10), 2);\n          case \"uuu\":\n            return this.num(Math.floor(dt.millisecond / 100));\n          // minutes\n          case \"m\":\n            return this.num(dt.minute);\n          case \"mm\":\n            return this.num(dt.minute, 2);\n          // hours\n          case \"h\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case \"hh\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case \"H\":\n            return this.num(dt.hour);\n          case \"HH\":\n            return this.num(dt.hour, 2);\n          // offset\n          case \"Z\":\n            // like +6\n            return formatOffset({ format: \"narrow\", allowZ: this.opts.allowZ });\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({ format: \"short\", allowZ: this.opts.allowZ });\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({ format: \"techie\", allowZ: this.opts.allowZ });\n          case \"ZZZZ\":\n            // like EST\n            return dt.zone.offsetName(dt.ts, { format: \"short\", locale: this.loc.locale });\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return dt.zone.offsetName(dt.ts, { format: \"long\", locale: this.loc.locale });\n          // zone\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case \"a\":\n            return meridiem();\n          // dates\n          case \"d\":\n            return useDateTimeFormatter ? string({ day: \"numeric\" }, \"day\") : this.num(dt.day);\n          case \"dd\":\n            return useDateTimeFormatter ? string({ day: \"2-digit\" }, \"day\") : this.num(dt.day, 2);\n          // weekdays - standalone\n          case \"c\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n          case \"E\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n          case \"L\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n          case \"M\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"MM\":\n            // like 01\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n          case \"y\":\n            // like 2014\n            return useDateTimeFormatter ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year);\n          case \"yy\":\n            // like 14\n            return useDateTimeFormatter\n              ? string({ year: \"2-digit\" }, \"year\")\n              : this.num(dt.year.toString().slice(-2), 2);\n          case \"yyyy\":\n            // like 0012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 4);\n          case \"yyyyyy\":\n            // like 000012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 6);\n          // eras\n          case \"G\":\n            // like AD\n            return era(\"short\");\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n          case \"GGGGG\":\n            return era(\"narrow\");\n          case \"kk\":\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case \"kkkk\":\n            return this.num(dt.weekYear, 4);\n          case \"W\":\n            return this.num(dt.weekNumber);\n          case \"WW\":\n            return this.num(dt.weekNumber, 2);\n          case \"n\":\n            return this.num(dt.localWeekNumber);\n          case \"nn\":\n            return this.num(dt.localWeekNumber, 2);\n          case \"ii\":\n            return this.num(dt.localWeekYear.toString().slice(-2), 2);\n          case \"iiii\":\n            return this.num(dt.localWeekYear, 4);\n          case \"o\":\n            return this.num(dt.ordinal);\n          case \"ooo\":\n            return this.num(dt.ordinal, 3);\n          case \"q\":\n            // like 1\n            return this.num(dt.quarter);\n          case \"qq\":\n            // like 01\n            return this.num(dt.quarter, 2);\n          case \"X\":\n            return this.num(Math.floor(dt.ts / 1000));\n          case \"x\":\n            return this.num(dt.ts);\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = (token) => {\n        switch (token[0]) {\n          case \"S\":\n            return \"millisecond\";\n          case \"s\":\n            return \"second\";\n          case \"m\":\n            return \"minute\";\n          case \"h\":\n            return \"hour\";\n          case \"d\":\n            return \"day\";\n          case \"w\":\n            return \"week\";\n          case \"M\":\n            return \"month\";\n          case \"y\":\n            return \"year\";\n          default:\n            return null;\n        }\n      },\n      tokenToString = (lildur) => (token) => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n","import {\n  untruncateYear,\n  signedOffset,\n  parseInteger,\n  parseMillis,\n  isUndefined,\n  parseFloating,\n} from \"./util.js\";\nimport * as English from \"./english.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n/*\n * This file handles parsing for well-specified formats. Here's how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n */\n\nconst ianaRegex = /[A-Za-z_+-]{1,256}(?::?\\/[A-Za-z0-9_+-]{1,256}(?:\\/[A-Za-z0-9_+-]{1,256})?)?/;\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, \"\");\n  return RegExp(`^${full}$`);\n}\n\nfunction combineExtractors(...extractors) {\n  return (m) =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [{ ...mergedVals, ...val }, zone || mergedZone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInteger(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO and SQL parsing\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/;\nconst isoExtendedZone = `(?:${offsetRegex.source}?(?:\\\\[(${ianaRegex.source})\\\\])?)?`;\nconst isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,30}))?)?)?/;\nconst isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);\nconst isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);\nconst isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/;\nconst isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/;\nconst isoOrdinalRegex = /(\\d{4})-?(\\d{3})/;\nconst extractISOWeekData = simpleParse(\"weekYear\", \"weekNumber\", \"weekDay\");\nconst extractISOOrdinalData = simpleParse(\"year\", \"ordinal\");\nconst sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/; // dumbed-down version of the ISO one\nconst sqlTimeRegex = RegExp(\n  `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`\n);\nconst sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\n\nfunction int(match, pos, fallback) {\n  const m = match[pos];\n  return isUndefined(m) ? fallback : parseInteger(m);\n}\n\nfunction extractISOYmd(match, cursor) {\n  const item = {\n    year: int(match, cursor),\n    month: int(match, cursor + 1, 1),\n    day: int(match, cursor + 2, 1),\n  };\n\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match, cursor) {\n  const item = {\n    hours: int(match, cursor, 0),\n    minutes: int(match, cursor + 1, 0),\n    seconds: int(match, cursor + 2, 0),\n    milliseconds: parseMillis(match[cursor + 3]),\n  };\n\n  return [item, null, cursor + 4];\n}\n\nfunction extractISOOffset(match, cursor) {\n  const local = !match[cursor] && !match[cursor + 1],\n    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),\n    zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\n\nfunction extractIANAZone(match, cursor) {\n  const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n}\n\n// ISO time parsing\n\nconst isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);\n\n// ISO duration parsing\n\nconst isoDuration =\n  /^-?P(?:(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)Y)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)M)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)W)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)D)?(?:T(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)H)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)M)?(?:(-?\\d{1,20})(?:[.,](-?\\d{1,20}))?S)?)?)$/;\n\nfunction extractISODuration(match) {\n  const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] =\n    match;\n\n  const hasNegativePrefix = s[0] === \"-\";\n  const negativeSeconds = secondStr && secondStr[0] === \"-\";\n\n  const maybeNegate = (num, force = false) =>\n    num !== undefined && (force || (num && hasNegativePrefix)) ? -num : num;\n\n  return [\n    {\n      years: maybeNegate(parseFloating(yearStr)),\n      months: maybeNegate(parseFloating(monthStr)),\n      weeks: maybeNegate(parseFloating(weekStr)),\n      days: maybeNegate(parseFloating(dayStr)),\n      hours: maybeNegate(parseFloating(hourStr)),\n      minutes: maybeNegate(parseFloating(minuteStr)),\n      seconds: maybeNegate(parseFloating(secondStr), secondStr === \"-0\"),\n      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds),\n    },\n  ];\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60,\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),\n    month: English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInteger(dayStr),\n    hour: parseInteger(hourStr),\n    minute: parseInteger(minuteStr),\n  };\n\n  if (secondStr) result.second = parseInteger(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 =\n  /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr,\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^()]*\\)|[\\n\\t]/g, \" \")\n    .replace(/(\\s\\s+)/g, \" \")\n    .trim();\n}\n\n// http date\n\nconst rfc1123 =\n    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 =\n    /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii =\n    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nconst isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);\nconst isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);\nconst isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);\nconst isoTimeCombinedRegex = combineRegexes(isoTimeRegex);\n\nconst extractISOYmdTimeAndOffset = combineExtractors(\n  extractISOYmd,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOWeekTimeAndOffset = combineExtractors(\n  extractISOWeekData,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOOrdinalDateAndTime = combineExtractors(\n  extractISOOrdinalData,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOTimeAndOffset = combineExtractors(\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\n\n/*\n * @private\n */\n\nexport function parseISODate(s) {\n  return parse(\n    s,\n    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],\n    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],\n    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],\n    [isoTimeCombinedRegex, extractISOTimeAndOffset]\n  );\n}\n\nexport function parseRFC2822Date(s) {\n  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n}\n\nexport function parseHTTPDate(s) {\n  return parse(\n    s,\n    [rfc1123, extractRFC1123Or850],\n    [rfc850, extractRFC1123Or850],\n    [ascii, extractASCII]\n  );\n}\n\nexport function parseISODuration(s) {\n  return parse(s, [isoDuration, extractISODuration]);\n}\n\nconst extractISOTimeOnly = combineExtractors(extractISOTime);\n\nexport function parseISOTimeOnly(s) {\n  return parse(s, [isoTimeOnly, extractISOTimeOnly]);\n}\n\nconst sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);\nconst sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);\n\nconst extractISOTimeOffsetAndIANAZone = combineExtractors(\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\n\nexport function parseSQL(s) {\n  return parse(\n    s,\n    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],\n    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]\n  );\n}\n","import { InvalidArgumentError, InvalidDurationError, InvalidUnitError } from \"./errors.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Locale from \"./impl/locale.js\";\nimport { parseISODuration, parseISOTimeOnly } from \"./impl/regexParser.js\";\nimport {\n  asNumber,\n  hasOwnProperty,\n  isNumber,\n  isUndefined,\n  normalizeObject,\n  roundTo,\n} from \"./impl/util.js\";\nimport Settings from \"./settings.js\";\nimport DateTime from \"./datetime.js\";\n\nconst INVALID = \"Invalid Duration\";\n\n// unit conversion constants\nexport const lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000,\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000,\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 },\n  },\n  casualMatrix = {\n    years: {\n      quarters: 4,\n      months: 12,\n      weeks: 52,\n      days: 365,\n      hours: 365 * 24,\n      minutes: 365 * 24 * 60,\n      seconds: 365 * 24 * 60 * 60,\n      milliseconds: 365 * 24 * 60 * 60 * 1000,\n    },\n    quarters: {\n      months: 3,\n      weeks: 13,\n      days: 91,\n      hours: 91 * 24,\n      minutes: 91 * 24 * 60,\n      seconds: 91 * 24 * 60 * 60,\n      milliseconds: 91 * 24 * 60 * 60 * 1000,\n    },\n    months: {\n      weeks: 4,\n      days: 30,\n      hours: 30 * 24,\n      minutes: 30 * 24 * 60,\n      seconds: 30 * 24 * 60 * 60,\n      milliseconds: 30 * 24 * 60 * 60 * 1000,\n    },\n\n    ...lowOrderMatrix,\n  },\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = {\n    years: {\n      quarters: 4,\n      months: 12,\n      weeks: daysInYearAccurate / 7,\n      days: daysInYearAccurate,\n      hours: daysInYearAccurate * 24,\n      minutes: daysInYearAccurate * 24 * 60,\n      seconds: daysInYearAccurate * 24 * 60 * 60,\n      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000,\n    },\n    quarters: {\n      months: 3,\n      weeks: daysInYearAccurate / 28,\n      days: daysInYearAccurate / 4,\n      hours: (daysInYearAccurate * 24) / 4,\n      minutes: (daysInYearAccurate * 24 * 60) / 4,\n      seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,\n      milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4,\n    },\n    months: {\n      weeks: daysInMonthAccurate / 7,\n      days: daysInMonthAccurate,\n      hours: daysInMonthAccurate * 24,\n      minutes: daysInMonthAccurate * 24 * 60,\n      seconds: daysInMonthAccurate * 24 * 60 * 60,\n      milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000,\n    },\n    ...lowOrderMatrix,\n  };\n\n// units ordered by size\nconst orderedUnits = [\n  \"years\",\n  \"quarters\",\n  \"months\",\n  \"weeks\",\n  \"days\",\n  \"hours\",\n  \"minutes\",\n  \"seconds\",\n  \"milliseconds\",\n];\n\nconst reverseUnits = orderedUnits.slice(0).reverse();\n\n// clone really means \"create another instance just like this one, but with these changes\"\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : { ...dur.values, ...(alts.values || {}) },\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,\n    matrix: alts.matrix || dur.matrix,\n  };\n  return new Duration(conf);\n}\n\nfunction durationToMillis(matrix, vals) {\n  let sum = vals.milliseconds ?? 0;\n  for (const unit of reverseUnits.slice(1)) {\n    if (vals[unit]) {\n      sum += vals[unit] * matrix[unit][\"milliseconds\"];\n    }\n  }\n  return sum;\n}\n\n// NB: mutates parameters\nfunction normalizeValues(matrix, vals) {\n  // the logic below assumes the overall value of the duration is positive\n  // if this is not the case, factor is used to make it so\n  const factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;\n\n  orderedUnits.reduceRight((previous, current) => {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        const previousVal = vals[previous] * factor;\n        const conv = matrix[current][previous];\n\n        // if (previousVal < 0):\n        // lower order unit is negative (e.g. { years: 2, days: -2 })\n        // normalize this by reducing the higher order unit by the appropriate amount\n        // and increasing the lower order unit\n        // this can never make the higher order unit negative, because this function only operates\n        // on positive durations, so the amount of time represented by the lower order unit cannot\n        // be larger than the higher order unit\n        // else:\n        // lower order unit is positive (e.g. { years: 2, days: 450 } or { years: -2, days: 450 })\n        // in this case we attempt to convert as much as possible from the lower order unit into\n        // the higher order one\n        //\n        // Math.floor takes care of both of these cases, rounding away from 0\n        // if previousVal < 0 it makes the absolute value larger\n        // if previousVal >= it makes the absolute value smaller\n        const rollUp = Math.floor(previousVal / conv);\n        vals[current] += rollUp * factor;\n        vals[previous] -= rollUp * conv * factor;\n      }\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n\n  // try to convert any decimals into smaller units if possible\n  // for example for { years: 2.5, days: 0, seconds: 0 } we want to get { years: 2, days: 182, hours: 12 }\n  orderedUnits.reduce((previous, current) => {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        const fraction = vals[previous] % 1;\n        vals[previous] -= fraction;\n        vals[current] += fraction * matrix[previous][current];\n      }\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n}\n\n// Remove all properties with a value of 0 from an object\nfunction removeZeroes(vals) {\n  const newVals = {};\n  for (const [key, value] of Object.entries(vals)) {\n    if (value !== 0) {\n      newVals[key] = value;\n    }\n  }\n  return newVals;\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\n * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.\n * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.\n * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport default class Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === \"longterm\" || false;\n    let matrix = accurate ? accurateMatrix : casualMatrix;\n\n    if (config.matrix) {\n      matrix = config.matrix;\n    }\n\n    /**\n     * @access private\n     */\n    this.values = config.values;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.conversionAccuracy = accurate ? \"longterm\" : \"casual\";\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.matrix = matrix;\n    /**\n     * @access private\n     */\n    this.isLuxonDuration = true;\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMillis(count, opts) {\n    return Duration.fromObject({ milliseconds: count }, opts);\n  }\n\n  /**\n   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.\n   * If this object is empty then a zero milliseconds duration is returned.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.quarters\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {Object} [opts=[]] - options for creating this Duration\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use\n   * @param {string} [opts.matrix=Object] - the custom conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj, opts = {}) {\n    if (obj == null || typeof obj !== \"object\") {\n      throw new InvalidArgumentError(\n        `Duration.fromObject: argument expected to be an object, got ${\n          obj === null ? \"null\" : typeof obj\n        }`\n      );\n    }\n\n    return new Duration({\n      values: normalizeObject(obj, Duration.normalizeUnit),\n      loc: Locale.fromObject(opts),\n      conversionAccuracy: opts.conversionAccuracy,\n      matrix: opts.matrix,\n    });\n  }\n\n  /**\n   * Create a Duration from DurationLike.\n   *\n   * @param {Object | number | Duration} durationLike\n   * One of:\n   * - object with keys like 'years' and 'hours'.\n   * - number representing milliseconds\n   * - Duration instance\n   * @return {Duration}\n   */\n  static fromDurationLike(durationLike) {\n    if (isNumber(durationLike)) {\n      return Duration.fromMillis(durationLike);\n    } else if (Duration.isDuration(durationLike)) {\n      return durationLike;\n    } else if (typeof durationLike === \"object\") {\n      return Duration.fromObject(durationLike);\n    } else {\n      throw new InvalidArgumentError(\n        `Unknown duration argument ${durationLike} of type ${typeof durationLike}`\n      );\n    }\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use\n   * @param {string} [opts.matrix=Object] - the preset conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const [parsed] = parseISODuration(text);\n    if (parsed) {\n      return Duration.fromObject(parsed, opts);\n    } else {\n      return Duration.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 time string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use\n   * @param {string} [opts.matrix=Object] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }\n   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @return {Duration}\n   */\n  static fromISOTime(text, opts) {\n    const [parsed] = parseISOTimeOnly(text);\n    if (parsed) {\n      return Duration.fromObject(parsed, opts);\n    } else {\n      return Duration.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Duration}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Duration is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(invalid);\n    } else {\n      return new Duration({ invalid });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit) {\n    const normalized = {\n      year: \"years\",\n      years: \"years\",\n      quarter: \"quarters\",\n      quarters: \"quarters\",\n      month: \"months\",\n      months: \"months\",\n      week: \"weeks\",\n      weeks: \"weeks\",\n      day: \"days\",\n      days: \"days\",\n      hour: \"hours\",\n      hours: \"hours\",\n      minute: \"minutes\",\n      minutes: \"minutes\",\n      second: \"seconds\",\n      seconds: \"seconds\",\n      millisecond: \"milliseconds\",\n      milliseconds: \"milliseconds\",\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Check if an object is a Duration. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDuration(o) {\n    return (o && o.isLuxonDuration) || false;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-GB'\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\n   * * `S` for milliseconds\n   * * `s` for seconds\n   * * `m` for minutes\n   * * `h` for hours\n   * * `d` for days\n   * * `w` for weeks\n   * * `M` for months\n   * * `y` for years\n   * Notes:\n   * * Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\n   * * Tokens can be escaped by wrapping with single quotes.\n   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - options\n   * @param {boolean} [opts.floor=true] - floor numerical values\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\"\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    // reverse-compat since 1.2; we always round down now, never up, and we do it by default\n    const fmtOpts = {\n      ...opts,\n      floor: opts.round !== false && opts.floor !== false,\n    };\n    return this.isValid\n      ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a string representation of a Duration with all units included.\n   * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options\n   * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.\n   * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.\n   * @example\n   * ```js\n   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })\n   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'\n   * dur.toHuman({ listStyle: \"long\" }) //=> '1 day, 5 hours, and 6 minutes'\n   * dur.toHuman({ unitDisplay: \"short\" }) //=> '1 day, 5 hr, 6 min'\n   * ```\n   */\n  toHuman(opts = {}) {\n    if (!this.isValid) return INVALID;\n\n    const l = orderedUnits\n      .map((unit) => {\n        const val = this.values[unit];\n        if (isUndefined(val)) {\n          return null;\n        }\n        return this.loc\n          .numberFormatter({ style: \"unit\", unitDisplay: \"long\", ...opts, unit: unit.slice(0, -1) })\n          .format(val);\n      })\n      .filter((n) => n);\n\n    return this.loc\n      .listFormatter({ type: \"conjunction\", style: opts.listStyle || \"narrow\", ...opts })\n      .format(l);\n  }\n\n  /**\n   * Returns a JavaScript object with this Duration's values.\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {Object}\n   */\n  toObject() {\n    if (!this.isValid) return {};\n    return { ...this.values };\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = \"P\";\n    if (this.years !== 0) s += this.years + \"Y\";\n    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + \"M\";\n    if (this.weeks !== 0) s += this.weeks + \"W\";\n    if (this.days !== 0) s += this.days + \"D\";\n    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)\n      s += \"T\";\n    if (this.hours !== 0) s += this.hours + \"H\";\n    if (this.minutes !== 0) s += this.minutes + \"M\";\n    if (this.seconds !== 0 || this.milliseconds !== 0)\n      // this will handle \"floating point madness\" by removing extra decimal places\n      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken\n      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + \"S\";\n    if (s === \"P\") s += \"T0S\";\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.\n   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'\n   * @return {string}\n   */\n  toISOTime(opts = {}) {\n    if (!this.isValid) return null;\n\n    const millis = this.toMillis();\n    if (millis < 0 || millis >= 86400000) return null;\n\n    opts = {\n      suppressMilliseconds: false,\n      suppressSeconds: false,\n      includePrefix: false,\n      format: \"extended\",\n      ...opts,\n      includeOffset: false,\n    };\n\n    const dateTime = DateTime.fromMillis(millis, { zone: \"UTC\" });\n    return dateTime.toISOTime(opts);\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a string representation of this Duration appropriate for the REPL.\n   * @return {string}\n   */\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    if (this.isValid) {\n      return `Duration { values: ${JSON.stringify(this.values)} }`;\n    } else {\n      return `Duration { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration.\n   * @return {number}\n   */\n  toMillis() {\n    if (!this.isValid) return NaN;\n\n    return durationToMillis(this.matrix, this.values);\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Duration.fromDurationLike(duration),\n      result = {};\n\n    for (const k of orderedUnits) {\n      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {\n        result[k] = dur.get(k) + this.get(k);\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Duration.fromDurationLike(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Scale this Duration by the specified amount. Return a newly-constructed Duration.\n   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === \"hours\" ? x * 2 : x) //=> { hours: 2, minutes: 30 }\n   * @return {Duration}\n   */\n  mapUnits(fn) {\n    if (!this.isValid) return this;\n    const result = {};\n    for (const k of Object.keys(this.values)) {\n      result[k] = asNumber(fn(this.values[k], k));\n    }\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const mixed = { ...this.values, ...normalizeObject(values, Duration.normalizeUnit) };\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-GB' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem });\n    const opts = { loc, matrix, conversionAccuracy };\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * Assuming the overall value of the Duration is positive, this means:\n   * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)\n   * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise\n   *   the overall value would be negative, see third example)\n   * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)\n   *\n   * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n    const vals = this.toObject();\n    normalizeValues(this.matrix, vals);\n    return clone(this, { values: vals }, true);\n  }\n\n  /**\n   * Rescale units to its largest representation\n   * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }\n   * @return {Duration}\n   */\n  rescale() {\n    if (!this.isValid) return this;\n    const vals = removeZeroes(this.normalize().shiftToAll().toObject());\n    return clone(this, { values: vals }, true);\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map((u) => Duration.normalizeUnit(u));\n\n    const built = {},\n      accumulated = {},\n      vals = this.toObject();\n    let lastUnit;\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        lastUnit = k;\n\n        let own = 0;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          own += this.matrix[ak][k] * accumulated[ak];\n          accumulated[ak] = 0;\n        }\n\n        // plus anything that's already in this unit\n        if (isNumber(vals[k])) {\n          own += vals[k];\n        }\n\n        // only keep the integer part for now in the hopes of putting any decimal part\n        // into a smaller unit later\n        const i = Math.trunc(own);\n        built[k] = i;\n        accumulated[k] = (own * 1000 - i * 1000) / 1000;\n\n        // otherwise, keep it in the wings to boil it later\n      } else if (isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    // lastUnit must be defined since units is not empty\n    for (const key in accumulated) {\n      if (accumulated[key] !== 0) {\n        built[lastUnit] +=\n          key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];\n      }\n    }\n\n    normalizeValues(this.matrix, built);\n    return clone(this, { values: built }, true);\n  }\n\n  /**\n   * Shift this Duration to all available units.\n   * Same as shiftTo(\"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\")\n   * @return {Duration}\n   */\n  shiftToAll() {\n    if (!this.isValid) return this;\n    return this.shiftTo(\n      \"years\",\n      \"months\",\n      \"weeks\",\n      \"days\",\n      \"hours\",\n      \"minutes\",\n      \"seconds\",\n      \"milliseconds\"\n    );\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];\n    }\n    return clone(this, { values: negated }, true);\n  }\n\n  /**\n   * Get the years.\n   * @type {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the quarters.\n   * @type {number}\n   */\n  get quarters() {\n    return this.isValid ? this.values.quarters || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @type {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @type {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @type {number}\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @type {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @type {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    if (!this.loc.equals(other.loc)) {\n      return false;\n    }\n\n    function eq(v1, v2) {\n      // Consider 0 and undefined as equal\n      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;\n      return v1 === v2;\n    }\n\n    for (const u of orderedUnits) {\n      if (!eq(this.values[u], other.values[u])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport * as Formats from \"./impl/formats.js\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd,\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return (o && o.isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime\n   * @return {number}\n   */\n  count(unit = \"milliseconds\", opts) {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit, opts);\n    let end;\n    if (opts?.useLocaleWeeks) {\n      end = this.end.reconfigure({ locale: start.locale });\n    } else {\n      end = this.end;\n    }\n    end = end.startOf(unit, opts);\n    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes\n        .map(friendlyDateTime)\n        .filter((d) => this.contains(d))\n        .sort((a, b) => a.toMillis() - b.toMillis()),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      idx = 1,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits((x) => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Returns true if this Interval fully contains the specified Interval, specifically if the intersect (of this Interval and the other Interval) is equal to the other Interval; false otherwise.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals\n      .sort((a, b) => a.s - b.s)\n      .reduce(\n        ([sofar, current], item) => {\n          if (!current) {\n            return [sofar, item];\n          } else if (current.overlaps(item) || current.abutsStart(item)) {\n            return [sofar, current.union(item)];\n          } else {\n            return [sofar.concat([current]), item];\n          }\n        },\n        [[], null]\n      );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map((i) => [\n        { time: i.s, type: \"s\" },\n        { time: i.e, type: \"e\" },\n      ]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map((i) => this.intersection(i))\n      .filter((i) => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for the REPL.\n   * @return {string}\n   */\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    if (this.isValid) {\n      return `Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`;\n    } else {\n      return `Interval { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Returns a localized string representing this Interval. Accepts the same options as the\n   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as\n   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method\n   * is browser-specific, but in general it will return an appropriate representation of the\n   * Interval in the assigned locale. Defaults to the system's locale if no locale has been\n   * specified.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or\n   * Intl.DateTimeFormat constructor options.\n   * @param {Object} opts - Options to override the configuration of the start DateTime.\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p\n   * @return {string}\n   */\n  toLocaleString(formatOpts = Formats.DATE_SHORT, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format\n   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible\n   * formatting tool.\n   * @param {string} dateFormat - The format string. This string formats the start and end time.\n   * See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - Options.\n   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end\n   * representations.\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" – \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n","import DateTime from \"./datetime.js\";\nimport Settings from \"./settings.js\";\nimport Locale from \"./impl/locale.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nimport { hasLocaleWeekInfo, hasRelative } from \"./impl/util.js\";\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport default class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = Settings.defaultZone) {\n    const proto = DateTime.now().setZone(zone).set({ month: 12 });\n\n    return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;\n  }\n\n  /**\n   * Return whether the specified zone is a valid IANA specifier.\n   * @param {string} zone - Zone to check\n   * @return {boolean}\n   */\n  static isValidIANAZone(zone) {\n    return IANAZone.isValidZone(zone);\n  }\n\n  /**\n   * Converts the input into a {@link Zone} instance.\n   *\n   * * If `input` is already a Zone instance, it is returned unchanged.\n   * * If `input` is a string containing a valid time zone name, a Zone instance\n   *   with that name is returned.\n   * * If `input` is a string that doesn't refer to a known time zone, a Zone\n   *   instance with {@link Zone#isValid} == false is returned.\n   * * If `input is a number, a Zone instance with the specified fixed offset\n   *   in minutes is returned.\n   * * If `input` is `null` or `undefined`, the default zone is returned.\n   * @param {string|Zone|number} [input] - the value to be converted\n   * @return {Zone}\n   */\n  static normalizeZone(input) {\n    return normalizeZone(input, Settings.defaultZone);\n  }\n\n  /**\n   * Get the weekday on which the week starts according to the given locale.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @returns {number} the start of the week, 1 for Monday through 7 for Sunday\n   */\n  static getStartOfWeek({ locale = null, locObj = null } = {}) {\n    return (locObj || Locale.create(locale)).getStartOfWeek();\n  }\n\n  /**\n   * Get the minimum number of days necessary in a week before it is considered part of the next year according\n   * to the given locale.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @returns {number}\n   */\n  static getMinimumDaysInFirstWeek({ locale = null, locObj = null } = {}) {\n    return (locObj || Locale.create(locale)).getMinDaysInFirstWeek();\n  }\n\n  /**\n   * Get the weekdays, which are considered the weekend according to the given locale\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday\n   */\n  static getWeekendWeekdays({ locale = null, locObj = null } = {}) {\n    // copy the array, because we cache it internally\n    return (locObj || Locale.create(locale)).getWeekendDays().slice();\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {Array}\n   */\n  static months(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link Info#months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {Array}\n   */\n  static monthsFormat(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the weekday representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\n   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'\n   * @return {Array}\n   */\n  static weekdays(length = \"long\", { locale = null, numberingSystem = null, locObj = null } = {}) {\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link Info#weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale=null] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @return {Array}\n   */\n  static weekdaysFormat(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]\n   * @return {Array}\n   */\n  static meridiems({ locale = null } = {}) {\n    return Locale.create(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {Array}\n   */\n  static eras(length = \"short\", { locale = null } = {}) {\n    return Locale.create(locale, null, \"gregory\").eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `relative`: whether this environment supports relative time formatting\n   * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale\n   * @example Info.features() //=> { relative: false, localeWeek: true }\n   * @return {Object}\n   */\n  static features() {\n    return { relative: hasRelative(), localeWeek: hasLocaleWeekInfo() };\n  }\n}\n","import Duration from \"../duration.js\";\n\nfunction dayDiff(earlier, later) {\n  const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf(\"day\").valueOf(),\n    ms = utcDayStart(later) - utcDayStart(earlier);\n  return Math.floor(Duration.fromMillis(ms).as(\"days\"));\n}\n\nfunction highOrderDiffs(cursor, later, units) {\n  const differs = [\n    [\"years\", (a, b) => b.year - a.year],\n    [\"quarters\", (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4],\n    [\"months\", (a, b) => b.month - a.month + (b.year - a.year) * 12],\n    [\n      \"weeks\",\n      (a, b) => {\n        const days = dayDiff(a, b);\n        return (days - (days % 7)) / 7;\n      },\n    ],\n    [\"days\", dayDiff],\n  ];\n\n  const results = {};\n  const earlier = cursor;\n  let lowestOrder, highWater;\n\n  /* This loop tries to diff using larger units first.\n     If we overshoot, we backtrack and try the next smaller unit.\n     \"cursor\" starts out at the earlier timestamp and moves closer and closer to \"later\"\n     as we use smaller and smaller units.\n     highWater keeps track of where we would be if we added one more of the smallest unit,\n     this is used later to potentially convert any difference smaller than the smallest higher order unit\n     into a fraction of that smallest higher order unit\n  */\n  for (const [unit, differ] of differs) {\n    if (units.indexOf(unit) >= 0) {\n      lowestOrder = unit;\n\n      results[unit] = differ(cursor, later);\n      highWater = earlier.plus(results);\n\n      if (highWater > later) {\n        // we overshot the end point, backtrack cursor by 1\n        results[unit]--;\n        cursor = earlier.plus(results);\n\n        // if we are still overshooting now, we need to backtrack again\n        // this happens in certain situations when diffing times in different zones,\n        // because this calculation ignores time zones\n        if (cursor > later) {\n          // keep the \"overshot by 1\" around as highWater\n          highWater = cursor;\n          // backtrack cursor by 1\n          results[unit]--;\n          cursor = earlier.plus(results);\n        }\n      } else {\n        cursor = highWater;\n      }\n    }\n  }\n\n  return [cursor, results, highWater, lowestOrder];\n}\n\nexport default function (earlier, later, units, opts) {\n  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);\n\n  const remainingMillis = later - cursor;\n\n  const lowerOrderUnits = units.filter(\n    (u) => [\"hours\", \"minutes\", \"seconds\", \"milliseconds\"].indexOf(u) >= 0\n  );\n\n  if (lowerOrderUnits.length === 0) {\n    if (highWater < later) {\n      highWater = cursor.plus({ [lowestOrder]: 1 });\n    }\n\n    if (highWater !== cursor) {\n      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);\n    }\n  }\n\n  const duration = Duration.fromObject(results, opts);\n\n  if (lowerOrderUnits.length > 0) {\n    return Duration.fromMillis(remainingMillis, opts)\n      .shiftTo(...lowerOrderUnits)\n      .plus(duration);\n  } else {\n    return duration;\n  }\n}\n","import { parseMillis, isUndefined, untruncateYear, signedOffset, hasOwnProperty } from \"./util.js\";\nimport Formatter from \"./formatter.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport DateTime from \"../datetime.js\";\nimport { digitRegex, parseDigits } from \"./digits.js\";\nimport { ConflictingSpecificationError } from \"../errors.js\";\n\nconst MISSING_FTP = \"missing Intl.DateTimeFormat.formatToParts support\";\n\nfunction intUnit(regex, post = (i) => i) {\n  return { regex, deser: ([s]) => post(parseDigits(s)) };\n}\n\nconst NBSP = String.fromCharCode(160);\nconst spaceOrNBSP = `[ ${NBSP}]`;\nconst spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, \"g\");\n\nfunction fixListRegex(s) {\n  // make dots optional and also make them literal\n  // make space and non breakable space characters interchangeable\n  return s.replace(/\\./g, \"\\\\.?\").replace(spaceOrNBSPRegExp, spaceOrNBSP);\n}\n\nfunction stripInsensitivities(s) {\n  return s\n    .replace(/\\./g, \"\") // ignore dots that were made optional\n    .replace(spaceOrNBSPRegExp, \" \") // interchange space and nbsp\n    .toLowerCase();\n}\n\nfunction oneOf(strings, startIndex) {\n  if (strings === null) {\n    return null;\n  } else {\n    return {\n      regex: RegExp(strings.map(fixListRegex).join(\"|\")),\n      deser: ([s]) =>\n        strings.findIndex((i) => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex,\n    };\n  }\n}\n\nfunction offset(regex, groups) {\n  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };\n}\n\nfunction simple(regex) {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction escapeToken(value) {\n  return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\n/**\n * @param token\n * @param {Locale} loc\n */\nfunction unitForToken(token, loc) {\n  const one = digitRegex(loc),\n    two = digitRegex(loc, \"{2}\"),\n    three = digitRegex(loc, \"{3}\"),\n    four = digitRegex(loc, \"{4}\"),\n    six = digitRegex(loc, \"{6}\"),\n    oneOrTwo = digitRegex(loc, \"{1,2}\"),\n    oneToThree = digitRegex(loc, \"{1,3}\"),\n    oneToSix = digitRegex(loc, \"{1,6}\"),\n    oneToNine = digitRegex(loc, \"{1,9}\"),\n    twoToFour = digitRegex(loc, \"{2,4}\"),\n    fourToSix = digitRegex(loc, \"{4,6}\"),\n    literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),\n    unitate = (t) => {\n      if (token.literal) {\n        return literal(t);\n      }\n      switch (t.val) {\n        // era\n        case \"G\":\n          return oneOf(loc.eras(\"short\"), 0);\n        case \"GG\":\n          return oneOf(loc.eras(\"long\"), 0);\n        // years\n        case \"y\":\n          return intUnit(oneToSix);\n        case \"yy\":\n          return intUnit(twoToFour, untruncateYear);\n        case \"yyyy\":\n          return intUnit(four);\n        case \"yyyyy\":\n          return intUnit(fourToSix);\n        case \"yyyyyy\":\n          return intUnit(six);\n        // months\n        case \"M\":\n          return intUnit(oneOrTwo);\n        case \"MM\":\n          return intUnit(two);\n        case \"MMM\":\n          return oneOf(loc.months(\"short\", true), 1);\n        case \"MMMM\":\n          return oneOf(loc.months(\"long\", true), 1);\n        case \"L\":\n          return intUnit(oneOrTwo);\n        case \"LL\":\n          return intUnit(two);\n        case \"LLL\":\n          return oneOf(loc.months(\"short\", false), 1);\n        case \"LLLL\":\n          return oneOf(loc.months(\"long\", false), 1);\n        // dates\n        case \"d\":\n          return intUnit(oneOrTwo);\n        case \"dd\":\n          return intUnit(two);\n        // ordinals\n        case \"o\":\n          return intUnit(oneToThree);\n        case \"ooo\":\n          return intUnit(three);\n        // time\n        case \"HH\":\n          return intUnit(two);\n        case \"H\":\n          return intUnit(oneOrTwo);\n        case \"hh\":\n          return intUnit(two);\n        case \"h\":\n          return intUnit(oneOrTwo);\n        case \"mm\":\n          return intUnit(two);\n        case \"m\":\n          return intUnit(oneOrTwo);\n        case \"q\":\n          return intUnit(oneOrTwo);\n        case \"qq\":\n          return intUnit(two);\n        case \"s\":\n          return intUnit(oneOrTwo);\n        case \"ss\":\n          return intUnit(two);\n        case \"S\":\n          return intUnit(oneToThree);\n        case \"SSS\":\n          return intUnit(three);\n        case \"u\":\n          return simple(oneToNine);\n        case \"uu\":\n          return simple(oneOrTwo);\n        case \"uuu\":\n          return intUnit(one);\n        // meridiem\n        case \"a\":\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case \"kkkk\":\n          return intUnit(four);\n        case \"kk\":\n          return intUnit(twoToFour, untruncateYear);\n        // weekNumber (W)\n        case \"W\":\n          return intUnit(oneOrTwo);\n        case \"WW\":\n          return intUnit(two);\n        // weekdays\n        case \"E\":\n        case \"c\":\n          return intUnit(one);\n        case \"EEE\":\n          return oneOf(loc.weekdays(\"short\", false), 1);\n        case \"EEEE\":\n          return oneOf(loc.weekdays(\"long\", false), 1);\n        case \"ccc\":\n          return oneOf(loc.weekdays(\"short\", true), 1);\n        case \"cccc\":\n          return oneOf(loc.weekdays(\"long\", true), 1);\n        // offset/zone\n        case \"Z\":\n        case \"ZZ\":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);\n        case \"ZZZ\":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case \"z\":\n          return simple(/[a-z_+-/]{1,256}?/i);\n        // this special-case \"token\" represents a place where a macro-token expanded into a white-space literal\n        // in this case we accept any non-newline white-space\n        case \" \":\n          return simple(/[^\\S\\n\\r]/);\n        default:\n          return literal(t);\n      }\n    };\n\n  const unit = unitate(token) || {\n    invalidReason: MISSING_FTP,\n  };\n\n  unit.token = token;\n\n  return unit;\n}\n\nconst partTypeStyleToTokenVal = {\n  year: {\n    \"2-digit\": \"yy\",\n    numeric: \"yyyyy\",\n  },\n  month: {\n    numeric: \"M\",\n    \"2-digit\": \"MM\",\n    short: \"MMM\",\n    long: \"MMMM\",\n  },\n  day: {\n    numeric: \"d\",\n    \"2-digit\": \"dd\",\n  },\n  weekday: {\n    short: \"EEE\",\n    long: \"EEEE\",\n  },\n  dayperiod: \"a\",\n  dayPeriod: \"a\",\n  hour12: {\n    numeric: \"h\",\n    \"2-digit\": \"hh\",\n  },\n  hour24: {\n    numeric: \"H\",\n    \"2-digit\": \"HH\",\n  },\n  minute: {\n    numeric: \"m\",\n    \"2-digit\": \"mm\",\n  },\n  second: {\n    numeric: \"s\",\n    \"2-digit\": \"ss\",\n  },\n  timeZoneName: {\n    long: \"ZZZZZ\",\n    short: \"ZZZ\",\n  },\n};\n\nfunction tokenForPart(part, formatOpts, resolvedOpts) {\n  const { type, value } = part;\n\n  if (type === \"literal\") {\n    const isSpace = /^\\s+$/.test(value);\n    return {\n      literal: !isSpace,\n      val: isSpace ? \" \" : value,\n    };\n  }\n\n  const style = formatOpts[type];\n\n  // The user might have explicitly specified hour12 or hourCycle\n  // if so, respect their decision\n  // if not, refer back to the resolvedOpts, which are based on the locale\n  let actualType = type;\n  if (type === \"hour\") {\n    if (formatOpts.hour12 != null) {\n      actualType = formatOpts.hour12 ? \"hour12\" : \"hour24\";\n    } else if (formatOpts.hourCycle != null) {\n      if (formatOpts.hourCycle === \"h11\" || formatOpts.hourCycle === \"h12\") {\n        actualType = \"hour12\";\n      } else {\n        actualType = \"hour24\";\n      }\n    } else {\n      // tokens only differentiate between 24 hours or not,\n      // so we do not need to check hourCycle here, which is less supported anyways\n      actualType = resolvedOpts.hour12 ? \"hour12\" : \"hour24\";\n    }\n  }\n  let val = partTypeStyleToTokenVal[actualType];\n  if (typeof val === \"object\") {\n    val = val[style];\n  }\n\n  if (val) {\n    return {\n      literal: false,\n      val,\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildRegex(units) {\n  const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, \"\");\n  return [`^${re}$`, units];\n}\n\nfunction match(input, regex, handlers) {\n  const matches = input.match(regex);\n\n  if (matches) {\n    const all = {};\n    let matchIndex = 1;\n    for (const i in handlers) {\n      if (hasOwnProperty(handlers, i)) {\n        const h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return [matches, all];\n  } else {\n    return [matches, {}];\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  const toField = (token) => {\n    switch (token) {\n      case \"S\":\n        return \"millisecond\";\n      case \"s\":\n        return \"second\";\n      case \"m\":\n        return \"minute\";\n      case \"h\":\n      case \"H\":\n        return \"hour\";\n      case \"d\":\n        return \"day\";\n      case \"o\":\n        return \"ordinal\";\n      case \"L\":\n      case \"M\":\n        return \"month\";\n      case \"y\":\n        return \"year\";\n      case \"E\":\n      case \"c\":\n        return \"weekday\";\n      case \"W\":\n        return \"weekNumber\";\n      case \"k\":\n        return \"weekYear\";\n      case \"q\":\n        return \"quarter\";\n      default:\n        return null;\n    }\n  };\n\n  let zone = null;\n  let specificOffset;\n  if (!isUndefined(matches.z)) {\n    zone = IANAZone.create(matches.z);\n  }\n\n  if (!isUndefined(matches.Z)) {\n    if (!zone) {\n      zone = new FixedOffsetZone(matches.Z);\n    }\n    specificOffset = matches.Z;\n  }\n\n  if (!isUndefined(matches.q)) {\n    matches.M = (matches.q - 1) * 3 + 1;\n  }\n\n  if (!isUndefined(matches.h)) {\n    if (matches.h < 12 && matches.a === 1) {\n      matches.h += 12;\n    } else if (matches.h === 12 && matches.a === 0) {\n      matches.h = 0;\n    }\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  if (!isUndefined(matches.u)) {\n    matches.S = parseMillis(matches.u);\n  }\n\n  const vals = Object.keys(matches).reduce((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone, specificOffset];\n}\n\nlet dummyDateTimeCache = null;\n\nfunction getDummyDateTime() {\n  if (!dummyDateTimeCache) {\n    dummyDateTimeCache = DateTime.fromMillis(1555555555555);\n  }\n\n  return dummyDateTimeCache;\n}\n\nfunction maybeExpandMacroToken(token, locale) {\n  if (token.literal) {\n    return token;\n  }\n\n  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);\n  const tokens = formatOptsToTokens(formatOpts, locale);\n\n  if (tokens == null || tokens.includes(undefined)) {\n    return token;\n  }\n\n  return tokens;\n}\n\nexport function expandMacroTokens(tokens, locale) {\n  return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));\n}\n\n/**\n * @private\n */\n\nexport class TokenParser {\n  constructor(locale, format) {\n    this.locale = locale;\n    this.format = format;\n    this.tokens = expandMacroTokens(Formatter.parseFormat(format), locale);\n    this.units = this.tokens.map((t) => unitForToken(t, locale));\n    this.disqualifyingUnit = this.units.find((t) => t.invalidReason);\n\n    if (!this.disqualifyingUnit) {\n      const [regexString, handlers] = buildRegex(this.units);\n      this.regex = RegExp(regexString, \"i\");\n      this.handlers = handlers;\n    }\n  }\n\n  explainFromTokens(input) {\n    if (!this.isValid) {\n      return { input, tokens: this.tokens, invalidReason: this.invalidReason };\n    } else {\n      const [rawMatches, matches] = match(input, this.regex, this.handlers),\n        [result, zone, specificOffset] = matches\n          ? dateTimeFromMatches(matches)\n          : [null, null, undefined];\n      if (hasOwnProperty(matches, \"a\") && hasOwnProperty(matches, \"H\")) {\n        throw new ConflictingSpecificationError(\n          \"Can't include meridiem when specifying 24-hour format\"\n        );\n      }\n      return {\n        input,\n        tokens: this.tokens,\n        regex: this.regex,\n        rawMatches,\n        matches,\n        result,\n        zone,\n        specificOffset,\n      };\n    }\n  }\n\n  get isValid() {\n    return !this.disqualifyingUnit;\n  }\n\n  get invalidReason() {\n    return this.disqualifyingUnit ? this.disqualifyingUnit.invalidReason : null;\n  }\n}\n\nexport function explainFromTokens(locale, input, format) {\n  const parser = new TokenParser(locale, format);\n  return parser.explainFromTokens(input);\n}\n\nexport function parseFromTokens(locale, input, format) {\n  const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);\n  return [result, zone, specificOffset, invalidReason];\n}\n\nexport function formatOptsToTokens(formatOpts, locale) {\n  if (!formatOpts) {\n    return null;\n  }\n\n  const formatter = Formatter.create(locale, formatOpts);\n  const df = formatter.dtFormatter(getDummyDateTime());\n  const parts = df.formatToParts();\n  const resolvedOpts = df.resolvedOptions();\n  return parts.map((p) => tokenForPart(p, formatOpts, resolvedOpts));\n}\n","import Duration from \"./duration.js\";\nimport Interval from \"./interval.js\";\nimport Settings from \"./settings.js\";\nimport Info from \"./info.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport FixedOffsetZone from \"./zones/fixedOffsetZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport {\n  isUndefined,\n  maybeArray,\n  isDate,\n  isNumber,\n  bestBy,\n  daysInMonth,\n  daysInYear,\n  isLeapYear,\n  weeksInWeekYear,\n  normalizeObject,\n  roundTo,\n  objToLocalTS,\n  padStart,\n} from \"./impl/util.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\nimport diff from \"./impl/diff.js\";\nimport { parseRFC2822Date, parseISODate, parseHTTPDate, parseSQL } from \"./impl/regexParser.js\";\nimport {\n  parseFromTokens,\n  explainFromTokens,\n  formatOptsToTokens,\n  expandMacroTokens,\n  TokenParser,\n} from \"./impl/tokenParser.js\";\nimport {\n  gregorianToWeek,\n  weekToGregorian,\n  gregorianToOrdinal,\n  ordinalToGregorian,\n  hasInvalidGregorianData,\n  hasInvalidWeekData,\n  hasInvalidOrdinalData,\n  hasInvalidTimeData,\n  usesLocalWeekValues,\n  isoWeekdayToLocal,\n} from \"./impl/conversions.js\";\nimport * as Formats from \"./impl/formats.js\";\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  InvalidDateTimeError,\n} from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\n\nconst INVALID = \"Invalid DateTime\";\nconst MAX_DATE = 8.64e15;\n\nfunction unsupportedZone(zone) {\n  return new Invalid(\"unsupported zone\", `the zone \"${zone.name}\" is not supported`);\n}\n\n// we cache week data on the DT object and this intermediates the cache\n/**\n * @param {DateTime} dt\n */\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\n/**\n * @param {DateTime} dt\n */\nfunction possiblyCachedLocalWeekData(dt) {\n  if (dt.localWeekData === null) {\n    dt.localWeekData = gregorianToWeek(\n      dt.c,\n      dt.loc.getMinDaysInFirstWeek(),\n      dt.loc.getStartOfWeek()\n    );\n  }\n  return dt.localWeekData;\n}\n\n// clone really means, \"make a new object with these modifications\". all \"setters\" really use this\n// to create a new object while only changing some of the properties\nfunction clone(inst, alts) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalid: inst.invalid,\n  };\n  return new DateTime({ ...current, ...alts, old: current });\n}\n\n// find the right offset a given local time. The o input is our guess, which determines which\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\n// convert an epoch timestamp into a calendar object with the given offset\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds(),\n  };\n}\n\n// convert a calendar object to a epoch timestamp\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\n// create a new DT instance by adding a duration, adjusting for DSTs\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    year = inst.c.year + Math.trunc(dur.years),\n    month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,\n    c = {\n      ...inst.c,\n      year,\n      month,\n      day:\n        Math.min(inst.c.day, daysInMonth(year, month)) +\n        Math.trunc(dur.days) +\n        Math.trunc(dur.weeks) * 7,\n    },\n    millisToAdd = Duration.fromObject({\n      years: dur.years - Math.trunc(dur.years),\n      quarters: dur.quarters - Math.trunc(dur.quarters),\n      months: dur.months - Math.trunc(dur.months),\n      weeks: dur.weeks - Math.trunc(dur.weeks),\n      days: dur.days - Math.trunc(dur.days),\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds,\n    }).as(\"milliseconds\"),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\n// helper useful in turning the results of parsing into real dates\n// by handling the zone options\nfunction parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {\n  const { setZone, zone } = opts;\n  if ((parsed && Object.keys(parsed).length !== 0) || parsedZone) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(parsed, {\n        ...opts,\n        zone: interpretationZone,\n        specificOffset,\n      });\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(\n      new Invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ${format}`)\n    );\n  }\n}\n\n// if you want to output a technical format (e.g. RFC 2822), this helper\n// helps handle the details\nfunction toTechFormat(dt, format, allowZ = true) {\n  return dt.isValid\n    ? Formatter.create(Locale.create(\"en-US\"), {\n        allowZ,\n        forceSimple: true,\n      }).formatDateTimeFromString(dt, format)\n    : null;\n}\n\nfunction toISODate(o, extended) {\n  const longFormat = o.c.year > 9999 || o.c.year < 0;\n  let c = \"\";\n  if (longFormat && o.c.year >= 0) c += \"+\";\n  c += padStart(o.c.year, longFormat ? 6 : 4);\n\n  if (extended) {\n    c += \"-\";\n    c += padStart(o.c.month);\n    c += \"-\";\n    c += padStart(o.c.day);\n  } else {\n    c += padStart(o.c.month);\n    c += padStart(o.c.day);\n  }\n  return c;\n}\n\nfunction toISOTime(\n  o,\n  extended,\n  suppressSeconds,\n  suppressMilliseconds,\n  includeOffset,\n  extendedZone\n) {\n  let c = padStart(o.c.hour);\n  if (extended) {\n    c += \":\";\n    c += padStart(o.c.minute);\n    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {\n      c += \":\";\n    }\n  } else {\n    c += padStart(o.c.minute);\n  }\n\n  if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {\n    c += padStart(o.c.second);\n\n    if (o.c.millisecond !== 0 || !suppressMilliseconds) {\n      c += \".\";\n      c += padStart(o.c.millisecond, 3);\n    }\n  }\n\n  if (includeOffset) {\n    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {\n      c += \"Z\";\n    } else if (o.o < 0) {\n      c += \"-\";\n      c += padStart(Math.trunc(-o.o / 60));\n      c += \":\";\n      c += padStart(Math.trunc(-o.o % 60));\n    } else {\n      c += \"+\";\n      c += padStart(Math.trunc(o.o / 60));\n      c += \":\";\n      c += padStart(Math.trunc(o.o % 60));\n    }\n  }\n\n  if (extendedZone) {\n    c += \"[\" + o.zone.ianaName + \"]\";\n  }\n  return c;\n}\n\n// defaults for unspecified units in the supported calendars\nconst defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  };\n\n// Units in the supported calendars, sorted by bigness\nconst orderedUnits = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\"],\n  orderedWeekUnits = [\n    \"weekYear\",\n    \"weekNumber\",\n    \"weekday\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n    \"millisecond\",\n  ],\n  orderedOrdinalUnits = [\"year\", \"ordinal\", \"hour\", \"minute\", \"second\", \"millisecond\"];\n\n// standardize case and plurality in units\nfunction normalizeUnit(unit) {\n  const normalized = {\n    year: \"year\",\n    years: \"year\",\n    month: \"month\",\n    months: \"month\",\n    day: \"day\",\n    days: \"day\",\n    hour: \"hour\",\n    hours: \"hour\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    second: \"second\",\n    seconds: \"second\",\n    millisecond: \"millisecond\",\n    milliseconds: \"millisecond\",\n    weekday: \"weekday\",\n    weekdays: \"weekday\",\n    weeknumber: \"weekNumber\",\n    weeksnumber: \"weekNumber\",\n    weeknumbers: \"weekNumber\",\n    weekyear: \"weekYear\",\n    weekyears: \"weekYear\",\n    ordinal: \"ordinal\",\n  }[unit.toLowerCase()];\n\n  if (!normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\nfunction normalizeUnitWithLocalWeeks(unit) {\n  switch (unit.toLowerCase()) {\n    case \"localweekday\":\n    case \"localweekdays\":\n      return \"localWeekday\";\n    case \"localweeknumber\":\n    case \"localweeknumbers\":\n      return \"localWeekNumber\";\n    case \"localweekyear\":\n    case \"localweekyears\":\n      return \"localWeekYear\";\n    default:\n      return normalizeUnit(unit);\n  }\n}\n\n// cache offsets for zones based on the current timestamp when this function is\n// first called. When we are handling a datetime from components like (year,\n// month, day, hour) in a time zone, we need a guess about what the timezone\n// offset is so that we can convert into a UTC timestamp. One way is to find the\n// offset of now in the zone. The actual date may have a different offset (for\n// example, if we handle a date in June while we're in December in a zone that\n// observes DST), but we can check and adjust that.\n//\n// When handling many dates, calculating the offset for now every time is\n// expensive. It's just a guess, so we can cache the offset to use even if we\n// are right on a time change boundary (we'll just correct in the other\n// direction). Using a timestamp from first read is a slight optimization for\n// handling dates close to the current date, since those dates will usually be\n// in the same offset (we could set the timestamp statically, instead). We use a\n// single timestamp for all zones to make things a bit more predictable.\n//\n// This is safe for quickDT (used by local() and utc()) because we don't fill in\n// higher-order units from tsNow (as we do in fromObject, this requires that\n// offset is calculated from tsNow).\nfunction guessOffsetForZone(zone) {\n  if (!zoneOffsetGuessCache[zone]) {\n    if (zoneOffsetTs === undefined) {\n      zoneOffsetTs = Settings.now();\n    }\n\n    zoneOffsetGuessCache[zone] = zone.offset(zoneOffsetTs);\n  }\n  return zoneOffsetGuessCache[zone];\n}\n\n// this is a dumbed down version of fromObject() that runs about 60% faster\n// but doesn't do any validation, makes a bunch of assumptions about what units\n// are present, and so on.\nfunction quickDT(obj, opts) {\n  const zone = normalizeZone(opts.zone, Settings.defaultZone);\n  if (!zone.isValid) {\n    return DateTime.invalid(unsupportedZone(zone));\n  }\n\n  const loc = Locale.fromObject(opts);\n\n  let ts, o;\n\n  // assume we have the higher-order units\n  if (!isUndefined(obj.year)) {\n    for (const u of orderedUnits) {\n      if (isUndefined(obj[u])) {\n        obj[u] = defaultUnitValues[u];\n      }\n    }\n\n    const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    const offsetProvis = guessOffsetForZone(zone);\n    [ts, o] = objToTS(obj, offsetProvis, zone);\n  } else {\n    ts = Settings.now();\n  }\n\n  return new DateTime({ ts, zone, loc, o });\n}\n\nfunction diffRelative(start, end, opts) {\n  const round = isUndefined(opts.round) ? true : opts.round,\n    format = (c, unit) => {\n      c = roundTo(c, round || opts.calendary ? 0 : 2, true);\n      const formatter = end.loc.clone(opts).relFormatter(opts);\n      return formatter.format(c, unit);\n    },\n    differ = (unit) => {\n      if (opts.calendary) {\n        if (!end.hasSame(start, unit)) {\n          return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);\n        } else return 0;\n      } else {\n        return end.diff(start, unit).get(unit);\n      }\n    };\n\n  if (opts.unit) {\n    return format(differ(opts.unit), opts.unit);\n  }\n\n  for (const unit of opts.units) {\n    const count = differ(unit);\n    if (Math.abs(count) >= 1) {\n      return format(count, unit);\n    }\n  }\n  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);\n}\n\nfunction lastOpts(argList) {\n  let opts = {},\n    args;\n  if (argList.length > 0 && typeof argList[argList.length - 1] === \"object\") {\n    opts = argList[argList.length - 1];\n    args = Array.from(argList).slice(0, argList.length - 1);\n  } else {\n    args = Array.from(argList);\n  }\n  return [opts, args];\n}\n\n/**\n * Timestamp to use for cached zone offset guesses (exposed for test)\n */\nlet zoneOffsetTs;\n/**\n * Cache for zone offset guesses (exposed for test).\n *\n * This optimizes quickDT via guessOffsetForZone to avoid repeated calls of\n * zone.offset().\n */\nlet zoneOffsetGuessCache = {};\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},\n * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.\n * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport default class DateTime {\n  /**\n   * @access private\n   */\n  constructor(config) {\n    const zone = config.zone || Settings.defaultZone;\n\n    let invalid =\n      config.invalid ||\n      (Number.isNaN(config.ts) ? new Invalid(\"invalid input\") : null) ||\n      (!zone.isValid ? unsupportedZone(zone) : null);\n    /**\n     * @access private\n     */\n    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;\n\n    let c = null,\n      o = null;\n    if (!invalid) {\n      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);\n\n      if (unchanged) {\n        [c, o] = [config.old.c, config.old.o];\n      } else {\n        // If an offset has been passed and we have not been called from\n        // clone(), we can trust it and avoid the offset calculation.\n        const ot = isNumber(config.o) && !config.old ? config.o : zone.offset(this.ts);\n        c = tsToObj(this.ts, ot);\n        invalid = Number.isNaN(c.year) ? new Invalid(\"invalid input\") : null;\n        c = invalid ? null : c;\n        o = invalid ? null : ot;\n      }\n    }\n\n    /**\n     * @access private\n     */\n    this._zone = zone;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.invalid = invalid;\n    /**\n     * @access private\n     */\n    this.weekData = null;\n    /**\n     * @access private\n     */\n    this.localWeekData = null;\n    /**\n     * @access private\n     */\n    this.c = c;\n    /**\n     * @access private\n     */\n    this.o = o;\n    /**\n     * @access private\n     */\n    this.isLuxonDateTime = true;\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a DateTime for the current instant, in the system's time zone.\n   *\n   * Use Settings to override these default values if needed.\n   * @example DateTime.now().toISO() //~> now in the ISO format\n   * @return {DateTime}\n   */\n  static now() {\n    return new DateTime({});\n  }\n\n  /**\n   * Create a local DateTime\n   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month, 1-indexed\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @example DateTime.local()                                  //~> now\n   * @example DateTime.local({ zone: \"America/New_York\" })      //~> now, in US east coast time\n   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12, { locale: \"fr\" })     //~> 2017-03-12T00:00:00, with a French locale\n   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, { zone: \"utc\" })   //~> 2017-03-12T05:00:00, in UTC\n   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765\n   * @return {DateTime}\n   */\n  static local() {\n    const [opts, args] = lastOpts(arguments),\n      [year, month, day, hour, minute, second, millisecond] = args;\n    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {string} [options.weekSettings] - the week settings to set on the resulting DateTime instance\n   * @example DateTime.utc()                                              //~> now\n   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: \"fr\" })          //~> 2017-03-12T05:45:00Z with a French locale\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: \"fr\" }) //~> 2017-03-12T05:45:10.765Z with a French locale\n   * @return {DateTime}\n   */\n  static utc() {\n    const [opts, args] = lastOpts(arguments),\n      [year, month, day, hour, minute, second, millisecond] = args;\n\n    opts.zone = FixedOffsetZone.utcInstance;\n    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);\n  }\n\n  /**\n   * Create a DateTime from a JavaScript Date object. Uses the default zone.\n   * @param {Date} date - a JavaScript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    const ts = isDate(date) ? date.valueOf() : NaN;\n    if (Number.isNaN(ts)) {\n      return DateTime.invalid(\"invalid input\");\n    }\n\n    const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    return new DateTime({\n      ts: ts,\n      zone: zoneToUse,\n      loc: Locale.fromObject(options),\n    });\n  }\n\n  /**\n   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    if (!isNumber(milliseconds)) {\n      throw new InvalidArgumentError(\n        `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`\n      );\n    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {\n      // this isn't perfect because we can still end up out of range because of additional shifting, but it's a start\n      return DateTime.invalid(\"Timestamp out of range\");\n    } else {\n      return new DateTime({\n        ts: milliseconds,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options),\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} seconds - a number of seconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromSeconds(seconds, options = {}) {\n    if (!isNumber(seconds)) {\n      throw new InvalidArgumentError(\"fromSeconds requires a numerical input\");\n    } else {\n      return new DateTime({\n        ts: seconds * 1000,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options),\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.localWeekYear - a week year, according to the locale\n   * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale\n   * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {Object} opts - options for creating this DateTime\n   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [opts.locale='system\\'s locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: \"en-US\" }).toISODate() //=> '2021-12-26'\n   * @return {DateTime}\n   */\n  static fromObject(obj, opts = {}) {\n    obj = obj || {};\n    const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    const loc = Locale.fromObject(opts);\n    const normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);\n    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, loc);\n\n    const tsNow = Settings.now(),\n      offsetProvis = !isUndefined(opts.specificOffset)\n        ? opts.specificOffset\n        : zoneToUse.offset(tsNow),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber;\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n        ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek)\n        : containsOrdinal\n        ? hasInvalidOrdinalData(normalized)\n        : hasInvalidGregorianData(normalized),\n      invalid = higherOrderInvalid || hasInvalidTimeData(normalized);\n\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n        ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek)\n        : containsOrdinal\n        ? ordinalToGregorian(normalized)\n        : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc,\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid(\n        \"mismatched weekday\",\n        `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`\n      );\n    }\n\n    if (!inst.isValid) {\n      return DateTime.invalid(inst.invalid);\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {string} [opts.weekSettings] - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"ISO 8601\", text);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"RFC 2822\", text);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, opts = {}) {\n    const [vals, parsedZone] = parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"HTTP\", opts);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string.\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromFormat(text, fmt, opts = {}) {\n    if (isUndefined(text) || isUndefined(fmt)) {\n      throw new InvalidArgumentError(\"fromFormat requires an input string and a format\");\n    }\n\n    const { locale = null, numberingSystem = null } = opts,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      }),\n      [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    } else {\n      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);\n    }\n  }\n\n  /**\n   * @deprecated use fromFormat instead\n   */\n  static fromString(text, fmt, opts = {}) {\n    return DateTime.fromFormat(text, fmt, opts);\n  }\n\n  /**\n   * Create a DateTime from a SQL date, time, or datetime\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @example DateTime.fromSQL('2017-05-15')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\n   * @example DateTime.fromSQL('09:12:34.342')\n   * @return {DateTime}\n   */\n  static fromSQL(text, opts = {}) {\n    const [vals, parsedZone] = parseSQL(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"SQL\", text);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {DateTime}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the DateTime is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(invalid);\n    } else {\n      return new DateTime({ invalid });\n    }\n  }\n\n  /**\n   * Check if an object is an instance of DateTime. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDateTime(o) {\n    return (o && o.isLuxonDateTime) || false;\n  }\n\n  /**\n   * Produce the format string for a set of options\n   * @param formatOpts\n   * @param localeOpts\n   * @returns {string}\n   */\n  static parseFormatForOpts(formatOpts, localeOpts = {}) {\n    const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));\n    return !tokenList ? null : tokenList.map((t) => (t ? t.val : null)).join(\"\");\n  }\n\n  /**\n   * Produce the the fully expanded format token for the locale\n   * Does NOT quote characters, so quoted tokens will not round trip correctly\n   * @param fmt\n   * @param localeOpts\n   * @returns {string}\n   */\n  static expandFormat(fmt, localeOpts = {}) {\n    const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));\n    return expanded.map((t) => t.val).join(\"\");\n  }\n\n  static resetCache() {\n    zoneOffsetTs = undefined;\n    zoneOffsetGuessCache = {};\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get outputCalendar() {\n    return this.isValid ? this.loc.outputCalendar : null;\n  }\n\n  /**\n   * Get the time zone associated with this DateTime.\n   * @type {Zone}\n   */\n  get zone() {\n    return this._zone;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @type {string}\n   */\n  get zoneName() {\n    return this.isValid ? this.zone.name : null;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @type {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the quarter\n   * @example DateTime.local(2017, 5, 25).quarter //=> 2\n   * @type {number}\n   */\n  get quarter() {\n    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @type {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @type {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @type {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @type {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @type {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @type {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 12, 31).weekYear //=> 2015\n   * @type {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @type {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @type {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Returns true if this date is on a weekend according to the locale, false otherwise\n   * @returns {boolean}\n   */\n  get isWeekend() {\n    return this.isValid && this.loc.getWeekendDays().includes(this.weekday);\n  }\n\n  /**\n   * Get the day of the week according to the locale.\n   * 1 is the first day of the week and 7 is the last day of the week.\n   * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,\n   * @returns {number}\n   */\n  get localWeekday() {\n    return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the week number of the week year according to the locale. Different locales assign week numbers differently,\n   * because the week can start on different days of the week (see localWeekday) and because a different number of days\n   * is required for a week to count as the first week of a year.\n   * @returns {number}\n   */\n  get localWeekNumber() {\n    return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)\n   * differently, see localWeekNumber.\n   * @returns {number}\n   */\n  get localWeekYear() {\n    return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the ordinal (meaning the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @type {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the human readable short month name, such as 'Oct'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\n   * @type {string}\n   */\n  get monthShort() {\n    return this.isValid ? Info.months(\"short\", { locObj: this.loc })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable long month name, such as 'October'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthLong //=> October\n   * @type {string}\n   */\n  get monthLong() {\n    return this.isValid ? Info.months(\"long\", { locObj: this.loc })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable short weekday, such as 'Mon'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\n   * @type {string}\n   */\n  get weekdayShort() {\n    return this.isValid ? Info.weekdays(\"short\", { locObj: this.loc })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the human readable long weekday, such as 'Monday'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\n   * @type {string}\n   */\n  get weekdayLong() {\n    return this.isValid ? Info.weekdays(\"long\", { locObj: this.loc })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.now().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @type {number}\n   */\n  get offset() {\n    return this.isValid ? +this.o : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"short\",\n        locale: this.locale,\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"long\",\n        locale: this.locale,\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @type {boolean}\n   */\n  get isOffsetFixed() {\n    return this.isValid ? this.zone.isUniversal : null;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @type {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return (\n        this.offset > this.set({ month: 1, day: 1 }).offset ||\n        this.offset > this.set({ month: 5 }).offset\n      );\n    }\n  }\n\n  /**\n   * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC\n   * in this DateTime's zone. During DST changes local time can be ambiguous, for example\n   * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.\n   * This method will return both possible DateTimes if this DateTime's local time is ambiguous.\n   * @returns {DateTime[]}\n   */\n  getPossibleOffsets() {\n    if (!this.isValid || this.isOffsetFixed) {\n      return [this];\n    }\n    const dayMs = 86400000;\n    const minuteMs = 60000;\n    const localTS = objToLocalTS(this.c);\n    const oEarlier = this.zone.offset(localTS - dayMs);\n    const oLater = this.zone.offset(localTS + dayMs);\n\n    const o1 = this.zone.offset(localTS - oEarlier * minuteMs);\n    const o2 = this.zone.offset(localTS - oLater * minuteMs);\n    if (o1 === o2) {\n      return [this];\n    }\n    const ts1 = localTS - o1 * minuteMs;\n    const ts2 = localTS - o2 * minuteMs;\n    const c1 = tsToObj(ts1, o1);\n    const c2 = tsToObj(ts2, o2);\n    if (\n      c1.hour === c2.hour &&\n      c1.minute === c2.minute &&\n      c1.second === c2.second &&\n      c1.millisecond === c2.millisecond\n    ) {\n      return [clone(this, { ts: ts1 }), clone(this, { ts: ts2 })];\n    }\n    return [this];\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @type {boolean}\n   */\n  get isInLeapYear() {\n    return isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).daysInMonth //=> 31\n   * @type {number}\n   */\n  get daysInMonth() {\n    return daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @type {number}\n   */\n  get daysInYear() {\n    return this.isValid ? daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the number of weeks in this DateTime's year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2004).weeksInWeekYear //=> 53\n   * @example DateTime.local(2013).weeksInWeekYear //=> 52\n   * @type {number}\n   */\n  get weeksInWeekYear() {\n    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;\n  }\n\n  /**\n   * Returns the number of weeks in this DateTime's local week year\n   * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52\n   * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53\n   * @type {number}\n   */\n  get weeksInLocalWeekYear() {\n    return this.isValid\n      ? weeksInWeekYear(\n          this.localWeekYear,\n          this.loc.getMinDaysInFirstWeek(),\n          this.loc.getStartOfWeek()\n        )\n      : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of formatting methods\n   * @param {Object} opts - the same options as toLocaleString\n   * @return {Object}\n   */\n  resolvedLocaleOptions(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link DateTime#setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {Object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(Settings.defaultZone);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {\n    zone = normalizeZone(zone, Settings.defaultZone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(unsupportedZone(zone));\n    } else {\n      let newTS = this.ts;\n      if (keepLocalTime || keepCalendarTime) {\n        const offsetGuess = zone.offset(this.ts);\n        const asObj = this.toObject();\n        [newTS] = objToTS(asObj, offsetGuess, zone);\n      }\n      return clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {Object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return clone(this, { loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * You can only set units with this method; for \"setting\" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.\n   *\n   * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.\n   * They cannot be mixed with ISO-week units like `weekday`.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @return {DateTime}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);\n    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, this.loc);\n\n    const settingWeekStuff =\n        !isUndefined(normalized.weekYear) ||\n        !isUndefined(normalized.weekNumber) ||\n        !isUndefined(normalized.weekday),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber;\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = weekToGregorian(\n        { ...gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), ...normalized },\n        minDaysInFirstWeek,\n        startOfWeek\n      );\n    } else if (!isUndefined(normalized.ordinal)) {\n      mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });\n    } else {\n      mixed = { ...this.toObject(), ...normalized };\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (isUndefined(normalized.day)) {\n        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.now().plus(123) //~> in 123 milliseconds\n   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday\n   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min\n   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = Duration.fromDurationLike(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link DateTime#plus}\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = Duration.fromDurationLike(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit, { useLocaleWeeks = false } = {}) {\n    if (!this.isValid) return this;\n\n    const o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case \"years\":\n        o.month = 1;\n      // falls through\n      case \"quarters\":\n      case \"months\":\n        o.day = 1;\n      // falls through\n      case \"weeks\":\n      case \"days\":\n        o.hour = 0;\n      // falls through\n      case \"hours\":\n        o.minute = 0;\n      // falls through\n      case \"minutes\":\n        o.second = 0;\n      // falls through\n      case \"seconds\":\n        o.millisecond = 0;\n        break;\n      case \"milliseconds\":\n        break;\n      // no default, invalid units throw in normalizeUnit()\n    }\n\n    if (normalizedUnit === \"weeks\") {\n      if (useLocaleWeeks) {\n        const startOfWeek = this.loc.getStartOfWeek();\n        const { weekday } = this;\n        if (weekday < startOfWeek) {\n          o.weekNumber = this.weekNumber - 1;\n        }\n        o.weekday = startOfWeek;\n      } else {\n        o.weekday = 1;\n      }\n    }\n\n    if (normalizedUnit === \"quarters\") {\n      const q = Math.ceil(this.month / 3);\n      o.month = (q - 1) * 3 + 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (meaning the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit, opts) {\n    return this.isValid\n      ? this.plus({ [unit]: 1 })\n          .startOf(unit, opts)\n          .minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - opts to override the configuration options on this DateTime\n   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation\n   * of the DateTime in the assigned locale.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options\n   * @param {Object} opts - opts to override the configuration options on this DateTime\n   * @example DateTime.now().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'\n   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'\n   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'\n   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'\n   * @return {string}\n   */\n  toLocaleString(formatOpts = Formats.DATE_SHORT, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an array of format \"parts\", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.now().toLocaleParts(); //=> [\n   *                                   //=>   { type: 'day', value: '25' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'month', value: '05' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'year', value: '1982' }\n   *                                   //=> ]\n   */\n  toLocaleParts(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)\n      : [];\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.extendedZone=false] - add the time zone format extension\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\n   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'\n   * @return {string}\n   */\n  toISO({\n    format = \"extended\",\n    suppressSeconds = false,\n    suppressMilliseconds = false,\n    includeOffset = true,\n    extendedZone = false,\n  } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    const ext = format === \"extended\";\n\n    let c = toISODate(this, ext);\n    c += \"T\";\n    c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);\n    return c;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @param {Object} opts - options\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'\n   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'\n   * @return {string}\n   */\n  toISODate({ format = \"extended\" } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return toISODate(this, format === \"extended\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return toTechFormat(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.extendedZone=true] - add the time zone format extension\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'\n   * @return {string}\n   */\n  toISOTime({\n    suppressMilliseconds = false,\n    suppressSeconds = false,\n    includeOffset = true,\n    includePrefix = false,\n    extendedZone = false,\n    format = \"extended\",\n  } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    let c = includePrefix ? \"T\" : \"\";\n    return (\n      c +\n      toISOTime(\n        this,\n        format === \"extended\",\n        suppressSeconds,\n        suppressMilliseconds,\n        includeOffset,\n        extendedZone\n      )\n    );\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return toTechFormat(this, \"EEE, dd LLL yyyy HH:mm:ss ZZZ\", false);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\n   * @return {string}\n   */\n  toSQLDate() {\n    if (!this.isValid) {\n      return null;\n    }\n    return toISODate(this, true);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'\n   * @example DateTime.utc().toSQL() //=> '05:15:16.345'\n   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'\n   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'\n   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\n   * @return {string}\n   */\n  toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {\n    let fmt = \"HH:mm:ss.SSS\";\n\n    if (includeZone || includeOffset) {\n      if (includeOffsetSpace) {\n        fmt += \" \";\n      }\n      if (includeZone) {\n        fmt += \"z\";\n      } else if (includeOffset) {\n        fmt += \"ZZ\";\n      }\n    }\n\n    return toTechFormat(this, fmt, true);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'\n   * @return {string}\n   */\n  toSQL(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for the REPL.\n   * @return {string}\n   */\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    if (this.isValid) {\n      return `DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`;\n    } else {\n      return `DateTime { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime.\n   * @return {number}\n   */\n  toMillis() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds of this DateTime.\n   * @return {number}\n   */\n  toSeconds() {\n    return this.isValid ? this.ts / 1000 : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds (as a whole number) of this DateTime.\n   * @return {number}\n   */\n  toUnixInteger() {\n    return this.isValid ? Math.floor(this.ts / 1000) : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a BSON serializable equivalent to this DateTime.\n   * @return {Date}\n   */\n  toBSON() {\n    return this.toJSDate();\n  }\n\n  /**\n   * Returns a JavaScript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {Object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = { ...this.c };\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a JavaScript Date equivalent to this DateTime.\n   * @return {Date}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = \"milliseconds\", opts = {}) {\n    if (!this.isValid || !otherDateTime.isValid) {\n      return Duration.invalid(\"created by diffing an invalid DateTime\");\n    }\n\n    const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };\n\n    const units = maybeArray(unit).map(Duration.normalizeUnit),\n      otherIsLater = otherDateTime.valueOf() > this.valueOf(),\n      earlier = otherIsLater ? this : otherDateTime,\n      later = otherIsLater ? otherDateTime : this,\n      diffed = diff(earlier, later, units, durOpts);\n\n    return otherIsLater ? diffed.negate() : diffed;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link DateTime#diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit = \"milliseconds\", opts = {}) {\n    return this.diff(DateTime.now(), unit, opts);\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Interval}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime.\n   * Higher-order units must also be identical for this function to return `true`.\n   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used\n   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit, opts) {\n    if (!this.isValid) return false;\n\n    const inputMs = otherDateTime.valueOf();\n    const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });\n    return (\n      adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts)\n    );\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.\n   * To compare just the millisecond values, use `+dt1 === +dt2`.\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return (\n      this.isValid &&\n      other.isValid &&\n      this.valueOf() === other.valueOf() &&\n      this.zone.equals(other.zone) &&\n      this.loc.equals(other.loc)\n    );\n  }\n\n  /**\n   * Returns a string representation of a this time relative to now, such as \"in two days\". Can only internationalize if your\n   * platform supports Intl.RelativeTimeFormat. Rounds down by default.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} [options.style=\"long\"] - the style of units, must be \"long\", \"short\", or \"narrow\"\n   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", or \"seconds\"\n   * @param {boolean} [options.round=true] - whether to round the numbers in the output.\n   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> \"in 1 day\"\n   * @example DateTime.now().setLocale(\"es\").toRelative({ days: 1 }) //=> \"dentro de 1 día\"\n   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: \"fr\" }) //=> \"dans 23 heures\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> \"2 days ago\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: \"hours\" }) //=> \"48 hours ago\"\n   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> \"1.5 days ago\"\n   */\n  toRelative(options = {}) {\n    if (!this.isValid) return null;\n    const base = options.base || DateTime.fromObject({}, { zone: this.zone }),\n      padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;\n    let units = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\"];\n    let unit = options.unit;\n    if (Array.isArray(options.unit)) {\n      units = options.unit;\n      unit = undefined;\n    }\n    return diffRelative(base, this.plus(padding), {\n      ...options,\n      numeric: \"always\",\n      units,\n      unit,\n    });\n  }\n\n  /**\n   * Returns a string representation of this date relative to today, such as \"yesterday\" or \"next month\".\n   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", or \"days\"\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> \"tomorrow\"\n   * @example DateTime.now().setLocale(\"es\").plus({ days: 1 }).toRelative() //=> \"\"mañana\"\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: \"fr\" }) //=> \"demain\"\n   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> \"2 days ago\"\n   */\n  toRelativeCalendar(options = {}) {\n    if (!this.isValid) return null;\n\n    return diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, {\n      ...options,\n      numeric: \"auto\",\n      units: [\"years\", \"months\", \"days\"],\n      calendary: true,\n    });\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime} the min DateTime, or undefined if called with no argument\n   */\n  static min(...dateTimes) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"min requires all arguments be DateTimes\");\n    }\n    return bestBy(dateTimes, (i) => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime} the max DateTime, or undefined if called with no argument\n   */\n  static max(...dateTimes) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"max requires all arguments be DateTimes\");\n    }\n    return bestBy(dateTimes, (i) => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromFormat()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options taken by fromFormat()\n   * @return {Object}\n   */\n  static fromFormatExplain(text, fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      });\n    return explainFromTokens(localeToUse, text, fmt);\n  }\n\n  /**\n   * @deprecated use fromFormatExplain instead\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    return DateTime.fromFormatExplain(text, fmt, options);\n  }\n\n  /**\n   * Build a parser for `fmt` using the given locale. This parser can be passed\n   * to {@link DateTime.fromFormatParser} to a parse a date in this format. This\n   * can be used to optimize cases where many dates need to be parsed in a\n   * specific format.\n   *\n   * @param {String} fmt - the format the string is expected to be in (see\n   * description)\n   * @param {Object} options - options used to set locale and numberingSystem\n   * for parser\n   * @returns {TokenParser} - opaque object to be used\n   */\n  static buildFormatParser(fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      });\n    return new TokenParser(localeToUse, fmt);\n  }\n\n  /**\n   * Create a DateTime from an input string and format parser.\n   *\n   * The format parser must have been created with the same locale as this call.\n   *\n   * @param {String} text - the string to parse\n   * @param {TokenParser} formatParser - parser from {@link DateTime.buildFormatParser}\n   * @param {Object} opts - options taken by fromFormat()\n   * @returns {DateTime}\n   */\n  static fromFormatParser(text, formatParser, opts = {}) {\n    if (isUndefined(text) || isUndefined(formatParser)) {\n      throw new InvalidArgumentError(\n        \"fromFormatParser requires an input string and a format parser\"\n      );\n    }\n    const { locale = null, numberingSystem = null } = opts,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      });\n\n    if (!localeToUse.equals(formatParser.locale)) {\n      throw new InvalidArgumentError(\n        `fromFormatParser called with a locale of ${localeToUse}, ` +\n          `but the format parser was created for ${formatParser.locale}`\n      );\n    }\n\n    const { result, zone, specificOffset, invalidReason } = formatParser.explainFromTokens(text);\n\n    if (invalidReason) {\n      return DateTime.invalid(invalidReason);\n    } else {\n      return parseDataToDateTime(\n        result,\n        zone,\n        opts,\n        `format ${formatParser.format}`,\n        text,\n        specificOffset\n      );\n    }\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link DateTime#toLocaleString} format like 10/14/1983\n   * @type {Object}\n   */\n  static get DATE_SHORT() {\n    return Formats.DATE_SHORT;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED() {\n    return Formats.DATE_MED;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED_WITH_WEEKDAY() {\n    return Formats.DATE_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_FULL() {\n    return Formats.DATE_FULL;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_HUGE() {\n    return Formats.DATE_HUGE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_SIMPLE() {\n    return Formats.TIME_SIMPLE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SECONDS() {\n    return Formats.TIME_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return Formats.TIME_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return Formats.TIME_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_SIMPLE() {\n    return Formats.TIME_24_SIMPLE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return Formats.TIME_24_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return Formats.TIME_24_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return Formats.TIME_24_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT() {\n    return Formats.DATETIME_SHORT;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return Formats.DATETIME_SHORT_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED() {\n    return Formats.DATETIME_MED;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return Formats.DATETIME_MED_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_WEEKDAY() {\n    return Formats.DATETIME_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL() {\n    return Formats.DATETIME_FULL;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return Formats.DATETIME_FULL_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE() {\n    return Formats.DATETIME_HUGE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return Formats.DATETIME_HUGE_WITH_SECONDS;\n  }\n}\n\n/**\n * @private\n */\nexport function friendlyDateTime(dateTimeish) {\n  if (DateTime.isDateTime(dateTimeish)) {\n    return dateTimeish;\n  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {\n    return DateTime.fromJSDate(dateTimeish);\n  } else if (dateTimeish && typeof dateTimeish === \"object\") {\n    return DateTime.fromObject(dateTimeish);\n  } else {\n    throw new InvalidArgumentError(\n      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`\n    );\n  }\n}\n","import { toAnnotation } from './toAnnotation';\nimport { toFlamegraph } from './toFlamegraph';\nimport { toLogs } from './toLogs';\nimport { toTable } from './toTable';\nimport { toTimeSeries } from './toTimeSeries';\nimport { toTraces } from './toTraces';\nimport { DateTime } from 'luxon';\nimport { FieldType } from '@grafana/data';\n\nexport interface Field {\n  name: string;\n  type: string;\n  values: Array<string | number | null | object>;\n  config: Record<string, unknown>;\n}\n\nexport const convertTimezonedDateToUTC = (localDateTime, timeZone) => {\n  // Define supported datetime formats\n  const formats = [\n    'yyyy-MM-dd HH:mm:ss.SSS',\n    'yyyy-MM-dd HH:mm:ss.SSSSSS',\n    'yyyy-MM-dd HH:mm:ss.SSSSSSSSS',\n    'yyyy-MM-dd HH:mm:ss',\n    'MM/dd/yyyy HH:mm',\n    'dd-MM-yyyy HH:mm:ss',\n    'yyyy/MM/dd HH:mm:ss',\n    'MMM dd, yyyy HH:mm:ss',\n    // Add more formats as needed\n  ];\n\n  // Attempt to parse using the supported formats\n  const parsedDateTime =\n    formats.map((format) => DateTime.fromFormat(localDateTime, format, { zone: timeZone })).find((dt) => dt.isValid) ||\n    DateTime.fromISO(localDateTime, { zone: timeZone });\n\n  // Validate the parsing result\n  if (!parsedDateTime.isValid) {\n    throw new Error(`Invalid datetime format: \"${localDateTime}\"`);\n  }\n\n  // Parse the datetime string in the specified timezone\n  return parsedDateTime.toUTC().toISO();\n};\n\nexport const convertTimezonedDateToUnixTimestamp = (localDateTime, timeZone) => {\n  // Define supported datetime formats\n  const formats = [\n    'yyyy-MM-dd HH:mm:ss.SSS',\n    'yyyy-MM-dd HH:mm:ss.SSSSSS',\n    'yyyy-MM-dd HH:mm:ss.SSSSSSSSS',\n    'yyyy-MM-dd HH:mm:ss',\n    'MM/dd/yyyy HH:mm',\n    'dd-MM-yyyy HH:mm:ss',\n    'yyyy/MM/dd HH:mm:ss',\n    'MMM dd, yyyy HH:mm:ss',\n    // Add more formats as needed\n  ];\n\n  // Attempt to parse using the supported formats\n  const parsedDateTime =\n    formats.map((format) => DateTime.fromFormat(localDateTime, format, { zone: timeZone })).find((dt) => dt.isValid) ||\n    DateTime.fromISO(localDateTime, { zone: timeZone });\n\n  // Validate the parsing result\n  if (!parsedDateTime.isValid) {\n    throw new Error(`Invalid datetime format: \"${localDateTime}\"`);\n  }\n\n  // Parse the datetime string in the specified timezone\n  return parsedDateTime.toUTC().toMillis();\n};\n\nexport const _toFieldType = (type: string, index?: number): FieldType | any => {\n  if (type.startsWith('Nullable(')) {\n    type = type.slice('Nullable('.length);\n    type = type.slice(0, -')'.length);\n  }\n\n  // Regex patterns\n  const dateTimeCombinedRegexTrimmed = /^\\s*DateTime(?:64)?\\s*\\(\\s*(?:\\d+\\s*,\\s*)?['\"]([^'\"]+)['\"]\\s*\\)\\s*$/i;\n\n  const dateTimeWithTZMatch = type.match(dateTimeCombinedRegexTrimmed);\n\n  let timezone;\n  if (dateTimeWithTZMatch) {\n    timezone = dateTimeWithTZMatch[1];\n    return { fieldType: FieldType.time, timezone };\n  }\n\n  if (type.startsWith('Date')) {\n    return FieldType.time;\n  }\n  // Assuming that fist column is time\n  // That's special case for 'Column:TimeStamp'\n  if (index === 0 && type.startsWith('UInt')) {\n    return FieldType.time;\n  }\n\n  if (type.startsWith('UInt') || type.startsWith('Int') || type.startsWith('Float') || type.startsWith('Decimal')) {\n    return FieldType.number;\n  }\n  if (type.startsWith('IPv')) {\n    return FieldType.other;\n  }\n  return FieldType.string;\n};\n\nexport default class SqlSeries {\n  refId: string;\n  series: any;\n  keys: any;\n  meta: any[];\n  tillNow: any;\n  from: any;\n  to: any;\n\n  /** @ngInject */\n  constructor(options: any) {\n    this.refId = options.refId;\n    this.series = options.series;\n    this.meta = options.meta;\n    this.tillNow = options.tillNow;\n    this.from = options.from;\n    this.to = options.to;\n    this.keys = options.keys || [];\n  }\n\n  toAnnotation = (input: any, meta: any): any[] => {\n    return toAnnotation(input, meta);\n  };\n\n  toFlamegraph = (): any => {\n    return toFlamegraph(this.series);\n  };\n\n  toLogs = (): any => {\n    const self = this;\n    return toLogs(self);\n  };\n\n  toTable = (): any => {\n    let self = this;\n    return toTable(self);\n  };\n\n  toTimeSeries = (extrapolate = true): any => {\n    let self = this;\n    return toTimeSeries(extrapolate, self);\n  };\n\n  toTraces = (): any => {\n    return toTraces(this.series, this.meta);\n  };\n}\n","import { Field } from './sql_series';\n\ninterface FlamegraphData {\n  label: string;\n  level: number;\n  value: string;\n  self: number;\n}\n\nexport const toFlamegraph = (inputSeries): any => {\n  // interface Field {\n  //   name: string;\n  //   type: string;\n  //   values: Array<string | number>;\n  //   config: {};\n  // }\n\n  try {\n    const series: FlamegraphData[] = inputSeries;\n    return transformTraceData(series);\n  } catch (error: any) {\n    return [\n      {\n        fields: [\n          {\n            name: 'error',\n            type: 'string',\n            values: [error?.message],\n            config: {},\n          },\n        ],\n        length: 1,\n      },\n    ];\n  }\n\n  function transformTraceData(inputData: FlamegraphData[]): any {\n    const sortedData = inputData.filter((item) => {\n      return !(Number(item.level) === 0);\n    });\n\n    const fields: { [key: string]: Field } = {\n      label: { name: 'label', type: 'string', values: ['all'], config: {} },\n      level: { name: 'level', type: 'number', values: [0], config: {} },\n      value: { name: 'value', type: 'number', values: [0], config: {} },\n      self: { name: 'self', type: 'number', values: [0], config: {} },\n    };\n\n    fields.value.values[0] = inputData\n      .filter((item) => Number(item.level) === 1)\n      .reduce((acc, item) => {\n        return acc + Number(item.value);\n      }, 0);\n\n    sortedData.forEach((item) => {\n      fields.label.values.push(item.label);\n      fields.level.values.push(Number(item.level));\n      fields.value.values.push(Number(item.value));\n      fields.self.values.push(item.self);\n    });\n\n    return [\n      {\n        fields: Object.values(fields),\n        length: inputData.length,\n      },\n    ];\n  }\n};\n","import { _toFieldType, convertTimezonedDateToUnixTimestamp, Field } from './sql_series';\nimport { FieldType } from '@grafana/data';\n\ninterface TraceData {\n  fields: Field[];\n  length: number;\n}\n\ninterface Trace {\n  traceID: string;\n  spanID: string;\n  parentSpanID?: string | null;\n  serviceName: string;\n  startTime: number | string;\n  duration: number;\n  operationName: string;\n  tags: object[];\n  serviceTags: object[];\n}\n\nexport const toTraces = (series: Trace[], meta: any): TraceData[] => {\n  function transformTraceData(inputData: Trace[]): TraceData[] {\n    let timeCol = meta.find((item) => item.name === 'startTime');\n    let timeColType = _toFieldType(timeCol.type || '');\n\n    const fields: { [key: string]: Field } = {\n      traceID: { name: 'traceID', type: 'string', values: [], config: {} },\n      spanID: { name: 'spanID', type: 'string', values: [], config: {} },\n      operationName: { name: 'operationName', type: 'string', values: [], config: {} },\n      parentSpanID: { name: 'parentSpanID', type: 'string', values: [], config: {} },\n      serviceName: { name: 'serviceName', type: 'string', values: [], config: {} },\n      startTime: { name: 'startTime', type: 'number', values: [], config: {} },\n      duration: { name: 'duration', type: 'number', values: [], config: {} },\n      tags: { name: 'tags', type: 'number', values: [], config: {} },\n      serviceTags: { name: 'serviceTags', type: 'number', values: [], config: {} },\n    };\n\n    inputData.forEach((span) => {\n      const isTimeWithTimezone = timeColType?.fieldType === FieldType.time;\n\n      let startTimeProcessed;\n      if (isTimeWithTimezone) {\n        startTimeProcessed = convertTimezonedDateToUnixTimestamp(span.startTime, timeColType.timezone);\n      }\n\n      fields.traceID.values.push(span.traceID);\n      fields.spanID.values.push(span.spanID);\n      fields.operationName.values.push(span.operationName);\n      fields.parentSpanID.values.push(span.parentSpanID || null); // Assuming null if undefined\n      fields.serviceName.values.push(span.serviceName);\n      fields.startTime.values.push(isTimeWithTimezone ? startTimeProcessed : parseInt(span.startTime.toString(), 10));\n      fields.duration.values.push(parseInt(span.duration.toString(), 10));\n      fields.tags.values.push(Object.entries(span.tags).map(([key, value]) => ({ key: key, value: value })));\n      fields.serviceTags.values.push(\n        Object.entries(span.serviceTags).map(([key, value]) => ({ key: key, value: value }))\n      );\n      // Handle other fields if required\n    });\n\n    return [\n      {\n        fields: Object.values(fields),\n        length: inputData.length,\n      },\n    ];\n  }\n\n  return transformTraceData(series);\n};\n","import { isArray, isEmpty, toLower } from 'lodash';\nconst wsRe = '\\\\s+';\nconst commentRe = \"--(([^'\\n]*[']){2})*[^'\\n]*(?=\\n|$)|\" + '/\\\\*(?:[^*]|\\\\*[^/])*\\\\*/';\nconst idRe = '[a-zA-Z_][a-zA-Z_0-9]*';\nconst intRe = '\\\\d+';\nconst powerIntRe = '\\\\d+e\\\\d+';\nconst floatRe = '\\\\d+\\\\.\\\\d*|\\\\d*\\\\.\\\\d+|\\\\d+[eE][-+]\\\\d+';\nconst stringRe = '(\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\')|(`(?:[^`\\\\\\\\]|\\\\\\\\.)*`)|(\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\")';\nconst binaryOpRe = '=>|\\\\|\\\\||>=|<=|==|!=|<>|->|[-+/%*=<>\\\\.!]';\nconst statementRe = '\\\\b(with|select|from|where|having|order by|group by|limit|format|prewhere|union all)\\\\b';\nconst joinsRe =\n  '\\\\b(' +\n  'left\\\\s+array\\\\s+join|' +\n  'array\\\\s+join|' +\n  'global\\\\s+any\\\\s+inner\\\\s+outer\\\\s+join|' +\n  'global\\\\s+any\\\\s+inner\\\\s+join|' +\n  'global\\\\s+any\\\\s+left\\\\s+outer\\\\s+join|' +\n  'global\\\\s+any\\\\s+left\\\\s+join|' +\n  'global\\\\s+any\\\\s+right\\\\s+outer\\\\s+join|' +\n  'global\\\\s+any\\\\s+right\\\\s+join|' +\n  'global\\\\s+any\\\\s+full\\\\s+outer\\\\s+join|' +\n  'global\\\\s+any\\\\s+full\\\\s+join|' +\n  'global\\\\s+any\\\\s+cross\\\\s+outer\\\\s+join|' +\n  'global\\\\s+any\\\\s+cross\\\\s+join|' +\n  'global\\\\s+any\\\\s+outer\\\\s+join|' +\n  'global\\\\s+any\\\\s+join|' +\n  'global\\\\s+all\\\\s+inner\\\\s+outer\\\\s+join|' +\n  'global\\\\s+all\\\\s+inner\\\\s+join|' +\n  'global\\\\s+all\\\\s+left\\\\s+outer\\\\s+join|' +\n  'global\\\\s+all\\\\s+left\\\\s+join|' +\n  'global\\\\s+all\\\\s+right\\\\s+outer\\\\s+join|' +\n  'global\\\\s+all\\\\s+right\\\\s+join|' +\n  'global\\\\s+all\\\\s+full\\\\s+outer\\\\s+join|' +\n  'global\\\\s+all\\\\s+full\\\\s+join|' +\n  'global\\\\s+all\\\\s+cross\\\\s+outer\\\\s+join|' +\n  'global\\\\s+all\\\\s+cross\\\\s+join|' +\n  'global\\\\s+all\\\\s+outer\\\\s+join|' +\n  'global\\\\s+all\\\\s+join|' +\n  'global\\\\s+inner\\\\s+outer\\\\s+join|' +\n  'global\\\\s+inner\\\\s+join|' +\n  'global\\\\s+left\\\\s+outer\\\\s+join|' +\n  'global\\\\s+left\\\\s+join|' +\n  'global\\\\s+right\\\\s+outer\\\\s+join|' +\n  'global\\\\s+right\\\\s+join|' +\n  'global\\\\s+full\\\\s+outer\\\\s+join|' +\n  'global\\\\s+full\\\\s+join|' +\n  'global\\\\s+cross\\\\s+outer\\\\s+join|' +\n  'global\\\\s+cross\\\\s+join|' +\n  'global\\\\s+outer\\\\s+join|' +\n  'global\\\\s+join|' +\n  'any\\\\s+inner\\\\s+outer\\\\s+join|' +\n  'any\\\\s+inner\\\\s+join|' +\n  'any\\\\s+left\\\\s+outer\\\\s+join|' +\n  'any\\\\s+left\\\\s+join|' +\n  'any\\\\s+right\\\\s+outer\\\\s+join|' +\n  'any\\\\s+right\\\\s+join|' +\n  'any\\\\s+full\\\\s+outer\\\\s+join|' +\n  'any\\\\s+full\\\\s+join|' +\n  'any\\\\s+cross\\\\s+outer\\\\s+join|' +\n  'any\\\\s+cross\\\\s+join|' +\n  'any\\\\s+outer\\\\s+join|' +\n  'any\\\\s+join|' +\n  'all\\\\s+inner\\\\s+outer\\\\s+join|' +\n  'all\\\\s+inner\\\\s+join|' +\n  'all\\\\s+left\\\\s+outer\\\\s+join|' +\n  'all\\\\s+left\\\\s+join|' +\n  'all\\\\s+right\\\\s+outer\\\\s+join|' +\n  'all\\\\s+right\\\\s+join|' +\n  'all\\\\s+full\\\\s+outer\\\\s+join|' +\n  'all\\\\s+full\\\\s+join|' +\n  'all\\\\s+cross\\\\s+outer\\\\s+join|' +\n  'all\\\\s+cross\\\\s+join|' +\n  'all\\\\s+outer\\\\s+join|' +\n  'all\\\\s+join|' +\n  'inner\\\\s+outer\\\\s+join|' +\n  'inner\\\\s+join|' +\n  'left\\\\s+outer\\\\s+join|' +\n  'left\\\\s+join|' +\n  'right\\\\s+outer\\\\s+join|' +\n  'right\\\\s+join|' +\n  'full\\\\s+outer\\\\s+join|' +\n  'full\\\\s+join|' +\n  'cross\\\\s+outer\\\\s+join|' +\n  'cross\\\\s+join|' +\n  'outer\\\\s+join|' +\n  'join' +\n  ')\\\\b';\nconst onJoinTokenRe = '\\\\b(using|on)\\\\b';\nconst tableNameRe = '([A-Za-z0-9_]+|[A-Za-z0-9_]+\\\\.[A-Za-z0-9_]+)';\nconst macroFuncRe =\n  '(\\\\$deltaColumnsAggregated|\\\\$increaseColumnsAggregated|\\\\$perSecondColumnsAggregated|\\\\$rateColumnsAggregated|\\\\$rateColumns|\\\\$perSecondColumns|\\\\$deltaColumns|\\\\$increaseColumns|\\\\$rate|\\\\$perSecond|\\\\$delta|\\\\$increase|\\\\$columnsMs|\\\\$columns)';\nconst condRe = '\\\\b(or|and)\\\\b';\nconst inRe = \"\\\\b(global in|global not in|not in|in)\\\\b(?:\\\\s+\\\\[\\\\s*(?:'[^']*'\\\\s*,\\\\s*)*'[^']*'\\\\s*\\\\])?\";\nconst closureRe = '[\\\\(\\\\)\\\\[\\\\]]';\nconst specCharsRe = '[,?:]';\nconst macroRe = '\\\\$[A-Za-z0-9_$]+';\nconst skipSpaceRe = '[\\\\(\\\\.! \\\\[]';\nconst tableFuncRe =\n  '\\\\b(sqlite|file|remote|remoteSecure|cluster|clusterAllReplicas|merge|numbers|url|mysql|postgresql|jdbc|odbc|hdfs|input|generateRandom|s3|s3Cluster)\\\\b';\nconst wsOnlyRe = new RegExp('^(?:' + wsRe + ')$');\nconst commentOnlyRe = new RegExp('^(?:' + commentRe + ')$');\nconst idOnlyRe = new RegExp('^(?:' + idRe + ')$');\nconst closureOnlyRe = new RegExp('^(?:' + closureRe + ')$');\nconst macroFuncOnlyRe = new RegExp('^(?:' + macroFuncRe + ')$');\nconst statementOnlyRe = new RegExp('^(?:' + statementRe + ')$', 'i');\nconst joinsOnlyRe = new RegExp('^(?:' + joinsRe + ')$', 'i');\nconst onJoinTokenOnlyRe = new RegExp('^(?:' + onJoinTokenRe + ')$', 'i');\nconst tableNameOnlyRe = new RegExp('^(?:' + tableNameRe + ')$', 'i');\nconst tableFuncOnlyRe = new RegExp('^(?:' + tableFuncRe + ')$', 'i');\nconst macroOnlyRe = new RegExp('^(?:' + macroRe + ')$', 'i');\nconst inOnlyRe = new RegExp('^(?:' + inRe + ')$', 'i');\nconst condOnlyRe = new RegExp('^(?:' + condRe + ')$', 'i');\nconst skipSpaceOnlyRe = new RegExp('^(?:' + skipSpaceRe + ')$');\n\nconst tokenRe = [\n  statementRe,\n  macroFuncRe,\n  joinsRe,\n  inRe,\n  wsRe,\n  commentRe,\n  idRe,\n  stringRe,\n  powerIntRe,\n  floatRe,\n  intRe,\n  binaryOpRe,\n  closureRe,\n  specCharsRe,\n  macroRe,\n].join('|');\n\nconst tabSize = '    '; // 4 spaces\nconst newLine = '\\n';\n\nclass Scanner {\n  tree: any;\n  rootToken: any;\n  token: any;\n  skipSpace: boolean | undefined;\n  re: RegExp | undefined;\n  expectedNext: boolean | undefined;\n\n  _sOriginal: any;\n  _s: any;\n\n  /** @ngInject */\n  constructor(s) {\n    this._sOriginal = s;\n    this.token = null;\n  }\n\n  raw() {\n    return this._sOriginal;\n  }\n\n  expectNext() {\n    if (!this.next()) {\n      throw 'expecting additional token at the end of query [' + this._sOriginal + ']';\n    }\n    return true;\n  }\n\n  next() {\n    while (this._next()) {\n      if (this.skipSpace && isWS(this.token)) {\n        // skip whitespace\n        continue;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  _next() {\n    if (this._s.length === 0) {\n      return false;\n    }\n\n    let r = this.re?.exec(this._s);\n\n    if (r === null) {\n      throw 'cannot find next token in [' + this._s + ']';\n    }\n\n    this.token = r && r[0];\n    this._s = this._s.substring(this.token.length);\n\n    return true;\n  }\n\n  Format() {\n    return print(this.toAST());\n  }\n\n  Print(ast) {\n    return print(ast);\n  }\n\n  push(argument) {\n    if (Array.isArray(this.tree[this.rootToken])) {\n      this.tree[this.rootToken].push(argument);\n    } else if (this.tree[this.rootToken] instanceof Object) {\n      if (!this.tree[this.rootToken].hasOwnProperty('aliases')) {\n        this.tree[this.rootToken].aliases = [];\n      }\n      this.tree[this.rootToken].aliases.push(argument);\n    }\n    this.expectedNext = false;\n  }\n\n  setRoot(token) {\n    this.rootToken = token.toLowerCase();\n    this.tree[this.rootToken] = [];\n    this.expectedNext = true;\n  }\n\n  isExpectedNext(): boolean {\n    let v = this.expectedNext;\n    this.expectedNext = false;\n    return v as boolean;\n  }\n\n  appendToken(argument): string {\n    return argument === '' || isSkipSpace(argument[argument.length - 1]) ? this.token : ' ' + this.token;\n  }\n\n  toAST() {\n    this._s = this._sOriginal;\n    this.tree = {};\n    this.setRoot('root');\n    this.expectedNext = false;\n    this.skipSpace = true;\n    this.re = new RegExp('^(?:' + tokenRe + ')', 'i');\n    let subQuery = '',\n      argument = '';\n\n    while (this.next()) {\n      if (!this.isExpectedNext() && isStatement(this.token) && !this.tree.hasOwnProperty(toLower(this.token))) {\n        if (this.token.toUpperCase() === 'WITH' && this.rootToken === 'order by') {\n          argument += this.appendToken(argument);\n          continue;\n        }\n        if (!Scanner.isClosured(argument)) {\n          argument += this.appendToken(argument);\n          continue;\n        }\n        if (argument.length > 0) {\n          this.push(argument);\n          argument = '';\n        }\n        this.setRoot(this.token);\n        continue;\n      }\n\n      if (this.token === ',' && Scanner.isClosured(argument)) {\n        this.push(argument);\n        argument = '';\n        if (this.rootToken === 'where') {\n          this.push(this.token);\n        }\n        this.expectedNext = true;\n        continue;\n      }\n\n      if (isClosureChars(this.token) && this.rootToken === 'from') {\n        subQuery = betweenBraces(this._s);\n        if (!isTableFunc(argument)) {\n          this.tree[this.rootToken] = toAST(subQuery);\n        } else {\n          this.push(argument + '(' + subQuery + ')');\n          argument = '';\n        }\n        this._s = this._s.substring(subQuery.length + 1);\n        continue;\n      }\n\n      if (isMacroFunc(this.token)) {\n        let func = this.token;\n        if (!this.next()) {\n          throw 'wrong function signature for `' + func + '` at [' + this._s + ']';\n        }\n\n        subQuery = betweenBraces(this._s);\n        let subAST = toAST(subQuery);\n        if (isSet(subAST, 'root')) {\n          this.tree[func] = subAST['root'].map(function (item) {\n            return item;\n          });\n        } else {\n          this.tree[func] = subAST;\n        }\n        this._s = this._s.substring(subQuery.length + 1);\n\n        // macro funcs are used instead of SELECT statement\n        this.tree['select'] = [];\n        continue;\n      }\n\n      if (isIn(this.token)) {\n        argument += ' ' + this.token;\n        if (!this.next()) {\n          throw 'wrong in signature for `' + argument + '` at [' + this._s + ']';\n        }\n\n        if (isClosureChars(this.token)) {\n          subQuery = betweenBraces(this._s);\n          let subAST = toAST(subQuery);\n          if (isSet(subAST, 'root')) {\n            argument +=\n              ' (' +\n              subAST['root'].map(function (item) {\n                return item;\n              });\n            argument = argument + ')';\n          } else {\n            argument += ' (' + newLine + print(subAST, tabSize) + ')';\n            if (this.rootToken !== 'select') {\n              this.push(argument);\n              argument = '';\n            }\n          }\n          this._s = this._s.substring(subQuery.length + 1);\n        } else {\n          argument += ' ' + this.token;\n        }\n        continue;\n      }\n\n      if (isCond(this.token) && (this.rootToken === 'where' || this.rootToken === 'prewhere')) {\n        if (Scanner.isClosured(argument)) {\n          this.push(argument);\n          argument = this.token;\n        } else {\n          argument += ' ' + this.token;\n        }\n        continue;\n      }\n\n      if (isJoin(this.token)) {\n        argument = this.parseJOIN(argument);\n        continue;\n      }\n\n      if (this.rootToken === 'union all') {\n        let statement = 'union all';\n        this._s = this.token + ' ' + this._s;\n        let subQueryPos = this._s.toLowerCase().indexOf(statement);\n        while (subQueryPos !== -1) {\n          let subQuery = this._s.substring(0, subQueryPos);\n          let ast = toAST(subQuery);\n          this.tree[statement].push(ast);\n          this._s = this._s.substring(subQueryPos + statement.length, this._s.length);\n          subQueryPos = this._s.toLowerCase().indexOf(statement);\n        }\n        let ast = toAST(this._s);\n        this._s = '';\n        this.tree[statement].push(ast);\n        continue;\n      }\n\n      if (isComment(this.token)) {\n        //comment is part of push element, and will be add after next statement\n        argument += this.token + '\\n';\n        continue;\n      }\n\n      if (isClosureChars(this.token) || this.token === '.') {\n        argument += this.token;\n        continue;\n      }\n\n      if (this.token === ',') {\n        argument += this.token + ' ';\n        continue;\n      }\n\n      argument += this.appendToken(argument);\n    }\n\n    if (argument !== '') {\n      this.push(argument);\n    }\n\n    return this.tree;\n  }\n\n  parseJOIN(argument) {\n    if (!this.tree.hasOwnProperty('join')) {\n      this.tree['join'] = [];\n    }\n    let joinType = this.token,\n      source;\n    if (!this.next()) {\n      throw 'wrong join signature for `' + joinType + '` at [' + this._s + ']';\n    }\n\n    if (isClosureChars(this.token)) {\n      let subQuery = betweenBraces(this._s);\n      source = toAST(subQuery);\n      this._s = this._s.substring(subQuery.length + 1);\n      this.token = '';\n    } else {\n      source = '';\n      do {\n        if (\n          isID(this.token) &&\n          !isTable(source) &&\n          this.token.toUpperCase() !== 'AS' &&\n          !onJoinTokenOnlyRe.test(this.token)\n        ) {\n          source += this.token;\n        } else if (isMacro(this.token)) {\n          source += this.token;\n        } else if (this.token === '.') {\n          source += this.token;\n        } else {\n          break;\n        }\n      } while ((joinType.toUpperCase().indexOf('ARRAY JOIN') === -1 && this.expectNext()) || this.next());\n      if (this.token === source) {\n        this.token = '';\n      }\n      source = [source];\n    }\n    // @ts-ignore\n    let joinAST: null = { type: joinType, source: source, aliases: [], using: [], on: [] };\n    do {\n      if (this.token !== '' && !onJoinTokenOnlyRe.test(this.token)) {\n        // @ts-ignore\n        joinAST.aliases.push(this.token);\n      } else if (onJoinTokenOnlyRe.test(this.token)) {\n        break;\n      }\n    } while ((joinType.toUpperCase().indexOf('ARRAY JOIN') === -1 && this.expectNext()) || this.next());\n    const joinExprToken = toLower(this.token);\n    let joinConditions = '';\n    while (this.next()) {\n      if (isStatement(this.token)) {\n        if (argument !== '') {\n          this.push(argument);\n          argument = '';\n        }\n        this.setRoot(this.token);\n        break;\n      }\n      if (isJoin(this.token)) {\n        if (joinConditions !== '') {\n          // @ts-ignore\n          joinAST.on.push(joinConditions);\n          joinConditions = '';\n        }\n        this.tree['join'].push(joinAST);\n        joinAST = null;\n        argument = this.parseJOIN(argument);\n        break;\n      }\n\n      if (joinExprToken === 'using') {\n        if (!isID(this.token)) {\n          continue;\n        }\n\n        // @ts-ignore\n        joinAST.using.push(this.token);\n      } else {\n        if (isCond(this.token)) {\n          joinConditions += ' ' + this.token.toUpperCase() + ' ';\n        } else {\n          joinConditions += this.token;\n        }\n      }\n    }\n    if (joinAST != null) {\n      if (joinConditions !== '') {\n        // @ts-ignore\n        joinAST.on.push(joinConditions);\n      }\n      this.tree['join'].push(joinAST);\n    }\n    return argument;\n  }\n\n  static RemoveComments(query) {\n    return query.replace(new RegExp(commentRe, 'g'), '');\n  }\n\n  static AddMetadata(query) {\n    return '/* grafana dashboard=$__dashboard, user=$__user */\\n' + query;\n  }\n\n  static isClosured(str) {\n    const stack: string[] = [];\n    let isInQuote = false;\n    let quoteType = null;\n\n    const openBrackets = {\n      '(': ')',\n      '[': ']',\n      '{': '}',\n    };\n\n    const closeBrackets = {\n      ')': '(',\n      ']': '[',\n      '}': '{',\n    };\n\n    for (let i = 0; i < str.length; i++) {\n      const char = str[i];\n\n      // Handle quotes\n      if ((char === \"'\" || char === '\"' || char === '`') && (i === 0 || str[i - 1] !== '\\\\')) {\n        if (!isInQuote) {\n          isInQuote = true;\n          quoteType = char;\n        } else if (char === quoteType) {\n          isInQuote = false;\n          quoteType = null;\n        }\n        continue;\n      }\n\n      // Skip characters inside quotes\n      if (isInQuote) {\n        continue;\n      }\n\n      // Handle brackets\n      if (char in openBrackets) {\n        stack.push(char);\n      } else if (char in closeBrackets) {\n        const lastOpen = stack.pop();\n        if (lastOpen !== closeBrackets[char]) {\n          return false;\n        }\n      }\n    }\n\n    return stack.length === 0;\n  }\n}\nconst isSkipSpace = (token: string) => skipSpaceOnlyRe.test(token);\nconst isCond = (token: string) => condOnlyRe.test(token);\nconst isIn = (token: string) => inOnlyRe.test(token);\nconst isJoin = (token: string) => joinsOnlyRe.test(token);\nconst isTable = (token: string) => tableNameOnlyRe.test(token);\nconst isWS = (token: string) => wsOnlyRe.test(token);\nconst isMacroFunc = (token: string) => macroFuncOnlyRe.test(token);\nconst isMacro = (token: string) => macroOnlyRe.test(token);\nconst isComment = (token: string) => commentOnlyRe.test(token);\nconst isID = (token: string) => idOnlyRe.test(token);\nconst isStatement = (token: string) => statementOnlyRe.test(token);\nconst isTableFunc = (token: string) => tableFuncOnlyRe.test(token);\nconst isClosureChars = (token: string) => closureOnlyRe.test(token);\n\nfunction printItems(items, tab = '', separator = '') {\n  let result = '';\n  if (isArray(items)) {\n    if (items.length === 1) {\n      result += ' ' + items[0] + newLine;\n    } else {\n      result += newLine;\n      items.forEach(function (item, i) {\n        result += tab + tabSize + item;\n        if (i !== items.length - 1) {\n          result += separator;\n          result += newLine;\n        }\n      });\n    }\n  } else {\n    result = newLine + '(' + newLine + print(items, tab + tabSize) + newLine + ')';\n  }\n\n  return result;\n}\n\nfunction toAST(s) {\n  let scanner = new Scanner(s);\n  return scanner.toAST();\n}\n\nfunction isSet(obj, prop) {\n  return obj.hasOwnProperty(prop) && !isEmpty(obj[prop]);\n}\n\nfunction betweenBraces(query) {\n  let openBraces = 1,\n    subQuery = '';\n  for (let i = 0; i < query.length; i++) {\n    if (query.charAt(i) === '(') {\n      openBraces++;\n    }\n    if (query.charAt(i) === ')') {\n      if (openBraces === 1) {\n        subQuery = query.substring(0, i);\n        break;\n      }\n      openBraces--;\n    }\n  }\n  return subQuery;\n}\n\n// see https://clickhouse.tech/docs/en/sql-reference/statements/select/\nfunction print(AST, tab = '') {\n  let result = '';\n  if (isSet(AST, 'root')) {\n    result += printItems(AST.root, '\\n', '\\n');\n  }\n\n  if (isSet(AST, '$rate')) {\n    result += tab + '$rate(';\n    result += printItems(AST.$rate, tab, ',') + ')';\n  }\n\n  if (isSet(AST, '$perSecond')) {\n    result += tab + '$perSecond(';\n    result += printItems(AST.$perSecond, tab, ',') + ')';\n  }\n\n  if (isSet(AST, '$perSecondColumns')) {\n    result += tab + '$perSecondColumns(';\n    result += printItems(AST.$perSecondColumns, tab, ',') + ')';\n  }\n\n  if (isSet(AST, '$perSecondColumnsAggregated')) {\n    result += tab + '$perSecondColumnsAggregated(';\n    result += printItems(AST.$perSecondColumnsAggregated, tab, ',') + ')';\n  }\n\n  if (isSet(AST, '$delta')) {\n    result += tab + '$delta(';\n    result += printItems(AST.$delta, tab, ',') + ')';\n  }\n\n  if (isSet(AST, '$deltaColumns')) {\n    result += tab + '$deltaColumns(';\n    result += printItems(AST.$deltaColumns, tab, ',') + ')';\n  }\n\n  if (isSet(AST, '$deltaColumnsAggregated')) {\n    result += tab + '$deltaColumnsAggregated(';\n    result += printItems(AST.$deltaColumnsAggregated, tab, ',') + ')';\n  }\n\n  if (isSet(AST, '$increase')) {\n    result += tab + '$increase(';\n    result += printItems(AST.$delta, tab, ',') + ')';\n  }\n\n  if (isSet(AST, '$increaseColumns')) {\n    result += tab + '$increaseColumns(';\n    result += printItems(AST.$deltaColumns, tab, ',') + ')';\n  }\n\n  if (isSet(AST, '$increaseColumnsAggregated')) {\n    result += tab + '$increaseColumnsAggregated(';\n    result += printItems(AST.$increaseColumnsAggregated, tab, ',') + ')';\n  }\n\n  if (isSet(AST, '$columns')) {\n    result += tab + '$columns(';\n    result += printItems(AST.$columns, tab, ',') + ')';\n  }\n\n  if (isSet(AST, '$columnsMs')) {\n    result += tab + '$columnsMs(';\n    result += printItems(AST.$columnsMs, tab, ',') + ')';\n  }\n\n  if (isSet(AST, '$rateColumns')) {\n    result += tab + '$rateColumns(';\n    result += printItems(AST.$rateColumns, tab, ',') + ')';\n  }\n\n  if (isSet(AST, '$rateColumnsAggregated')) {\n    result += tab + '$rateColumnsAggregated(';\n    result += printItems(AST.$rateColumnsAggregated, tab, ',') + ')';\n  }\n\n  if (isSet(AST, 'with')) {\n    result += tab + 'WITH';\n    result += printItems(AST.with, tab, ',');\n  }\n\n  if (isSet(AST, 'select')) {\n    result += tab + 'SELECT';\n    result += printItems(AST.select, tab, ',');\n  }\n\n  if (isSet(AST, 'from')) {\n    result += newLine + tab + 'FROM';\n    result += printItems(AST.from, tab);\n  }\n\n  if (isSet(AST, 'aliases')) {\n    result += printItems(AST.aliases, '', ' ');\n  }\n\n  if (isSet(AST, 'join')) {\n    AST.join.forEach(function (item) {\n      result +=\n        newLine +\n        tab +\n        item.type.toUpperCase() +\n        printItems(item.source, tab) +\n        ' ' +\n        printItems(item.aliases, '', ' ');\n      if (item.using.length > 0) {\n        result += ' USING ' + printItems(item.using, '', ' ');\n      } else if (item.on.length > 0) {\n        result += ' ON ' + printItems(item.on, tab, ' ');\n      }\n    });\n  }\n\n  if (isSet(AST, 'prewhere')) {\n    result += newLine + tab + 'PREWHERE';\n    result += printItems(AST.prewhere, tab);\n  }\n\n  if (isSet(AST, 'where')) {\n    result += newLine + tab + 'WHERE';\n    result += printItems(AST.where, tab);\n  }\n\n  if (isSet(AST, 'group by')) {\n    result += newLine + tab + 'GROUP BY';\n    result += printItems(AST['group by'], tab, ',');\n  }\n\n  if (isSet(AST, 'having')) {\n    result += newLine + tab + 'HAVING';\n    result += printItems(AST.having, tab);\n  }\n\n  if (isSet(AST, 'order by')) {\n    result += newLine + tab + 'ORDER BY';\n    result += printItems(AST['order by'], tab, ',');\n  }\n\n  if (isSet(AST, 'limit')) {\n    result += newLine + tab + 'LIMIT';\n    result += printItems(AST.limit, tab, ',');\n  }\n\n  if (isSet(AST, 'union all')) {\n    AST['union all'].forEach(function (v) {\n      result += newLine + newLine + tab + 'UNION ALL' + newLine + newLine;\n      result += print(v, tab);\n    });\n  }\n\n  if (isSet(AST, 'format')) {\n    result += newLine + tab + 'FORMAT';\n    result += printItems(AST.format, tab);\n  }\n\n  return result;\n}\n\nexport default Scanner;\n","import { DataSourceJsonData } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\n\n/*\n * Value that is used in QueryEditor to switch between builder and SQL modes\n */\nexport enum EditorMode {\n  SQL = 'sql',\n  Builder = 'builder',\n}\n\nexport enum DateTimeColumnSelectorType {\n  DateTime = 'datetime',\n  Date = 'date',\n}\n\nexport enum TimestampFormat {\n  DateTime = 'DATETIME',\n  DateTime64 = 'DATETIME64',\n  TimeStamp = 'TIMESTAMP',\n  TimeStamp64_3 = 'TIMESTAMP64_3',\n  TimeStamp64_6 = 'TIMESTAMP64_6',\n  TimeStamp64_9 = 'TIMESTAMP64_9',\n  Float = 'FLOAT',\n}\n\nexport interface CHQuery extends DataQuery {\n  query: string;\n  format: string;\n  extrapolate: boolean;\n  rawQuery: string;\n  editorMode?: EditorMode;\n  database?: string;\n  table?: string;\n  initialized?: boolean;\n  adHocFilters: any[];\n\n  dateTimeType?: string;\n  dateColDataType?: string;\n  dateTimeColDataType?: string;\n\n  skip_comments?: boolean;\n  add_metadata?: boolean;\n\n  round?: string;\n  intervalFactor?: number;\n  interval?: string;\n  formattedQuery?: string;\n  contextWindowSize?: string;\n  adHocValuesQuery?: string;\n  useWindowFuncForMacros?: boolean;\n}\n\n/**\n * These are options configured for each DataSource instance\n */\nexport interface CHDataSourceOptions extends DataSourceJsonData {\n  useYandexCloudAuthorization?: boolean;\n  xHeaderUser?: string;\n  xClickHouseSSLCertificateAuth?: boolean;\n  addCorsHeader?: boolean;\n  usePOST?: boolean;\n  defaultDatabase?: string;\n  useCompression?: boolean;\n  compressionType?: string;\n  // @todo remove workaround after merge https://github.com/grafana/grafana/pull/80858, also remove from src/plugin.json\n  dataSourceUrl?: string;\n  useDefaultConfiguration?: boolean;\n  defaultDateTime64?: string;\n  defaultDateTime?: string;\n  defaultUint32?: string;\n  defaultDateDate32?: string;\n  defaultDateTimeType?: string;\n  defaultFloat?: string;\n  defaultTimeStamp64_3?: string;\n  defaultTimeStamp64_6?: string;\n  defaultTimeStamp64_9?: string;\n  adHocValuesQuery?: string;\n  adHocHideTableNames?: boolean;\n  contextWindowSize?: string;\n  useWindowFuncForMacros?: boolean;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\n\nexport const DEFAULT_QUERY: CHQuery = {\n  refId: '',\n  query: 'SELECT 1',\n  format: 'time_series',\n  extrapolate: false,\n  rawQuery: '',\n  editorMode: EditorMode.SQL,\n  adHocFilters: [],\n};\n","import { each, isEmpty, isString, map } from 'lodash';\nimport { dateMath, TypedVariableModel } from '@grafana/data';\nimport dayjs from 'dayjs';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { TimestampFormat } from '../../types/types';\n\nexport class SqlQueryHelper {\n  static convertTimestamp(date: any) {\n    if (isString(date)) {\n      date = dateMath.parse(date, true);\n    }\n\n    return Math.floor(date.valueOf() / 1000);\n  }\n\n  static round(date: any, round: number): any {\n    if (round === 0) {\n      return date;\n    }\n\n    if (isString(date)) {\n      date = dateMath.parse(date, true);\n    }\n\n    let coefficient = 1000 * round;\n    let rounded = Math.floor(date.valueOf() / coefficient) * coefficient;\n    return dayjs(rounded);\n  }\n\n  static convertInterval(interval: any, intervalFactor: number, ms?: boolean): number {\n    const durationSplitRegexp = /(\\d+)(ms|s|m|h|d|w|M|y)/;\n    const match = interval?.match(durationSplitRegexp);\n\n    if (!interval || typeof interval !== 'string' || interval === '' || !match) {\n      return 0;\n    }\n\n    const value = parseInt(match[1], 10);\n    const unit = match[2];\n\n    const unitsInSeconds: Record<string, number> = {\n      s: 1,\n      m: 60,\n      h: 3600,\n      d: 86400,\n      w: 604800,\n      M: 2592000,\n      y: 31536000,\n      ms: 0.001,\n    };\n\n    if (!(unit in unitsInSeconds)) {\n      throw new Error('Invalid unit in interval: ' + unit);\n    }\n\n    let result = value * unitsInSeconds[unit];\n\n    if (ms) {\n      result *= 1000;\n    }\n\n    return Math.ceil(result * intervalFactor);\n  }\n\n  static conditionalTest(query: string, templateSrv: TemplateSrv) {\n    let macros = '$conditionalTest(';\n    let openMacros = query.indexOf(macros);\n    while (openMacros !== -1) {\n      let r = SqlQueryHelper.betweenBraces(query.substring(openMacros + macros.length, query.length));\n      if (r.error.length > 0) {\n        throw { message: '$conditionalIn macros error: ' + r.error };\n      }\n      let arg = r.result;\n      // first parameters is an expression and require some complex parsing,\n      // so parse from the end where you know that the last parameters is a comma with a variable\n      let param1 = arg.substring(0, arg.lastIndexOf(',')).trim();\n      let param2 = arg.substring(arg.lastIndexOf(',') + 1).trim();\n      // remove the $ from the variable\n      let varInParam = param2.substring(1);\n      let done = 0;\n      //now find in the list of variable what is the value\n      let variables = templateSrv.getVariables();\n      for (let i = 0; i < variables.length; i++) {\n        let varG: TypedVariableModel = variables[i];\n        if (varG.name === varInParam) {\n          let closeMacros = openMacros + macros.length + r.result.length + 1;\n          done = 1;\n\n          const value: any = 'current' in varG ? varG.current.value : '';\n\n          if (\n            // for query variable when all is selected\n            // may be add another test on the all activation may be wise.\n            (varG.type === 'query' &&\n              ((value.length === 1 && value[0] === '$__all') || (typeof value === 'string' && value === '$__all'))) ||\n            // for multi-value drop-down when no one value is select, fix https://github.com/Altinity/clickhouse-grafana/issues/485\n            (typeof value === 'object' && value.length === 0) ||\n            // for textbox variable when nothing is entered\n            (['textbox', 'custom'].includes(varG.type) && ['', undefined, null].includes(value))\n          ) {\n            query = query.substring(0, openMacros) + ' ' + query.substring(closeMacros, query.length);\n          } else {\n            // replace of the macro with standard test.\n            query = query.substring(0, openMacros) + ' ' + param1 + ' ' + query.substring(closeMacros, query.length);\n          }\n          break;\n        }\n      }\n      if (done === 0) {\n        throw { message: '$conditionalTest macros error cannot find referenced variable: ' + param2 };\n      }\n      openMacros = query.indexOf(macros);\n    }\n    return query;\n  }\n\n  static unescape(query: string) {\n    const macros = '$unescape(';\n    let openMacros = query.indexOf(macros);\n    while (openMacros !== -1) {\n      let r = SqlQueryHelper.betweenBraces(query.substring(openMacros + macros.length, query.length));\n      if (r.error.length > 0) {\n        throw { message: '$unescape macros error: ' + r.error };\n      }\n      let arg = r.result;\n      arg = arg.replace(/'+/g, '');\n      let closeMacros = openMacros + macros.length + r.result.length + 1;\n      query = query.substring(0, openMacros) + arg + query.substring(closeMacros, query.length);\n      openMacros = query.indexOf(macros);\n    }\n    return query;\n  }\n\n  static betweenBraces(query: string): boolean | any {\n    let r = {\n      result: '',\n      error: '',\n    };\n    let openBraces = 1;\n    for (let i = 0; i < query.length; i++) {\n      if (query.charAt(i) === '(') {\n        openBraces++;\n      }\n      if (query.charAt(i) === ')') {\n        openBraces--;\n        if (openBraces === 0) {\n          r.result = query.substring(0, i);\n          break;\n        }\n      }\n    }\n    if (openBraces > 1) {\n      r.error = 'missing parentheses';\n    }\n    return r;\n  }\n\n  static interpolateQueryExpr(value: any, variable: any, defaultFormatFn: any) {\n    // if no (`multiselect` or `include all`) and variable is not Array - do not escape\n    if (!variable.multi && !variable.includeAll && !Array.isArray(value)) {\n      return value;\n    }\n    if (!Array.isArray(value)) {\n      return SqlQueryHelper.clickhouseEscape(value, variable);\n    }\n    let escapedValues = value.map(function (v) {\n      return SqlQueryHelper.clickhouseEscape(v, variable);\n    });\n    return escapedValues.join(',');\n  }\n\n  static clickhouseOperator(value: string): string {\n    switch (value) {\n      case '=':\n      case '!=':\n      case '>':\n      case '<':\n        return value;\n      case '=~':\n        return 'LIKE';\n      case '!~':\n        return 'NOT LIKE';\n      default:\n        console.warn('adhoc filters: got unsupported operator `' + value + '`');\n        return value;\n    }\n  }\n\n  static clickhouseEscape(value: any, variable: any): any {\n    const NumberOnlyRegexp = /^[+-]?\\d+(\\.\\d+)?$/;\n\n    let returnAsIs = true;\n    let returnAsArray = false;\n    // if at least one of options is not digit or is array\n    each(variable.options, function (opt): boolean {\n      if (typeof opt.value === 'string' && opt.value === '$__all') {\n        return true;\n      }\n      if (typeof opt.value === 'number') {\n        returnAsIs = true;\n        return false;\n      }\n      if (typeof opt.value === 'string' && !NumberOnlyRegexp.test(opt.value)) {\n        returnAsIs = false;\n        return false;\n      }\n      if (opt.value instanceof Array) {\n        returnAsArray = true;\n        each(opt.value, function (v): boolean {\n          if (typeof v === 'string' && !NumberOnlyRegexp.test(v)) {\n            returnAsIs = false;\n            return false;\n          }\n          return true;\n        });\n        return false;\n      }\n      return true;\n    });\n\n    if (value instanceof Array && returnAsArray) {\n      let arrayValues = map(value, function (v) {\n        return SqlQueryHelper.clickhouseEscape(v, variable);\n      });\n      return '[' + arrayValues.join(', ') + ']';\n    } else if (typeof value === 'number' || (returnAsIs && typeof value === 'string' && NumberOnlyRegexp.test(value))) {\n      return value;\n    } else {\n      return \"'\" + value.replace(/[\\\\']/g, '\\\\$&') + \"'\";\n    }\n  }\n\n  static contain(obj: any, field: string): boolean {\n    return obj.hasOwnProperty(field) && !isEmpty(obj[field]);\n  }\n\n  static target(from: string, target: any): [string, string] {\n    if (from.length === 0) {\n      return ['', ''];\n    }\n    let targetTable, targetDatabase;\n    let parts = from.split('.');\n    switch (parts.length) {\n      case 1:\n        targetTable = parts[0];\n        targetDatabase = target.database;\n        break;\n      case 2:\n        targetDatabase = parts[0];\n        targetTable = parts[1];\n        break;\n      default:\n        throw { message: 'FROM expression \"' + from + '\" cant be parsed' };\n    }\n\n    if (targetTable === '$table') {\n      targetTable = target.table;\n    }\n    return [targetDatabase, targetTable];\n  }\n\n  static getFilterSqlForDateTime(columnName: string, dateTimeType: string) {\n    const getConvertFn = (dateTimeType: string) => {\n      return function (t: string): string {\n        if (dateTimeType === TimestampFormat.DateTime) {\n          return \"toDateTime(\" + t + \")\"\n        }\n        if (dateTimeType === TimestampFormat.DateTime64) {\n          return \"toDateTime64(\" + t + \",3)\"\n        }\n        if (dateTimeType === TimestampFormat.TimeStamp64_3) {\n          return \"1000*\" + t\n        }\n        if (dateTimeType === TimestampFormat.TimeStamp64_6) {\n          return \"1000000*\" + t\n        }\n        if (dateTimeType === TimestampFormat.TimeStamp64_9) {\n          return \"1000000000*\" + t\n        }\n        return t\n      };\n    };\n\n    const convertFn = getConvertFn(dateTimeType);\n    let from = '$from';\n    let to = '$to';\n    if (dateTimeType === TimestampFormat.DateTime64) {\n      from = '$__from/1000';\n      to = '$__to/1000';\n    }\n    return `${columnName} >= ${convertFn(from)} AND ${columnName} <= ${convertFn(to)}`;\n  }\n\n  static getFilterSqlForDateTimeMs(columnName: string, dateTimeType: string) {\n    const getConvertFn = (dateTimeType: string) => {\n      return function (t: string): string {\n        if (dateTimeType === TimestampFormat.DateTime) {\n          return \"toDateTime(\" + t + \")\"\n        }\n\n        if (dateTimeType === TimestampFormat.DateTime64) {\n          return \"toDateTime64(\" + t + \",3)\"\n        }\n        if (dateTimeType === TimestampFormat.Float) {\n          return t + \"/1000\"\n        }\n        if (dateTimeType === TimestampFormat.TimeStamp) {\n          return t + \"/1000\"\n        }\n        if (dateTimeType === TimestampFormat.TimeStamp64_3) {\n          return t\n        }\n        if (dateTimeType === TimestampFormat.TimeStamp64_6) {\n          return \"1000*\" + t\n        }\n        if (dateTimeType === TimestampFormat.TimeStamp64_9) {\n          return \"1000000*\" + t\n        }\n        return t;\n      };\n    };\n\n    const convertFn = getConvertFn(dateTimeType);\n    let from = \"$__from\";\n    let to = \"$__to\";\n    if (dateTimeType === TimestampFormat.DateTime || dateTimeType === TimestampFormat.DateTime64) {\n      from = '$__from/1000';\n      to = '$__to/1000';\n    }\n    return `${columnName} >= ${convertFn(from)} AND ${columnName} <= ${convertFn(to)}`;\n  }\n\n  static escapeTableIdentifier(identifier: string): string {\n    return /^[a-zA-Z][0-9a-zA-Z_]*$/.test(identifier) ? identifier : `\\`${identifier.replace(/`/g, '\\\\`')}\\``;\n  }\n\n  static escapeIdentifier(identifier: string): string {\n    return /^[a-zA-Z][0-9a-zA-Z_]*$/.test(identifier) || /\\(.*\\)/.test(identifier) || /[\\/*+\\-]/.test(identifier)\n      ? identifier\n      : `\"${identifier.replace(/\"/g, '\\\\\"')}\"`;\n  }\n}\n","import { each } from 'lodash';\nimport { SqlQueryHelper } from './sql-query-helper';\nimport { TimestampFormat } from '../../types/types';\n\nexport interface RawTimeRange {\n  from: any | string;\n  to: any | string;\n}\n\nexport interface TimeRange {\n  from: any;\n  to: any;\n  raw: RawTimeRange;\n}\nexport default class SqlQueryMacros {\n  static applyMacros(query: string, ast: any, useWindowFunc: boolean): string {\n    if (SqlQueryHelper.contain(ast, '$columns')) {\n      return SqlQueryMacros.columns(query, ast, useWindowFunc);\n    }\n    if (SqlQueryHelper.contain(ast, '$columnsMs')) {\n      return SqlQueryMacros.columnsMs(query, ast, useWindowFunc);\n    }\n    if (SqlQueryHelper.contain(ast, '$rate')) {\n      return SqlQueryMacros.rate(query, ast, useWindowFunc);\n    }\n    if (SqlQueryHelper.contain(ast, '$rateColumns')) {\n      return SqlQueryMacros.rateColumns(query, ast, useWindowFunc);\n    }\n    if (SqlQueryHelper.contain(ast, '$rateColumnsAggregated')) {\n      return SqlQueryMacros.rateColumnsAggregated(query, ast, useWindowFunc);\n    }\n    if (SqlQueryHelper.contain(ast, '$perSecond')) {\n      return SqlQueryMacros.perSecond(query, ast, useWindowFunc);\n    }\n    if (SqlQueryHelper.contain(ast, '$perSecondColumns')) {\n      return SqlQueryMacros.perSecondColumns(query, ast, useWindowFunc);\n    }\n    if (SqlQueryHelper.contain(ast, '$perSecondColumnsAggregated')) {\n      return SqlQueryMacros.perSecondColumnsAggregated(query, ast, useWindowFunc);\n    }\n    if (SqlQueryHelper.contain(ast, '$increase')) {\n      return SqlQueryMacros.increase(query, ast, useWindowFunc);\n    }\n    if (SqlQueryHelper.contain(ast, '$increaseColumns')) {\n      return SqlQueryMacros.increaseColumns(query, ast, useWindowFunc);\n    }\n    if (SqlQueryHelper.contain(ast, '$increaseColumnsAggregated')) {\n      return SqlQueryMacros.increaseColumnsAggregated(query, ast, useWindowFunc);\n    }\n    if (SqlQueryHelper.contain(ast, '$delta')) {\n      return SqlQueryMacros.delta(query, ast, useWindowFunc);\n    }\n    if (SqlQueryHelper.contain(ast, '$deltaColumns')) {\n      return SqlQueryMacros.deltaColumns(query, ast, useWindowFunc);\n    }\n    if (SqlQueryHelper.contain(ast, '$deltaColumnsAggregated')) {\n      return SqlQueryMacros.deltaColumnsAggregated(query, ast, useWindowFunc);\n    }\n    return query;\n  }\n\n  static getDateFilter(): string {\n    return '$dateCol >= toDate($from) AND $dateCol <= toDate($to)';\n  }\n\n  static getDateTimeFilter(dateTimeType: string) {\n    let convertFn = function (t: string): string {\n      if (dateTimeType === TimestampFormat.DateTime) {\n        return 'toDateTime(' + t + ')';\n      }\n      if (dateTimeType === TimestampFormat.DateTime64) {\n        return 'toDateTime64(' + t + ',3)';\n      }\n      if (dateTimeType === TimestampFormat.Float) {\n        return t;\n      }\n      if (dateTimeType === TimestampFormat.TimeStamp64_3) {\n        return `1000*${t}`;\n      }\n      if (dateTimeType === TimestampFormat.TimeStamp64_6) {\n        return `1000000*${t}`;\n      }\n      if (dateTimeType === TimestampFormat.TimeStamp64_9) {\n        return `1000000000*${t}`;\n      }\n      return t;\n    };\n    return '$dateTimeCol >= ' + convertFn('$from') + ' AND $dateTimeCol <= ' + convertFn('$to');\n  }\n\n  static getDateTimeFilterMs(dateTimeType: string) {\n    if (dateTimeType === TimestampFormat.DateTime) {\n      return `$dateTimeCol >= toDateTime($__from/1000) AND $dateTimeCol <= toDateTime($__to/1000)`;\n    } else if (dateTimeType === TimestampFormat.DateTime64) {\n      return `$dateTimeCol >= toDateTime64($__from/1000,3) AND $dateTimeCol <= toDateTime64($__to/1000,3)`;\n    } else if (dateTimeType === TimestampFormat.Float) {\n      return `$dateTimeCol >= toFloat64($__from/1000) AND $dateTimeCol <= toFloat64($__to/1000)`;\n    } else if (dateTimeType === TimestampFormat.TimeStamp64_3) {\n      return `$dateTimeCol >= $__from AND $dateTimeCol <= $__to`;\n    } else if (dateTimeType === TimestampFormat.TimeStamp64_6) {\n      return `$dateTimeCol >= 1000*$__from AND $dateTimeCol <= 1000*$__to`;\n    } else if (dateTimeType === TimestampFormat.TimeStamp64_9) {\n      return `$dateTimeCol >= 1000000*$__from AND $dateTimeCol <= 1000000*$__to`;\n    } else {\n      return `$dateTimeCol >= $__from/1000 AND $dateTimeCol <= $__to/1000`;\n    }\n  }\n\n  static getTimeSeries(dateTimeType: string): string {\n    if (dateTimeType === TimestampFormat.DateTime) {\n      return '(intDiv(toUInt32($dateTimeCol), $interval) * $interval) * 1000';\n    }\n    if (dateTimeType === TimestampFormat.DateTime64) {\n      return '(intDiv(toFloat64($dateTimeCol) * 1000, ($interval * 1000)) * ($interval * 1000))';\n    }\n    if (dateTimeType === TimestampFormat.Float) {\n      return '(intDiv($dateTimeCol * 1000, ($interval * 1000)) * ($interval * 1000))';\n    }\n    if (dateTimeType === TimestampFormat.TimeStamp64_3) {\n      return '(intDiv($dateTimeCol, ($interval * 1000)) * ($interval * 1000))';\n    }\n    if (dateTimeType === TimestampFormat.TimeStamp64_6) {\n      return '(intDiv($dateTimeCol / 1000, ($interval * 1000)) * ($interval * 1000))';\n    }\n    if (dateTimeType === TimestampFormat.TimeStamp64_9) {\n      return '(intDiv($dateTimeCol / 1000000, ($interval * 1000)) * ($interval * 1000))';\n    }\n    return '(intDiv($dateTimeCol, $interval) * $interval) * 1000';\n  }\n\n  static getTimeSeriesMs(dateTimeType: string): string {\n    if (dateTimeType === TimestampFormat.DateTime) {\n      return '(intDiv(toUInt32($dateTimeCol) * 1000, $__interval_ms) * $__interval_ms)';\n    }\n    if (dateTimeType === TimestampFormat.DateTime64) {\n      return '(intDiv(toFloat64($dateTimeCol) * 1000, $__interval_ms) * $__interval_ms)';\n    }\n    if (dateTimeType === TimestampFormat.TimeStamp) {\n      return '(intDiv($dateTimeCol * 1000, $__interval_ms) * $__interval_ms)';\n    }\n    if (dateTimeType === TimestampFormat.Float) {\n      return '(intDiv($dateTimeCol * 1000, $__interval_ms) * $__interval_ms)';\n    }\n    if (dateTimeType === TimestampFormat.TimeStamp64_3) {\n      return '(intDiv($dateTimeCol, $__interval_ms) * $__interval_ms)';\n    }\n    if (dateTimeType === TimestampFormat.TimeStamp64_6) {\n      return '(intDiv($dateTimeCol / 1000, $__interval_ms) * $__interval_ms)';\n    }\n    if (dateTimeType === TimestampFormat.TimeStamp64_9) {\n      return '(intDiv($dateTimeCol / 1000000, $__interval_ms) * $__interval_ms)';\n    }\n    return '(intDiv($dateTimeCol, $__interval_ms) * $__interval_ms)';\n  }\n\n  static getNaturalTimeSeries(dateTimeType: string, from: number, to: number): string {\n    let SOME_MINUTES = 60 * 20;\n    let FEW_HOURS = 60 * 60 * 4;\n    let SOME_HOURS = 60 * 60 * 24;\n    let MANY_HOURS = 60 * 60 * 72;\n    let FEW_DAYS = 60 * 60 * 24 * 15;\n    let MANY_WEEKS = 60 * 60 * 24 * 7 * 15;\n    let FEW_MONTHS = 60 * 60 * 24 * 30 * 10;\n    let FEW_YEARS = 60 * 60 * 24 * 365 * 6;\n    if (dateTimeType === TimestampFormat.DateTime || dateTimeType === TimestampFormat.DateTime64) {\n      let duration = to - from;\n      if (duration < SOME_MINUTES) {\n        return 'toUInt32($dateTimeCol) * 1000';\n      } else if (duration < FEW_HOURS) {\n        return 'toUInt32(toStartOfMinute($dateTimeCol)) * 1000';\n      } else if (duration < SOME_HOURS) {\n        return 'toUInt32(toStartOfFiveMinute($dateTimeCol)) * 1000';\n      } else if (duration < MANY_HOURS) {\n        return 'toUInt32(toStartOfFifteenMinutes($dateTimeCol)) * 1000';\n      } else if (duration < FEW_DAYS) {\n        return 'toUInt32(toStartOfHour($dateTimeCol)) * 1000';\n      } else if (duration < MANY_WEEKS) {\n        return 'toUInt32(toStartOfDay($dateTimeCol)) * 1000';\n      } else if (duration < FEW_MONTHS) {\n        return 'toUInt32(toDateTime(toMonday($dateTimeCol))) * 1000';\n      } else if (duration < FEW_YEARS) {\n        return 'toUInt32(toDateTime(toStartOfMonth($dateTimeCol))) * 1000';\n      } else {\n        return 'toUInt32(toDateTime(toStartOfQuarter($dateTimeCol))) * 1000';\n      }\n    }\n    return '(intDiv($dateTimeCol, $interval) * $interval) * 1000';\n  }\n\n  static delta(query: string, ast: any, useWindowFunc: boolean): string {\n    let [beforeMacrosQuery, fromQuery] = SqlQueryMacros._parseMacro('$delta', query);\n    if (fromQuery.length < 1) {\n      return query;\n    }\n    let args = ast['$delta'];\n    if (args.length < 1) {\n      throw { message: 'Amount of arguments must be > 0 for $delta func. Parsed arguments are:  ' + args.join(', ') };\n    }\n\n    each(args, function (a, i) {\n      args[i] = 'max(' + a.trim() + ') AS max_' + i;\n    });\n\n    let cols: string[] = [];\n    each(args, function (a, i) {\n      if (useWindowFunc) {\n        cols.push('max_' + i + ' - lagInFrame(max_' + i + ',1,0) OVER () AS max_' + i + '_Delta');\n      } else {\n        cols.push('runningDifference(max_' + i + ') AS max_' + i + '_Delta');\n      }\n    });\n\n    fromQuery = SqlQueryMacros._applyTimeFilter(fromQuery, false);\n    return (\n      beforeMacrosQuery +\n      'SELECT ' +\n      't,' +\n      ' ' +\n      cols.join(', ') +\n      ' FROM (' +\n      ' SELECT $timeSeries AS t,' +\n      ' ' +\n      args.join(', ') +\n      ' ' +\n      fromQuery +\n      ' GROUP BY t' +\n      ' ORDER BY t' +\n      ')'\n    );\n  }\n\n  static _parseMacro(macro: string, query: string): string[] {\n    const _fromIndex = (query: string, macro: string): number => {\n      let fromRe = new RegExp('\\\\' + macro + '\\\\([\\\\w\\\\s\\\\S]+?\\\\)(\\\\s+FROM\\\\s+)', 'gim');\n      let matches = fromRe.exec(query);\n      if (matches === null || matches.length === 0) {\n        throw { message: 'Could not find FROM-statement at: ' + query };\n      }\n      let fromRelativeIndex = matches[matches.length - 1].toLocaleLowerCase().indexOf('from');\n      return fromRe.lastIndex - matches[matches.length - 1].length + fromRelativeIndex;\n    };\n\n    let mLen = macro.length;\n    let mPos = query.indexOf(macro);\n    if (mPos === -1 || query.slice(mPos, mPos + mLen + 1) !== macro + '(') {\n      return [query, ''];\n    }\n    let fromIndex = _fromIndex(query, macro);\n    return [query.slice(0, mPos), query.slice(fromIndex)];\n  }\n\n  static _applyTimeFilter(query: string, useMs: boolean): string {\n    const timeFilterMacro = useMs ? '$timeFilterMs' : '$timeFilter';\n    return query.toLowerCase().includes('where')\n      ? query.replace(/where/gi, `WHERE ${timeFilterMacro} AND`)\n      : `${query} WHERE ${timeFilterMacro}`;\n  }\n\n  static transformQuery(\n    query: string,\n    ast: any,\n    macro: string,\n    transformation: (args: string[], cols: string[]) => void\n  ): string {\n    let [beforeMacrosQuery, fromQuery] = SqlQueryMacros._parseMacro(macro, query);\n    if (fromQuery.length < 1) {\n      return query;\n    }\n    let args = ast[macro];\n    if (args.length < 1) {\n      throw { message: `Amount of arguments must be > 0 for ${macro} func. Parsed arguments are:  ${args.join(', ')}` };\n    }\n\n    let cols: any[] = [];\n    transformation(args, cols);\n\n    fromQuery = SqlQueryMacros._applyTimeFilter(fromQuery, false);\n    return (\n      beforeMacrosQuery +\n      'SELECT ' +\n      't,' +\n      ' ' +\n      cols.join(', ') +\n      ' FROM (' +\n      ' SELECT $timeSeries AS t,' +\n      ' ' +\n      args.join(', ') +\n      ' ' +\n      fromQuery +\n      ' GROUP BY t' +\n      ' ORDER BY t' +\n      ')'\n    );\n  }\n\n  static increase(query: string, ast: any, useWindowFunc: boolean): string {\n    let [beforeMacrosQuery, fromQuery] = SqlQueryMacros._parseMacro('$increase', query);\n    if (fromQuery.length < 1) {\n      return query;\n    }\n    let args = ast['$increase'];\n    if (args.length < 1) {\n      throw {\n        message: 'Amount of arguments must be > 0 for $increase func. Parsed arguments are:  ' + args.join(', '),\n      };\n    }\n\n    each(args, function (a, i) {\n      args[i] = 'max(' + a.trim() + ') AS max_' + i;\n    });\n\n    let cols: string[] = [];\n    each(args, function (a, i) {\n      if (useWindowFunc) {\n        cols.push(\n          'if((max_' + i + ' - lagInFrame(max_' + i + ',1,0) OVER ()) < 0, 0, max_' + i + ' - lagInFrame(max_' + i + ',1,0) OVER ()) AS max_' + i + '_Increase'\n        );\n      } else {\n        cols.push(\n          'if(runningDifference(max_' + i + ') < 0, 0, runningDifference(max_' + i + ')) AS max_' + i + '_Increase'\n        );\n      }\n    });\n\n    fromQuery = SqlQueryMacros._applyTimeFilter(fromQuery, false);\n    return (\n      beforeMacrosQuery +\n      'SELECT ' +\n      't,' +\n      ' ' +\n      cols.join(', ') +\n      ' FROM (' +\n      ' SELECT $timeSeries AS t,' +\n      ' ' +\n      args.join(', ') +\n      ' ' +\n      fromQuery +\n      ' GROUP BY t' +\n      ' ORDER BY t' +\n      ')'\n    );\n  }\n\n  static perSecond(query: string, ast: any, useWindowFunc: boolean): string {\n    let [beforeMacrosQuery, fromQuery] = SqlQueryMacros._parseMacro('$perSecond', query);\n    if (fromQuery.length < 1) {\n      return query;\n    }\n    let args = ast['$perSecond'];\n    if (args.length < 1) {\n      throw {\n        message: 'Amount of arguments must be > 0 for $perSecond func. Parsed arguments are:  ' + args.join(', '),\n      };\n    }\n\n    each(args, function (a, i) {\n      args[i] = 'max(' + a.trim() + ') AS max_' + i;\n    });\n\n    let cols: string[] = [];\n    each(args, function (a, i) {\n      if (useWindowFunc) {\n        cols.push(\n          'if(max_' + i + ' - lagInFrame(max_'+i+',1,0) OVER () < 0, nan, ' +\n          '(max_' + i + ' - lagInFrame(max_'+i+',1,0) OVER ()) '+\n          '/ ((t - lagInFrame(t,1,0) OVER ())/1000) ) AS max_' + i + '_PerSecond'\n        );\n      } else {\n        cols.push(\n          'if(runningDifference(max_' + i + ') < 0, nan, ' +\n          'runningDifference(max_' + i + ') / runningDifference(t/1000)) AS max_' + i + '_PerSecond'\n        );\n      }\n    });\n\n    fromQuery = SqlQueryMacros._applyTimeFilter(fromQuery, false);\n    return (\n      beforeMacrosQuery +\n      'SELECT ' +\n      't,' +\n      ' ' +\n      cols.join(', ') +\n      ' FROM (' +\n      ' SELECT $timeSeries AS t,' +\n      ' ' +\n      args.join(', ') +\n      ' ' +\n      fromQuery +\n      ' GROUP BY t' +\n      ' ORDER BY t' +\n      ')'\n    );\n  }\n\n  static rate(query: string, ast: any, useWindowFunc: boolean): string {\n    return SqlQueryMacros.transformQuery(query, ast, '$rate', function (args, cols) {\n      let aliases: any[] = [];\n      each(args, function (arg) {\n        if (arg.slice(-1) === ')') {\n          throw { message: 'Argument \"' + arg + '\" can\\'t be used without alias' };\n        }\n        aliases.push(arg.trim().split(' ').pop());\n      });\n\n      each(aliases, function (a) {\n        if (useWindowFunc) {\n          cols.push(a + '/((t - lagInFrame(t,1,0) OVER ())/1000) ' + a + 'Rate');\n        } else {\n          cols.push(a + '/runningDifference(t/1000) ' + a + 'Rate');\n        }\n      });\n    });\n  }\n\n  static _columns(key: string, value: string, beforeMacrosQuery: string, fromQuery: string, useMs: boolean): string {\n    if (key.slice(-1) === ')' || value.slice(-1) === ')') {\n      throw { message: 'Some of passed arguments are without aliases: ' + key + ', ' + value };\n    }\n\n    let keyAlias = key.trim().split(' ').pop(),\n      valueAlias = value.trim().split(' ').pop();\n\n    let groupByQuery = ' GROUP BY t, ' + keyAlias;\n    let havingQuery = '';\n    let orderByQuery = ' ORDER BY t, ' + keyAlias;\n    const fromRe = /^\\s*FROM\\s*\\(/im;\n    if (!fromRe.test(fromQuery)) {\n      function findKeywordOutsideBrackets(query: string, keyword: string) {\n        // This regex will match the keyword only if it is not within brackets.\n        const regex = new RegExp(`(?<!\\\\([^)]*)${keyword}(?![^(]*\\\\))`, 'gi');\n\n        const match = regex.exec(query);\n        return match ? match.index : -1;\n      }\n\n      const groupByIndex = findKeywordOutsideBrackets(fromQuery, 'group by');\n      const havingIndex = findKeywordOutsideBrackets(fromQuery, 'having');\n      const orderByIndex = findKeywordOutsideBrackets(fromQuery, 'order by');\n\n      if (havingIndex >= 0 && orderByIndex >= 0 && havingIndex >= orderByIndex) {\n        throw { message: 'ORDER BY clause shall be before HAVING' };\n      }\n\n      if (groupByIndex >= 0 && orderByIndex >= 0 && groupByIndex >= orderByIndex) {\n        throw { message: 'GROUP BY clause shall be before ORDER BY' };\n      }\n\n      if (groupByIndex >= 0 && havingIndex >= 0 && groupByIndex >= havingIndex) {\n        throw { message: 'GROUP BY clause shall be before HAVING' };\n      }\n\n      if (orderByIndex !== -1) {\n        orderByQuery = ' ' + fromQuery.slice(orderByIndex, fromQuery.length);\n        fromQuery = fromQuery.slice(0, orderByIndex - 1);\n      }\n\n      if (havingIndex !== -1) {\n        havingQuery = ' ' + fromQuery.slice(havingIndex, fromQuery.length);\n        fromQuery = fromQuery.slice(0, havingIndex - 1);\n      }\n\n      if (groupByIndex !== -1) {\n        groupByQuery = ' ' + fromQuery.slice(groupByIndex, fromQuery.length);\n        fromQuery = fromQuery.slice(0, groupByIndex - 1);\n      }\n    }\n    fromQuery = SqlQueryMacros._applyTimeFilter(fromQuery, useMs);\n    const timeSeriesMacro: string = useMs ? '$timeSeriesMs' : '$timeSeries';\n    return (\n      beforeMacrosQuery +\n      'SELECT' +\n      ' t,' +\n      ' groupArray((' +\n      keyAlias +\n      ', ' +\n      valueAlias +\n      ')) AS groupArr' +\n      ' FROM (' +\n      ' SELECT '+timeSeriesMacro+' AS t' +\n      ', ' +\n      key +\n      ', ' +\n      value +\n      ' ' +\n      fromQuery +\n      groupByQuery +\n      havingQuery +\n      orderByQuery +\n      ')' +\n      ' GROUP BY t' +\n      ' ORDER BY t'\n    );\n  }\n\n  static columns(query: string, ast: any, useWindowFunc: boolean): string {\n    let [beforeMacrosQuery, fromQuery] = SqlQueryMacros._parseMacro('$columns', query);\n    if (fromQuery.length < 1) {\n      return query;\n    }\n    let args = ast['$columns'];\n    if (args.length !== 2) {\n      throw {\n        message: 'Amount of arguments must equal 2 for $columns func. Parsed arguments are: ' + ast.$columns.join(', '),\n      };\n    }\n    return SqlQueryMacros._columns(args[0], args[1], beforeMacrosQuery, fromQuery, false);\n  }\n\n  static columnsMs(query: string, ast: any, useWindowFunc: boolean): string {\n    let [beforeMacrosQuery, fromQuery] = SqlQueryMacros._parseMacro('$columnsMs', query);\n    if (fromQuery.length < 1) {\n      return query;\n    }\n    let args = ast['$columnsMs'];\n    if (args.length !== 2) {\n      throw {\n        message: 'Amount of arguments must equal 2 for $columnsMs func. Parsed arguments are: ' + ast.$columnsMs.join(', '),\n      };\n    }\n    return SqlQueryMacros._columns(args[0], args[1], beforeMacrosQuery, fromQuery, true);\n  }\n\n  static rateColumns(query: string, ast: any, useWindowFunc: boolean): string {\n    let [beforeMacrosQuery, fromQuery] = SqlQueryMacros._parseMacro('$rateColumns', query);\n    if (fromQuery.length < 1) {\n      return query;\n    }\n    let args = ast['$rateColumns'];\n    if (args.length !== 2) {\n      throw {\n        message: 'Amount of arguments must equal 2 for $rateColumns func. Parsed arguments are: ' + args.join(', '),\n      };\n    }\n\n    query = SqlQueryMacros._columns(args[0], args[1], '', fromQuery, false);\n    let timeChange: string;\n    if (useWindowFunc) {\n      timeChange = '(t/1000 - lagInFrame(t/1000,1,0) OVER ())'\n    } else {\n      timeChange = 'runningDifference( t/1000 )'\n    }\n    return (\n      beforeMacrosQuery +\n      'SELECT t' +\n      ', arrayMap(a -> (a.1, a.2/'+timeChange+'), groupArr)' +\n      ' FROM (' +\n      query +\n      ')'\n    );\n  }\n  /* https://github.com/Altinity/clickhouse-grafana/issues/386 */\n  private static _prepareColumnsAggregated(\n    macroName: string,\n    query: string,\n    ast: any\n  ): [string, string, string, string, string, string, string, string[], string[], string[]] {\n    let [beforeMacrosQuery, fromQuery] = SqlQueryMacros._parseMacro(macroName, query);\n    if (fromQuery.length < 1) {\n      throw {\n        message: 'Missing FROM section after ' + macroName + ' function. Query: ' + query,\n      };\n    }\n    let args = ast[macroName];\n    if (args.length < 4) {\n      throw {\n        message:\n          'Expect 2 or more amount of arguments for ' +\n          macroName +\n          ' function. Parsed arguments are: ' +\n          args.join(', '),\n      };\n    }\n    let havingIndex = fromQuery.toLowerCase().indexOf('having'),\n      having = '';\n\n    if (havingIndex !== -1) {\n      having = ' ' + fromQuery.slice(havingIndex, fromQuery.length);\n      fromQuery = fromQuery.slice(0, havingIndex - 1);\n    }\n    fromQuery = SqlQueryMacros._applyTimeFilter(fromQuery, false);\n\n    let key = args[0];\n    let keyAlias = key.trim().split(' ').pop();\n    let subKey = args[1];\n    let subKeyAlias = subKey.trim().split(' ').pop();\n\n    if (args.length % 2 !== 0) {\n      throw {\n        message:\n          'Wrong arguments count, expect argument pairs aggregate function and value for $rateColumnsAggregated func. Parsed arguments are: ' +\n          args.join(', '),\n      };\n    }\n    const values: string[] = [];\n    const aliases: string[] = [];\n    const aggFuncs: string[] = [];\n    for (let i = 2; i < args.length; i += 2) {\n      aggFuncs.push(args[i]);\n\n      let value = args[i + 1];\n      let aliasSplit = value.trim().split(' ');\n      let alias = aliasSplit.pop();\n      aliases.push(alias);\n\n      if (aliasSplit.length > 1) {\n        value = aliasSplit.join(' ').replace(/ AS$/i, '');\n      }\n      if (value.indexOf('(') === -1) {\n        value = 'max(' + value + ')';\n        values.push();\n      }\n      values.push(value + ' AS ' + alias);\n    }\n    return [beforeMacrosQuery, fromQuery, having, key, keyAlias, subKey, subKeyAlias, values, aliases, aggFuncs];\n  }\n\n  private static _formatColumnsAggregated(\n    beforeMacrosQuery: string,\n    keyAlias: string,\n    finalAggregatedValues: string[],\n    subKeyAlias: string,\n    finalValues: string[],\n    key: string,\n    subKey: string,\n    values: string[],\n    fromQuery: string,\n    having: string\n  ) {\n    return (\n      beforeMacrosQuery +\n      'SELECT t, ' +\n      keyAlias +\n      ', ' +\n      finalAggregatedValues.join(', ') +\n      ' FROM (' +\n      '  SELECT t, ' +\n      keyAlias +\n      ', ' +\n      subKeyAlias +\n      ', ' +\n      finalValues.join(', ') +\n      '  FROM (' +\n      '   SELECT $timeSeries AS t, ' +\n      key +\n      ', ' +\n      subKey +\n      ', ' +\n      values.join(', ') +\n      '   ' +\n      fromQuery +\n      '   GROUP BY ' +\n      keyAlias +\n      ', ' +\n      subKeyAlias +\n      ', t ' +\n      having +\n      '   ORDER BY ' +\n      keyAlias +\n      ', ' +\n      subKeyAlias +\n      ', t' +\n      '  )' +\n      ' ) ' +\n      'GROUP BY ' +\n      keyAlias +\n      ', t ORDER BY ' +\n      keyAlias +\n      ', t'\n    );\n  }\n\n  static rateColumnsAggregated(query: string, ast: any, useWindowFunc: boolean): string {\n    const [beforeMacrosQuery, fromQuery, having, key, keyAlias, subKey, subKeyAlias, values, aliases, aggFuncs] =\n      SqlQueryMacros._prepareColumnsAggregated('$rateColumnsAggregated', query, ast);\n    const finalAggregatedValues: string[] = [];\n    const finalValues: string[] = [];\n    aliases.forEach((a, i) => {\n      finalAggregatedValues.push(aggFuncs[i] + '(' + a + 'Rate) AS ' + a + 'RateAgg');\n      if (useWindowFunc) {\n        finalValues.push(a + ' / (t/1000 - lagInFrame(t/1000,1,0) OVER ()) AS ' + a + 'Rate');\n      } else {\n        finalValues.push(a + ' / runningDifference(t / 1000) AS ' + a + 'Rate');\n      }\n    });\n\n    return SqlQueryMacros._formatColumnsAggregated(\n      beforeMacrosQuery,\n      keyAlias,\n      finalAggregatedValues,\n      subKeyAlias,\n      finalValues,\n      key,\n      subKey,\n      values,\n      fromQuery,\n      having\n    );\n  }\n\n  static _detectAliasAndApplyTimeFilter(\n    aliasIndex: number,\n    key: string,\n    alias: string,\n    havingIndex: number,\n    having: string,\n    fromQuery: string\n  ) {\n    if (aliasIndex === -1) {\n      key = key + ' AS ' + alias;\n    } else {\n      alias = key.slice(aliasIndex + 4, key.length);\n    }\n\n    if (havingIndex !== -1) {\n      having = ' ' + fromQuery.slice(havingIndex, fromQuery.length);\n      fromQuery = fromQuery.slice(0, havingIndex - 1);\n    }\n    fromQuery = SqlQueryMacros._applyTimeFilter(fromQuery, false);\n    return [key, alias, having, fromQuery];\n  }\n\n  static perSecondColumns(query: string, ast: any, useWindowFunc: boolean): string {\n    let [beforeMacrosQuery, fromQuery] = SqlQueryMacros._parseMacro('$perSecondColumns', query);\n    if (fromQuery.length < 1) {\n      return query;\n    }\n    let args = ast['$perSecondColumns'];\n    if (args.length !== 2) {\n      throw {\n        message:\n          'Amount of arguments must equal 2 for $perSecondColumns func. Parsed arguments are: ' + args.join(', '),\n      };\n    }\n\n    let key = args[0],\n      value = 'max(' + args[1].trim() + ') AS max_0',\n      havingIndex = fromQuery.toLowerCase().indexOf('having'),\n      having = '',\n      aliasIndex = key.toLowerCase().indexOf(' as '),\n      alias = 'perSecondColumns';\n    [key, alias, having, fromQuery] = SqlQueryMacros._detectAliasAndApplyTimeFilter(\n      aliasIndex,\n      key,\n      alias,\n      havingIndex,\n      having,\n      fromQuery\n    );\n    let maxPerSecond: string;\n\n    if (useWindowFunc) {\n      maxPerSecond = 'if((max_0 - lagInFrame(max_0,1,0) OVER ()) < 0 OR lagInFrame(' + alias + ',1,' + alias + ') OVER () != ' + alias +\n        ', nan, (max_0 - lagInFrame(max_0,1,0) OVER ()) / (t/1000 - lagInFrame(t/1000,1,0) OVER ()))'\n\n    } else {\n      maxPerSecond = 'if(runningDifference(max_0) < 0 OR neighbor(' + alias + ',-1,' + alias + ') != ' + alias +\n        ', nan, runningDifference(max_0) / runningDifference(t/1000))'\n    }\n\n    return (\n      beforeMacrosQuery +\n      'SELECT' +\n      ' t,' +\n      ' groupArray((' + alias + ', max_0_PerSecond)) AS groupArr' +\n      ' FROM (' +\n      ' SELECT t,' +\n      ' ' +\n      alias +\n      ', ' + maxPerSecond + ' AS max_0_PerSecond' +\n      ' FROM (' +\n      ' SELECT $timeSeries AS t' +\n      ', ' +\n      key +\n      ', ' +\n      value +\n      ' ' +\n      fromQuery +\n      ' GROUP BY t, ' +\n      alias +\n      having +\n      ' ORDER BY ' +\n      alias +\n      ', t' +\n      ')' +\n      ')' +\n      ' GROUP BY t' +\n      ' ORDER BY t'\n    );\n  }\n\n  static perSecondColumnsAggregated(query: string, ast: any, useWindowFunc: boolean): string {\n    const [beforeMacrosQuery, fromQuery, having, key, keyAlias, subKey, subKeyAlias, values, aliases, aggFuncs] =\n      SqlQueryMacros._prepareColumnsAggregated('$perSecondColumnsAggregated', query, ast);\n    const finalAggregatedValues: string[] = [];\n    const finalValues: string[] = [];\n    aliases.forEach((a, i) => {\n      finalAggregatedValues.push(aggFuncs[i] + '(' + a + 'PerSecond) AS ' + a + 'PerSecondAgg');\n      if (useWindowFunc) {\n        finalValues.push(\n          'if(('+ a +' - lagInFrame('+ a +',1,0) OVER ()) < 0 OR ' +\n          'lagInFrame(' + subKeyAlias + ',1,' + subKeyAlias + ') OVER () != ' + subKeyAlias + ', nan, ' +\n          '('+ a +' - lagInFrame('+ a +',1,0) OVER ()) / (t/1000 - lagInFrame(t/1000,1,0) OVER ())) AS ' + a + 'PerSecond'\n        );\n      } else {\n        finalValues.push(\n          'if(runningDifference(' + a +') < 0 OR ' +\n          'neighbor(' + subKeyAlias + ',-1,' + subKeyAlias + ') != ' + subKeyAlias +\n          ', nan, runningDifference(' + a + ') / runningDifference(t / 1000)) AS ' + a + 'PerSecond'\n        );\n      }\n    });\n\n    return SqlQueryMacros._formatColumnsAggregated(\n      beforeMacrosQuery,\n      keyAlias,\n      finalAggregatedValues,\n      subKeyAlias,\n      finalValues,\n      key,\n      subKey,\n      values,\n      fromQuery,\n      having\n    );\n  }\n\n  static increaseColumns(query: string, ast: any, useWindowFunc: boolean): string {\n    // return 'Increase 1'\n    let [beforeMacrosQuery, fromQuery] = SqlQueryMacros._parseMacro('$increaseColumns', query);\n    if (fromQuery.length < 1) {\n      return query;\n    }\n    let args = ast['$increaseColumns'];\n    if (args.length !== 2) {\n      throw {\n        message: 'Amount of arguments must equal 2 for $increaseColumns func. Parsed arguments are: ' + args.join(', '),\n      };\n    }\n\n    let key = args[0],\n      value = 'max(' + args[1].trim() + ') AS max_0',\n      havingIndex = fromQuery.toLowerCase().indexOf('having'),\n      having = '',\n      aliasIndex = key.toLowerCase().indexOf(' as '),\n      alias = 'increaseColumns';\n\n    [key, alias, having, fromQuery] = SqlQueryMacros._detectAliasAndApplyTimeFilter(\n      aliasIndex,\n      key,\n      alias,\n      havingIndex,\n      having,\n      fromQuery\n    );\n    let maxIncrease: string;\n    if (useWindowFunc) {\n      maxIncrease = 'if((max_0 - lagInFrame(max_0,1,0) OVER ()) < 0 OR lagInFrame(' + alias + ',1,' + alias + ') OVER () != ' + alias + ', 0, max_0 - lagInFrame(max_0,1,0) OVER ())';\n    } else {\n      maxIncrease = 'if(runningDifference(max_0) < 0 OR neighbor(' + alias + ',-1,' + alias + ') != ' + alias + ', 0, runningDifference(max_0))';\n    }\n    return (\n      beforeMacrosQuery +\n      'SELECT' +\n      ' t,' +\n      ' groupArray((' + alias + ', max_0_Increase)) AS groupArr' +\n      ' FROM (' +\n      ' SELECT t, ' + alias +\n      ', '+maxIncrease+' AS max_0_Increase' +\n      ' FROM (' +\n      ' SELECT $timeSeries AS t' +\n      ', ' +\n      key +\n      ', ' +\n      value +\n      ' ' +\n      fromQuery +\n      ' GROUP BY t, ' +\n      alias +\n      having +\n      ' ORDER BY ' +\n      alias +\n      ', t' +\n      ')' +\n      ')' +\n      ' GROUP BY t' +\n      ' ORDER BY t'\n    );\n  }\n\n  static increaseColumnsAggregated(query: string, ast: any, useWindowFunc: boolean): string {\n    const [beforeMacrosQuery, fromQuery, having, key, keyAlias, subKey, subKeyAlias, values, aliases, aggFuncs] =\n      SqlQueryMacros._prepareColumnsAggregated('$increaseColumnsAggregated', query, ast);\n\n    const finalAggregatedValues: string[] = [];\n    const finalValues: string[] = [];\n    aliases.forEach((a, i) => {\n      finalAggregatedValues.push(aggFuncs[i] + '(' + a + 'Increase) AS ' + a + 'IncreaseAgg');\n      if (useWindowFunc) {\n        finalValues.push(\n          'if((' + a + ' - lagInFrame(' + a + ',1,0) OVER ()) < 0 OR ' +\n          'lagInFrame(' + subKeyAlias + ',1,' + subKeyAlias + ') OVER () != ' + subKeyAlias +\n          ', nan, (' + a + ' - lagInFrame(' + a +',1,0) OVER ()) / 1) AS ' + a + 'Increase'\n        );\n      } else {\n        finalValues.push(\n          'if(runningDifference(' + a + ') < 0 OR ' +\n          'neighbor(' + subKeyAlias + ',-1,' +subKeyAlias + ') != ' + subKeyAlias +\n          ', nan, runningDifference(' + a + ') / 1) AS ' + a + 'Increase'\n        );\n      }\n    });\n\n    return SqlQueryMacros._formatColumnsAggregated(\n      beforeMacrosQuery,\n      keyAlias,\n      finalAggregatedValues,\n      subKeyAlias,\n      finalValues,\n      key,\n      subKey,\n      values,\n      fromQuery,\n      having\n    );\n  }\n\n  static deltaColumns(query: string, ast: any, useWindowFunc: boolean): string {\n    let [beforeMacrosQuery, fromQuery] = SqlQueryMacros._parseMacro('$deltaColumns', query);\n    if (fromQuery.length < 1) {\n      return query;\n    }\n    let args = ast['$deltaColumns'];\n    if (args.length !== 2) {\n      throw {\n        message: 'Amount of arguments must equal 2 for $deltaColumns func. Parsed arguments are: ' + args.join(', '),\n      };\n    }\n\n    let key = args[0],\n      value = 'max(' + args[1].trim() + ') AS max_0',\n      havingIndex = fromQuery.toLowerCase().indexOf('having'),\n      having = '',\n      aliasIndex = key.toLowerCase().indexOf(' as '),\n      alias = 'deltaColumns';\n    [key, alias, having, fromQuery] = SqlQueryMacros._detectAliasAndApplyTimeFilter(\n      aliasIndex,\n      key,\n      alias,\n      havingIndex,\n      having,\n      fromQuery\n    );\n    let maxDelta: string;\n    if (useWindowFunc) {\n      maxDelta = 'if(lagInFrame(' + alias + ',1,' + alias + ') OVER () != ' + alias + ', 0, max_0 - lagInFrame(max_0,1,0) OVER ())'\n    } else {\n      maxDelta = 'if(neighbor(' + alias + ',-1,' + alias + ') != ' + alias + ', 0, runningDifference(max_0))'\n    }\n    return (\n      beforeMacrosQuery +\n      'SELECT' +\n      ' t,' +\n      ' groupArray((' + alias + ', max_0_Delta)) AS groupArr' +\n      ' FROM (' +\n      ' SELECT t, ' + alias +\n      ', '+maxDelta+' AS max_0_Delta' +\n      ' FROM (' +\n      ' SELECT $timeSeries AS t' +\n      ', ' +\n      key +\n      ', ' +\n      value +\n      ' ' +\n      fromQuery +\n      ' GROUP BY t, ' +\n      alias +\n      having +\n      ' ORDER BY ' +\n      alias +\n      ', t' +\n      ')' +\n      ')' +\n      ' GROUP BY t' +\n      ' ORDER BY t'\n    );\n  }\n\n  static deltaColumnsAggregated(query: string, ast: any, useWindowFunc: boolean): string {\n    const [beforeMacrosQuery, fromQuery, having, key, keyAlias, subKey, subKeyAlias, values, aliases, aggFuncs] =\n      SqlQueryMacros._prepareColumnsAggregated('$deltaColumnsAggregated', query, ast);\n    const finalAggregatedValues: string[] = [];\n    const finalValues: string[] = [];\n    aliases.forEach((a, i) => {\n      finalAggregatedValues.push(aggFuncs[i] + '(' + a + 'Delta) AS ' + a + 'DeltaAgg');\n      if (useWindowFunc) {\n        finalValues.push(\n          'if(lagInFrame(' + subKeyAlias + ',1,' + subKeyAlias + ') OVER () != ' + subKeyAlias + ', 0, ' + a + ' - lagInFrame('+a+',1,0) OVER ()) AS ' + a + 'Delta'\n        );\n      } else {\n        finalValues.push(\n          'if(neighbor(' + subKeyAlias + ',-1,' + subKeyAlias + ') != ' + subKeyAlias + ', 0, runningDifference(' + a + ') / 1) AS ' + a + 'Delta'\n        );\n      }\n    });\n\n    return SqlQueryMacros._formatColumnsAggregated(\n      beforeMacrosQuery,\n      keyAlias,\n      finalAggregatedValues,\n      subKeyAlias,\n      finalValues,\n      key,\n      subKey,\n      values,\n      fromQuery,\n      having\n    );\n  }\n\n  static replaceTimeFilters(\n    query: string,\n    range: TimeRange,\n    dateTimeType = TimestampFormat.DateTime,\n    round?: number\n  ): string {\n    let from = SqlQueryHelper.convertTimestamp(SqlQueryHelper.round(range.from, round || 0));\n    let to = SqlQueryHelper.convertTimestamp(SqlQueryHelper.round(range.to, round || 0));\n\n    // Extending date range to be sure that round does not affect first and last points data\n    if (round && round > 0) {\n      to += round * 2 - 1;\n      from -= round * 2 - 1;\n    }\n\n    return query\n      .replace(\n        /\\$timeFilterByColumn\\(([\\w_]+)\\)/g,\n        (match: string, columnName: string) => `${SqlQueryHelper.getFilterSqlForDateTime(columnName, dateTimeType)}`\n      )\n      .replace(\n        /\\$timeFilter64ByColumn\\(([\\w_]+)\\)/g,\n        (match: string, columnName: string) => `${SqlQueryHelper.getFilterSqlForDateTimeMs(columnName, dateTimeType)}`\n      )\n      .replace(/\\$from/g, from.toString())\n      .replace(/\\$to/g, to.toString())\n      .replace(/\\$__from/g, range.from.valueOf())\n      .replace(/\\$__to/g, range.to.valueOf());\n  }\n}\n","import { isArray } from 'lodash';\nimport Scanner from '../scanner/scanner';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { SqlQueryHelper } from './sql-query-helper';\nimport SqlQueryMacros from './sql-query-macros';\nimport { TimestampFormat } from '../../types/types';\n\nexport default class SqlQuery {\n  target: any;\n  templateSrv: TemplateSrv;\n  options: any;\n\n  constructor(target: any, templateSrv: TemplateSrv, options: any) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.options = options;\n  }\n\n  replace(options: any, adhocFilters: any) {\n    if (!this.target.query) {\n      return '';\n    }\n\n    let query = this.target.query.trim();\n\n    if (this.target.skip_comments) {\n      query = Scanner.RemoveComments(query);\n    }\n\n    if (this.target.add_metadata) {\n      query = Scanner.AddMetadata(query);\n    }\n\n    query = this.templateSrv.replace(\n      SqlQueryHelper.conditionalTest(query, this.templateSrv),\n      options.scopedVars,\n      SqlQueryHelper.interpolateQueryExpr\n    );\n    let scanner = new Scanner(query);\n    let dateTimeType = this.target.dateTimeType ? this.target.dateTimeType : TimestampFormat.DateTime;\n    let i = this.templateSrv.replace(this.target.interval, options.scopedVars) || options.interval;\n    let interval = SqlQueryHelper.convertInterval(i, this.target.intervalFactor || 1);\n    let intervalMs = SqlQueryHelper.convertInterval(i, this.target.intervalFactor || 1, true);\n    let adhocCondition: any[] = [];\n\n    try {\n      let ast = scanner.toAST();\n      let topQueryAST = ast;\n      if (adhocFilters && adhocFilters.length > 0) {\n        /* Check sub queries for ad-hoc filters */\n        while (ast.hasOwnProperty('from') && !isArray(ast.from)) {\n          ast = ast.from;\n        }\n        if (!ast.hasOwnProperty('where')) {\n          ast.where = [];\n        }\n\n        let target = SqlQueryHelper.target(ast.from[0], this.target);\n\n        adhocFilters.forEach((af: any) => {\n          let parts = af.key.includes('.') ? af.key.split('.') : [target[0], target[1], af.key];\n\n          if (parts.length === 1) {\n            parts = [target[1], ...parts];\n          }\n          if (parts.length === 2) {\n            parts = [target[0], ...parts];\n          }\n\n          if (parts.length < 3) {\n            console.warn(`adhoc filters: filter '${af.key}' has the wrong format`);\n            return;\n          }\n\n          if (target[0] !== parts[0] || target[1] !== parts[1]) {\n            return;\n          }\n\n          const operator = SqlQueryHelper.clickhouseOperator(af.operator);\n          let cond = `${parts[2]} ${operator} ${\n            typeof af.value === 'number' ||\n            af.value.includes(\"'\") ||\n            af.value.includes(', ') ||\n            af.value.match(/^\\s*\\d+\\s*$/)\n              ? af.value\n              : \"'\" + af.value + \"'\"\n          }`;\n          adhocCondition.push(cond);\n\n          if (ast.where.length > 0) {\n            cond = 'AND ' + cond;\n          }\n\n          if (!query.includes('$adhoc')) {\n            ast.where.push(cond);\n          }\n        });\n\n        query = scanner.Print(topQueryAST);\n      }\n\n      query = SqlQueryMacros.applyMacros(query, topQueryAST, this.target.useWindowFuncForMacros);\n    } catch (err) {\n      console.error('AST parser error: ', err);\n    }\n\n    /* Render the ad-hoc condition or evaluate to an always true condition */\n    let renderedAdHocCondition = adhocCondition.length > 0 ? '(' + adhocCondition.join(' AND ') + ')' : '1';\n\n    query = SqlQueryHelper.unescape(query);\n    let timeFilter = SqlQueryMacros.getDateTimeFilter(dateTimeType);\n    let timeFilterMs = SqlQueryMacros.getDateTimeFilterMs(dateTimeType);\n    if (typeof this.target.dateColDataType === 'string' && this.target.dateColDataType.length > 0) {\n      timeFilter = SqlQueryMacros.getDateFilter() + ' AND ' + timeFilter;\n      timeFilterMs = SqlQueryMacros.getDateFilter() + ' AND ' + timeFilterMs;\n    }\n\n    let table = SqlQueryHelper.escapeTableIdentifier(this.target.table);\n    if (this.target.database) {\n      table = SqlQueryHelper.escapeTableIdentifier(this.target.database) + '.' + table;\n    }\n\n    let myround = this.target.round === '$step' ? interval : SqlQueryHelper.convertInterval(this.target.round, 1);\n    let from = SqlQueryHelper.convertTimestamp(SqlQueryHelper.round(this.options.range.from, myround));\n    let to = SqlQueryHelper.convertTimestamp(SqlQueryHelper.round(this.options.range.to, myround));\n\n    // TODO: replace\n    this.target.rawQuery = query\n      .replace(/\\$timeSeries\\b/g, SqlQueryMacros.getTimeSeries(dateTimeType))\n      .replace(/\\$timeSeriesMs\\b/g, SqlQueryMacros.getTimeSeriesMs(dateTimeType))\n      .replace(/\\$naturalTimeSeries/g, SqlQueryMacros.getNaturalTimeSeries(dateTimeType, from, to))\n      .replace(/\\$timeFilter\\b/g, timeFilter)\n      .replace(/\\$timeFilterMs\\b/g, timeFilterMs)\n      .replace(/\\$table\\b/g, table)\n      .replace(/\\$from\\b/g, from.toString())\n      .replace(/\\$to\\b/g, to.toString())\n      .replace(/\\$dateCol\\b/g, SqlQueryHelper.escapeIdentifier(this.target.dateColDataType))\n      .replace(/\\$dateTimeCol\\b/g, SqlQueryHelper.escapeIdentifier(this.target.dateTimeColDataType))\n      .replace(/\\$interval\\b/g, interval.toString())\n      .replace(/\\$__interval_ms\\b/g, intervalMs.toString())\n      .replace(/\\$adhoc\\b/g, renderedAdHocCondition);\n\n    const round = this.target.round === '$step' ? interval : SqlQueryHelper.convertInterval(this.target.round, 1);\n    this.target.rawQuery = SqlQueryMacros.replaceTimeFilters(\n      this.target.rawQuery,\n      this.options.range,\n      dateTimeType,\n      round\n    );\n    return this.target.rawQuery;\n  }\n}\n","import { isObject } from 'lodash';\nimport { AnnotationEvent } from '@grafana/data';\n\nexport default class ResponseParser {\n  constructor() {}\n\n  parse(query: string, results: any): any[] {\n    if (!results || !results.data || results.data?.length === 0) {\n      return [];\n    }\n\n    let res: any[] = [];\n    let meta: any[];\n    let data: Array<{ [key: string]: any }>;\n    if (typeof results.meta !== 'undefined') {\n      meta = results.meta;\n      data = results.data;\n    } else {\n      meta = results.data.meta;\n      data = results.data.data;\n    }\n\n    const keys = meta.map((item: any) => {\n      return item.name;\n    });\n    const textColIndex = ResponseParser.findColIndex(keys, '__text');\n    const valueColIndex = ResponseParser.findColIndex(keys, '__value');\n    const keyValuePairs = keys.length === 2 && textColIndex !== -1 && valueColIndex !== -1;\n\n    data.forEach((result: { [key: string]: any }) => {\n      if (!isObject(result)) {\n        res.push({ text: result });\n        return;\n      }\n\n      let keys = Object.keys(result);\n      if (keys.length > 1) {\n        if (keyValuePairs) {\n          const textKey = keys[textColIndex] as keyof typeof result;\n          const valueKey = keys[valueColIndex] as keyof typeof result;\n          if (textKey in result && valueKey in result) {\n            res.push({ text: result[textKey], value: result[valueKey] });\n          }\n        } else {\n          res.push(result);\n        }\n      } else {\n        const textKey = keys[0] as keyof typeof result;\n        res.push({ text: result[textKey] });\n      }\n    });\n\n    return res;\n  }\n\n  static findColIndex(columns: string[], colName: string): number {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i] === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  transformAnnotationResponse(options: any, data: any) {\n    const rows = data.data;\n    const columns = data.meta;\n    const result = [];\n    let hasTime = false;\n    let hasRegion = false;\n    let hasType = false;\n\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const column = columns[i];\n\n      if (column.name === 'time') {\n        hasTime = true;\n      }\n      if (column.name === 'time_end') {\n        hasRegion = true;\n      }\n      if (column.name === 'type') {\n        hasType = true;\n      }\n    }\n\n    if (!hasTime) {\n      throw new Error('Missing mandatory time column in annotation query.');\n    }\n\n    for (let i = 0, len = rows.length; i < len; i++) {\n      const row = rows[i];\n      // @TODO look to https://grafana.com/docs/grafana/latest/packages_api/data/annotationevent/\n      // and try implements all possible fields\n      const event: AnnotationEvent = {\n        annotation: options.annotation,\n        time: Math.floor(row.time),\n        timeEnd: row.time_end ? Math.floor(row.time_end) : 0,\n        isRegion: hasRegion && Math.floor(row.time_end) > 0,\n        title: row.title,\n        type: hasType && row.type ? row.type : 'annotation',\n        text: row.text,\n        tags: row.tags ? row.tags.trim().split(/\\s*,\\s*/) : [],\n      };\n      // @ts-ignore\n      result.push(event);\n    }\n\n    return result;\n  }\n}\n","export const DEFAULT_VALUES_QUERY = 'SELECT DISTINCT {field} AS value FROM {database}.{table} LIMIT 300';\nexport default class AdHocFilter {\n  tagKeys: any[];\n  tagValues: { [key: string]: any } = {};\n  datasource: any;\n  query: string;\n  adHocValuesQuery: string;\n\n  constructor(datasource: any) {\n    const queryFilter = \"database NOT IN ('system','INFORMATION_SCHEMA','information_schema')\";\n    const columnsQuery =\n      'SELECT database, table, name, type FROM system.columns WHERE {filter} ORDER BY database, table';\n\n    this.tagKeys = [];\n    this.tagValues = [];\n    this.datasource = datasource;\n    this.adHocValuesQuery = datasource.adHocValuesQuery;\n    let filter = queryFilter;\n    if (datasource.defaultDatabase.length > 0) {\n      filter = \"database = '\" + datasource.defaultDatabase + \"'\";\n    }\n    this.query = columnsQuery.replace('{filter}', filter);\n  }\n\n  // GetTagKeys fetches columns from CH tables according to provided filters\n  // if no filters applied all tables from all databases will be fetched\n  // if datasource setting `defaultDatabase` is set only tables from that database will be fetched\n  // if query param passed it will be performed instead of default\n  GetTagKeys(query?: string) {\n    let self = this;\n    if (this.tagKeys.length > 0) {\n      return Promise.resolve(this.tagKeys);\n    }\n    let q = this.query;\n    if (query && query.length > 0) {\n      q = query;\n    }\n    return this.datasource.metricFindQuery(q).then(function (response: any) {\n      return self.processTagKeysResponse(response);\n    });\n  }\n\n  processTagKeysResponse(response: any): Promise<any[]> {\n    const columnNames: { [key: string]: boolean } = {};\n\n    response.forEach((item: any) => {\n      const databasePrefix = this.datasource.defaultDatabase.length === 0 ? item.database + '.' : '';\n      const text: string = databasePrefix + item.table + '.' + item.name;\n\n      if (!this.datasource.adHocHideTableNames) {\n        this.tagKeys.push({ text: text, value: text });\n      }\n      if (item.type.slice(0, 4) === 'Enum') {\n        const regexEnum = /'(?:[^']+|'')+'/gim;\n        const enumValues = item.type.match(regexEnum) || [];\n\n        if (enumValues.length > 0) {\n          if (!this.datasource.adHocHideTableNames) {\n            this.tagValues[text] = enumValues.map((o: any) => ({ text: o, value: o }));\n          }\n          if (!this.tagValues[item.name]) {\n            this.tagValues[item.name] = this.tagValues[text];\n          } else {\n            this.tagValues[item.name].combine(this.tagValues[text]);\n          }\n        }\n      }\n      columnNames[item.name] = true;\n    });\n\n    // Store unique column names without table name\n    Object.keys(columnNames).forEach((columnName) => {\n      this.tagKeys.push({ text: columnName, value: columnName });\n    });\n\n    return Promise.resolve(this.tagKeys);\n  }\n\n  // GetTagValues returns column values according to passed options\n  // Values for fields with Enum type were already fetched in GetTagKeys func and stored in `tagValues`\n  // Values for fields which not represented on `tagValues` get from ClickHouse and cached on `tagValues`\n  async GetTagValues(options) {\n    // Determine which query to use initially\n    const initialQuery = this.adHocValuesQuery || DEFAULT_VALUES_QUERY;\n    // Function to build the query\n    let database: string, table: string, field: string;\n    const buildQuery = (queryTemplate: string) =>\n      queryTemplate.replace('{field}', field).replace('{database}', database).replace('{table}', table);\n\n    if (this.datasource.adHocHideTableNames) {\n      // @todo could be very slow\n      const allTablesColumnSQL = \"SELECT name,database,table FROM system.columns WHERE name='\" + options.key + \"'\";\n      let allValuesSQL: string[] = [];\n      let isGetAllValuesOK: boolean = await this.datasource\n        .metricFindQuery(allTablesColumnSQL)\n        .then((response: any) => {\n          allValuesSQL = response.map((item: any) => {\n            field = item.name;\n            database = item.database;\n            table = item.table;\n            return buildQuery(\"(\" + initialQuery + \")\");\n          });\n          return true;\n        })\n        .catch((error: any) => {\n          console.error(error);\n          return false;\n        });\n\n      if (!isGetAllValuesOK) {\n        return [];\n      }\n      return this.datasource\n        .metricFindQuery(allValuesSQL.join(\" UNION ALL \"))\n        .then((response: any) => {\n          // Process and cache the response\n          this.tagValues[options.key] = this.processTagValuesResponse(response);\n          return this.tagValues[options.key];\n        })\n        .catch((error: any) => {\n          this.tagValues[options.key] = [];\n          console.error(error);\n          return this.tagValues[options.key];\n        });\n    }\n\n    // If the tag values are already cached, return them immediately\n    if (Object.prototype.hasOwnProperty.call(this.tagValues, options.key)) {\n      return Promise.resolve(this.tagValues[options.key]);\n    }\n    // Split the key to extract database, table, and field\n    const keyItems = options.key.split('.');\n    if (keyItems.length < 2 || (keyItems.length === 2 && !this.datasource.defaultDatabase) || keyItems.length > 3) {\n      return Promise.resolve([]);\n    }\n\n    // Destructure key items based on their length\n    if (keyItems.length === 3) {\n      [database, table, field] = keyItems;\n    } else {\n      database = this.datasource.defaultDatabase;\n      [table, field] = keyItems;\n    }\n\n\n    // Execute the initial query\n    return this.datasource\n      .metricFindQuery(buildQuery(initialQuery))\n      .then((response: any) => {\n        // Process and cache the response\n        this.tagValues[options.key] = this.processTagValuesResponse(response);\n        return this.tagValues[options.key];\n      })\n      .catch((error: any) => {\n        this.tagValues[options.key] = [];\n        console.error(error);\n        return this.tagValues[options.key];\n      });\n  }\n\n  processTagValuesResponse(response: any) {\n    const tagValues = response.map((item: any) => ({ text: item.text, value: item.text }));\n    return Promise.resolve(tagValues);\n  }\n}\n","import { SelectableValue } from '@grafana/data';\nimport { EditorMode } from '../../../../types/types';\nimport { E2ESelectors } from '@grafana/e2e-selectors';\n\nconst Components = {\n  QueryEditor: {\n    EditorMode: {\n      options: {\n        QuerySettings: 'Query Settings',\n        SQLEditor: 'SQL Editor',\n      },\n    },\n  },\n};\n\nconst selectors: { components: E2ESelectors<typeof Components> } = {\n  components: Components,\n};\n\nexport const QueryHeaderTabs: Array<SelectableValue<EditorMode>> = [\n  { label: selectors.components.QueryEditor.EditorMode.options.QuerySettings, value: EditorMode.Builder },\n  { label: selectors.components.QueryEditor.EditorMode.options.SQLEditor, value: EditorMode.SQL },\n];\n","import React, { useEffect, useState } from 'react';\nimport { Button, Label, Modal, RadioButtonGroup } from '@grafana/ui';\nimport { EditorMode } from '../../../../types/types';\nimport { QueryHeaderProps } from './QueryHeader.types';\nimport { findDifferences } from './helpers/findDifferences';\nimport { QueryHeaderTabs } from './QueryHeader.constants';\n\nexport const QueryHeader = ({\n  editorMode,\n  setEditorMode,\n  isAnnotationView,\n  onTriggerQuery,\n  datasource,\n  query,\n  onChange,\n}: QueryHeaderProps) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [differences, setDifferences] = useState<any[]>([]);\n\n  const onEditorModeChange = (editorMode: EditorMode) => {\n    setEditorMode(editorMode);\n  };\n\n  useEffect(() => {\n    setDifferences(findDifferences(query, datasource));\n  }, [query, datasource]);\n\n  const onConfirm = () => {\n    setModalOpen(false);\n    const fieldsToReset = differences.reduce((acc, item) => {\n      acc[item.fieldName] = item.updated;\n\n      return acc;\n    }, {});\n\n    onChange({ ...query, ...fieldsToReset });\n  };\n\n  return (\n    <div style={{ display: 'flex', marginTop: '10px' }}>\n      <RadioButtonGroup\n        size=\"sm\"\n        options={QueryHeaderTabs}\n        value={editorMode}\n        onChange={(e: EditorMode) => onEditorModeChange(e!)}\n      />\n      {editorMode === EditorMode.SQL && !isAnnotationView ? (\n        <Button variant=\"primary\" icon=\"play\" size={'sm'} style={{ marginLeft: '10px' }} onClick={onTriggerQuery}>\n          Run Query\n        </Button>\n      ) : null}\n      {editorMode === EditorMode.Builder ? (\n        <>\n          <Button\n            variant=\"primary\"\n            size={'sm'}\n            icon=\"arrow-right\"\n            style={{ marginLeft: '10px' }}\n            onClick={() => setEditorMode(EditorMode.SQL)}\n          >\n            Go to Query\n          </Button>\n          {differences.length ? (\n            <Button\n              variant=\"primary\"\n              size={'sm'}\n              icon=\"sync\"\n              style={{ marginLeft: '10px' }}\n              onClick={() => setModalOpen(true)}\n            >\n              Override settings\n            </Button>\n          ) : null}\n        </>\n      ) : null}\n      <Modal\n        title={'Confirmation'}\n        isOpen={modalOpen}\n        onClickBackdrop={() => setModalOpen(false)}\n        onDismiss={() => setModalOpen(false)}\n      >\n        <div>\n          <p>Configuration will be reset to default values defined in datasource configuration</p>\n          {differences.map((item) => (\n            <Label\n              style={{ fontSize: '16px' }}\n              key={item.key}\n              description={\n                <p>\n                  {item.original} → {item.updated}\n                </p>\n              }\n            >\n              {item.key}\n            </Label>\n          ))}\n        </div>\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" onClick={() => setModalOpen(false)}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" onClick={onConfirm}>\n            Confirm\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    </div>\n  );\n};\n","import { CHQuery, TimestampFormat } from '../../../../../types/types';\nimport { CHDataSource } from '../../../../../datasource/datasource';\n\nexport function findDifferences(query: CHQuery, datasource: CHDataSource) {\n  const { defaultValues } = datasource;\n\n  const differences: any[] = [];\n\n  function checkValue(value) {\n    if (value === undefined || value.trim() === '') {\n      return 'EMPTY';\n    } else {\n      return value.trim();\n    }\n  }\n\n  if (defaultValues) {\n    if (query.dateTimeType !== defaultValues.defaultDateTimeType) {\n      differences.push({\n        key: 'Timestamp type Column',\n        original: checkValue(query.dateTimeType),\n        updated: defaultValues.defaultDateTimeType,\n        fieldName: 'dateTimeType',\n      });\n    }\n\n    if (\n      defaultValues.defaultDateTimeType === 'TIMESTAMP' &&\n      defaultValues.dateTime.defaultUint32 &&\n      query.dateTimeColDataType !== defaultValues.dateTime.defaultUint32\n    ) {\n      differences.push({\n        key: 'Timestamp Column',\n        original: checkValue(query.dateTimeColDataType),\n        updated: defaultValues.dateTime.defaultUint32,\n        fieldName: 'dateTimeColDataType',\n      });\n    }\n\n    if (\n      defaultValues.defaultDateTimeType === TimestampFormat.DateTime64 &&\n      defaultValues.dateTime.defaultDateTime64 &&\n      query.dateTimeColDataType !== defaultValues.dateTime.defaultDateTime64\n    ) {\n      differences.push({\n        key: 'Timestamp Column',\n        original: checkValue(query.dateTimeColDataType),\n        updated: defaultValues.dateTime.defaultDateTime64,\n        fieldName: 'dateTimeColDataType',\n      });\n    }\n\n    if (\n      defaultValues.defaultDateTimeType === TimestampFormat.DateTime &&\n      defaultValues.dateTime.defaultDateTime &&\n      query.dateTimeColDataType !== defaultValues.dateTime.defaultDateTime\n    ) {\n      differences.push({\n        key: 'Timestamp Column',\n        original: checkValue(query.dateTimeColDataType),\n        updated: defaultValues.dateTime.defaultDateTime,\n        fieldName: 'dateTimeColDataType',\n      });\n    }\n\n    if (\n      defaultValues.dateTime.defaultDateDate32 &&\n      query.dateColDataType !== defaultValues.dateTime.defaultDateDate32\n    ) {\n      differences.push({\n        key: 'Date column',\n        original: checkValue(query.dateColDataType),\n        updated: defaultValues.dateTime.defaultDateDate32,\n        fieldName: 'dateColDataType',\n      });\n    }\n\n    if (query.contextWindowSize !== defaultValues.contextWindowSize) {\n      differences.push({\n        key: 'Logs context window size',\n        original: checkValue(query.contextWindowSize),\n        updated: defaultValues.contextWindowSize,\n        fieldName: 'contextWindowSize',\n      });\n    }\n    if (query.useWindowFuncForMacros !== defaultValues.useWindowFuncForMacros) {\n      differences.push({\n        key: 'Use window functions for macros',\n        original: query.useWindowFuncForMacros?.toString() || 'true',\n        updated: defaultValues.useWindowFuncForMacros?.toString() || 'false',\n        fieldName: 'useWindowFuncForMacros',\n      });\n\n    }\n  }\n\n  return differences;\n}\n","import React from 'react';\n\nconst QueryMacrosInfo = () => {\n  return (\n    <div>\n      <h5>Macros</h5>\n      <pre>\n        <code>\n          {`$table - replaced with selected table name from Query Builder\\n`}\n          {`$dateCol - replaced with Date:Col value from Query Builder\\n`}\n          {`$dateTimeCol - replaced with Column:DateTime or Column:TimeStamp value from Query Builder\\n`}\n          {`$from - replaced with (timestamp with ms)/1000 value of UI selected \"Time Range:From\"\\n`}\n          {`$to - replaced with (timestamp with ms)/1000 value of UI selected \"Time Range:To\"\\n`}\n          {`$interval - replaced with selected \"Group by time interval\" value (as a number of seconds)\\n`}\n          {`$timeFilter - replaced with currently selected \"Time Range\". Require Column:Date and Column:DateTime or Column:TimeStamp to be selected\\n`}\n          {`$timeSeries - replaced with special ClickHouse construction to convert results as time-series data. Use it as \"SELECT $timeSeries...\". Require Column:DateTime or Column:TimeStamp to be selected\\n`}\n          {`$naturalTimeSeries - replaced with special ClickHouse construction to convert results as time-series data in logical/natural units. Use it as \"SELECT $naturalTimeSeries...\". Require Column:DateTime or Column:TimeStamp to be selected\\n`}\n          {`$unescape - unescapes variable value by removing single quotes. Used for multiple-value string variables: \"SELECT $unescape($column) FROM requests WHERE $unescape($column) = 5\"\\n`}\n          {`$adhoc - replaced with a rendered ad-hoc filter expression, or \"1\" if no ad-hoc filters exist\\n`}\n          {`$conditionalTest - add \\`SQL predicate\\` filter expression only if $variable have non empty value\\n`}\n          {`A description of macros is available by typing their names in Raw Editor\\n`}\n        </code>\n      </pre>\n\n      <h5>Functions (Only one function per query allowed)</h5>\n      <pre>\n        <code>\n          {`$rate(cols...) - function to convert query results as \"change rate per interval\". Example usage: $rate(countIf(Type = 200) * 60 AS good, countIf(Type != 200) * 60 AS bad) FROM requests\\n`}\n          {`$columns(key, value) - function to query values as an array of [key, value], where key would be used as a label. Example usage: $columns(Type, count() c) FROM requests\\n`}\n          {`$columnsMs(key, value) - same with $columns but time will in milliseconds. Example usage: $columns(Type, count() c) FROM requests\\n`}\n          {`$rateColumns(key, value) - is a combination of $columns and $rate. Example usage: $rateColumns(Type, count() c) FROM requests\\n`}\n          {`$rateColumnsAggregated(key, subkey, aggFunction1, value1, ... aggFunctionN, valueN) - if you need calculate \\`$rate\\` for higher cardinality dimension and then aggregate by lower cardinality dimension. Example usage: $rateColumnsAggregated(datacenter, concat(datacenter,interface) AS dc_interface, sum, tx_bytes * 1014 AS tx_kbytes, sum, max(rx_bytes) AS rx_bytes) FROM traffic\\n`}\n          {`$perSecond(cols...) - converts query results as \"change rate per interval\" for Counter-like(growing only) metrics\\n`}\n          {`$perSecondColumns(key, value) - is a combination of $columns and $perSecond for Counter-like metrics\\n`}\n          {`$perSecondColumnsAggregated(key, subkey, aggFunction1, value1, ... aggFunctionN, valueN) - if you need to calculate \\`perSecond\\` for higher cardinality dimension and then aggregate by lower cardinality dimension\\n`}\n          {`$delta(cols...) - converts query results as \"delta value inside interval\" for Counter-like(growing only) metrics, will negative if counter reset\\n`}\n          {`$deltaColumns(key, value) - is a combination of $columns and $delta for Counter-like metrics\\n`}\n          {`$deltaColumnsAggregated(key, subkey, aggFunction1, value1, ... aggFunctionN, valueN) - if you need to calculate \\`delta\\` for higher cardinality dimension and then aggregate by lower cardinality dimension\\n`}\n          {`$increase(cols...) - converts query results as \"non-negative delta value inside interval\" for Counter-like(growing only) metrics, will zero if counter reset and delta less zero\\n`}\n          {`$increaseColumns(key, value) - is a combination of $columns and $increase for Counter-like metrics\\n`}\n          {`$increaseColumnsAggregated(key, subkey, aggFunction1, value1, ... aggFunctionN, valueN) - if you need to calculate \\`increase\\` for higher cardinality dimension and then aggregate by lower cardinality dimension\\n`}\n        </code>\n      </pre>\n    </div>\n  );\n};\n\nexport default QueryMacrosInfo;\n","export default [\n  'SELECT',\n  'CASE',\n  'THEN',\n  'DISTINCT',\n  'INSERT',\n  'UPDATE',\n  'DELETE',\n  'WHERE',\n  'AND',\n  'OR',\n  'OFFSET',\n  'HAVING',\n  'AS',\n  'GLOBAL',\n  'FROM',\n  'WHEN',\n  'ELSE',\n  'END',\n  'TYPE',\n  'LEFT',\n  'RIGHT',\n  'USING',\n  'JOIN',\n  'ON',\n  'OUTER',\n  'DESC',\n  'ASC',\n  'CREATE',\n  'TABLE',\n  'PRIMARY',\n  'KEY',\n  'FOREIGN',\n  'NOT',\n  'REFERENCES',\n  'DEFAULT',\n  'INNER',\n  'CROSS',\n  'NATURAL',\n  'DATABASE',\n  'DROP',\n  'GRANT',\n  'ANY',\n  'BETWEEN',\n  'ATTACH',\n  'DETACH',\n  'CAST',\n  'WITH',\n  'BIT_AND',\n  'BIT_OR',\n  'BIT_XOR',\n  'DESCRIBE',\n  'OPTIMIZE',\n  'PREWHERE',\n  'TOTALS',\n  'DATABASES',\n  'PROCESSLIST',\n  'SHOW',\n  'LIMIT',\n  'IF',\n  'IF NOT EXISTS',\n  'IF EXISTS',\n  'GROUP',\n  'ORDER',\n  'BY',\n  'IN',\n  'FORMAT',\n  'GROUP BY',\n  'ORDER BY',\n  'UNION ALL',\n  'UNION DISTINCT',\n  'ALTER',\n];\n","export default [\n  'BIT_AND',\n  'BIT_OR',\n  'BIT_XOR',\n  'CAST',\n  'CHARACTER_LENGTH',\n  'CHAR_LENGTH',\n  'COVAR_POP',\n  'COVAR_SAMP',\n  'CRC32',\n  'CRC32IEEE',\n  'CRC64',\n  'DATABASE',\n  'DATE',\n  'DAY',\n  'DAYOFMONTH',\n  'DAYOFWEEK',\n  'DAYOFYEAR',\n  'FQDN',\n  'FROM_BASE64',\n  'FROM_UNIXTIME',\n  'HOUR',\n  'INET6_ATON',\n  'INET6_NTOA',\n  'INET_ATON',\n  'INET_NTOA',\n  'IPv4CIDRToRange',\n  'IPv4NumToString',\n  'IPv4NumToStringClassC',\n  'IPv4StringToNum',\n  'IPv4StringToNumOrDefault',\n  'IPv4StringToNumOrNull',\n  'IPv4ToIPv6',\n  'IPv6CIDRToRange',\n  'IPv6NumToString',\n  'IPv6StringToNum',\n  'IPv6StringToNumOrDefault',\n  'IPv6StringToNumOrNull',\n  'JSONExtract',\n  'JSONExtractArrayRaw',\n  'JSONExtractBool',\n  'JSONExtractFloat',\n  'JSONExtractInt',\n  'JSONExtractKeys',\n  'JSONExtractKeysAndValues',\n  'JSONExtractKeysAndValuesRaw',\n  'JSONExtractRaw',\n  'JSONExtractString',\n  'JSONExtractUInt',\n  'JSONHas',\n  'JSONKey',\n  'JSONLength',\n  'JSONType',\n  'JSON_EXISTS',\n  'JSON_QUERY',\n  'JSON_VALUE',\n  'L1Distance',\n  'L1Norm',\n  'L1Normalize',\n  'L2Distance',\n  'L2Norm',\n  'L2Normalize',\n  'LAST_DAY',\n  'LinfDistance',\n  'LinfNorm',\n  'LinfNormalize',\n  'LpDistance',\n  'LpNorm',\n  'LpNormalize',\n  'MACNumToString',\n  'MACStringToNum',\n  'MACStringToOUI',\n  'MD4',\n  'MD5',\n  'MINUTE',\n  'MONTH',\n  'QUARTER',\n  'REGEXP_MATCHES',\n  'REGEXP_REPLACE',\n  'SECOND',\n  'SHA1',\n  'SHA224',\n  'SHA256',\n  'SHA384',\n  'SHA512',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'SVG',\n  'TO_BASE64',\n  'URLHash',\n  'URLHierarchy',\n  'URLPathHierarchy',\n  'UUIDNumToString',\n  'UUIDStringToNum',\n  'VAR_POP',\n  'VAR_SAMP',\n  'YEAR',\n  '_CAST',\n  '__bitBoolMaskAnd',\n  '__bitBoolMaskOr',\n  '__bitSwapLastTwo',\n  '__bitWrapperFunc',\n  '__getScalar',\n  'abs',\n  'accurateCast',\n  'accurateCastOrDefault',\n  'accurateCastOrNull',\n  'accurate_Cast',\n  'accurate_CastOrNull',\n  'acos',\n  'acosh',\n  'addDays',\n  'addHours',\n  'addMicroseconds',\n  'addMilliseconds',\n  'addMinutes',\n  'addMonths',\n  'addNanoseconds',\n  'addQuarters',\n  'addSeconds',\n  'addWeeks',\n  'addYears',\n  'addressToLine',\n  'addressToLineWithInlines',\n  'addressToSymbol',\n  'aes_decrypt_mysql',\n  'aes_encrypt_mysql',\n  'aggThrow',\n  'alphaTokens',\n  'and',\n  'any',\n  'anyHeavy',\n  'anyLast',\n  'appendTrailingCharIfAbsent',\n  'argMax',\n  'argMin',\n  'array',\n  'arrayAUC',\n  'arrayAll',\n  'arrayAvg',\n  'arrayCompact',\n  'arrayConcat',\n  'arrayCosineDistance',\n  'arrayCount',\n  'arrayCumSum',\n  'arrayCumSumNonNegative',\n  'arrayDifference',\n  'arrayDistinct',\n  'arrayElement',\n  'arrayEnumerate',\n  'arrayEnumerateDense',\n  'arrayEnumerateDenseRanked',\n  'arrayEnumerateUniq',\n  'arrayEnumerateUniqRanked',\n  'arrayExists',\n  'arrayFill',\n  'arrayFilter',\n  'arrayFirst',\n  'arrayFirstIndex',\n  'arrayFirstOrNull',\n  'arrayFlatten',\n  'arrayIntersect',\n  'arrayJoin',\n  'arrayL1Distance',\n  'arrayL1Norm',\n  'arrayL2Distance',\n  'arrayL2Norm',\n  'arrayLast',\n  'arrayLastIndex',\n  'arrayLastOrNull',\n  'arrayLinfDistance',\n  'arrayLinfNorm',\n  'arrayMap',\n  'arrayMax',\n  'arrayMin',\n  'arrayPopBack',\n  'arrayPopFront',\n  'arrayProduct',\n  'arrayPushBack',\n  'arrayPushFront',\n  'arrayReduce',\n  'arrayReduceInRanges',\n  'arrayResize',\n  'arrayReverse',\n  'arrayReverseFill',\n  'arrayReverseSort',\n  'arrayReverseSplit',\n  'arraySlice',\n  'arraySort',\n  'arraySplit',\n  'arrayStringConcat',\n  'arraySum',\n  'arrayUniq',\n  'arrayWithConstant',\n  'arrayZip',\n  'asin',\n  'asinh',\n  'assumeNotNull',\n  'atan',\n  'atan2',\n  'atanh',\n  'avg',\n  'avgWeighted',\n  'bar',\n  'base64Decode',\n  'base64Encode',\n  'basename',\n  'bin',\n  'bitAnd',\n  'bitCount',\n  'bitHammingDistance',\n  'bitNot',\n  'bitOr',\n  'bitPositionsToArray',\n  'bitRotateLeft',\n  'bitRotateRight',\n  'bitShiftLeft',\n  'bitShiftRight',\n  'bitSlice',\n  'bitTest',\n  'bitTestAll',\n  'bitTestAny',\n  'bitXor',\n  'bitmapAnd',\n  'bitmapAndCardinality',\n  'bitmapAndnot',\n  'bitmapAndnotCardinality',\n  'bitmapBuild',\n  'bitmapCardinality',\n  'bitmapContains',\n  'bitmapHasAll',\n  'bitmapHasAny',\n  'bitmapMax',\n  'bitmapMin',\n  'bitmapOr',\n  'bitmapOrCardinality',\n  'bitmapSubsetInRange',\n  'bitmapSubsetLimit',\n  'bitmapToArray',\n  'bitmapTransform',\n  'bitmapXor',\n  'bitmapXorCardinality',\n  'bitmaskToArray',\n  'bitmaskToList',\n  'blockNumber',\n  'blockSerializedSize',\n  'blockSize',\n  'boundingRatio',\n  'buildId',\n  'byteSize',\n  'caseWithExpr',\n  'caseWithExpression',\n  'caseWithoutExpr',\n  'caseWithoutExpression',\n  'categoricalInformationValue',\n  'cbrt',\n  'ceil',\n  'ceiling',\n  'char',\n  'cityHash64',\n  'coalesce',\n  'concat',\n  'concatAssumeInjective',\n  'connectionId',\n  'connection_id',\n  'contingency',\n  'convertCharset',\n  'corr',\n  'corrStable',\n  'cos',\n  'cosh',\n  'cosineDistance',\n  'count',\n  'countDigits',\n  'countEqual',\n  'countMatches',\n  'countMatchesCaseInsensitive',\n  'countSubstrings',\n  'countSubstringsCaseInsensitive',\n  'countSubstringsCaseInsensitiveUTF8',\n  'covarPop',\n  'covarPopStable',\n  'covarSamp',\n  'covarSampStable',\n  'cramersV',\n  'cramersVBiasCorrected',\n  'currentDatabase',\n  'currentProfiles',\n  'currentRoles',\n  'currentUser',\n  'cutFragment',\n  'cutIPv6',\n  'cutQueryString',\n  'cutQueryStringAndFragment',\n  'cutToFirstSignificantSubdomain',\n  'cutToFirstSignificantSubdomainCustom',\n  'cutToFirstSignificantSubdomainCustomWithWWW',\n  'cutToFirstSignificantSubdomainWithWWW',\n  'cutURLParameter',\n  'cutWWW',\n  'dateDiff',\n  'dateName',\n  'dateTime64ToSnowflake',\n  'dateTimeToSnowflake',\n  'dateTrunc',\n  'date_trunc',\n  'decodeURLComponent',\n  'decodeURLFormComponent',\n  'decodeXMLComponent',\n  'decrypt',\n  'defaultProfiles',\n  'defaultRoles',\n  'defaultValueOfArgumentType',\n  'defaultValueOfTypeName',\n  'degrees',\n  'deltaSum',\n  'deltaSumTimestamp',\n  'demangle',\n  'dense_rank',\n  'detectCharset',\n  'detectLanguage',\n  'detectLanguageMixed',\n  'detectLanguageUnknown',\n  'detectProgrammingLanguage',\n  'detectTonality',\n  'dictGet',\n  'dictGetChildren',\n  'dictGetDate',\n  'dictGetDateOrDefault',\n  'dictGetDateTime',\n  'dictGetDateTimeOrDefault',\n  'dictGetDescendants',\n  'dictGetFloat32',\n  'dictGetFloat32OrDefault',\n  'dictGetFloat64',\n  'dictGetFloat64OrDefault',\n  'dictGetHierarchy',\n  'dictGetInt16',\n  'dictGetInt16OrDefault',\n  'dictGetInt32',\n  'dictGetInt32OrDefault',\n  'dictGetInt64',\n  'dictGetInt64OrDefault',\n  'dictGetInt8',\n  'dictGetInt8OrDefault',\n  'dictGetOrDefault',\n  'dictGetOrNull',\n  'dictGetString',\n  'dictGetStringOrDefault',\n  'dictGetUInt16',\n  'dictGetUInt16OrDefault',\n  'dictGetUInt32',\n  'dictGetUInt32OrDefault',\n  'dictGetUInt64',\n  'dictGetUInt64OrDefault',\n  'dictGetUInt8',\n  'dictGetUInt8OrDefault',\n  'dictGetUUID',\n  'dictGetUUIDOrDefault',\n  'dictHas',\n  'dictIsIn',\n  'distanceL1',\n  'distanceL2',\n  'distanceLinf',\n  'distanceLp',\n  'divide',\n  'domain',\n  'domainWithoutWWW',\n  'dotProduct',\n  'dumpColumnStructure',\n  'e',\n  'empty',\n  'emptyArrayDate',\n  'emptyArrayDateTime',\n  'emptyArrayFloat32',\n  'emptyArrayFloat64',\n  'emptyArrayInt16',\n  'emptyArrayInt32',\n  'emptyArrayInt64',\n  'emptyArrayInt8',\n  'emptyArrayString',\n  'emptyArrayToSingle',\n  'emptyArrayUInt16',\n  'emptyArrayUInt32',\n  'emptyArrayUInt64',\n  'emptyArrayUInt8',\n  'enabledProfiles',\n  'enabledRoles',\n  'encodeURLComponent',\n  'encodeURLFormComponent',\n  'encodeXMLComponent',\n  'encrypt',\n  'endsWith',\n  'entropy',\n  'equals',\n  'erf',\n  'erfc',\n  'errorCodeToName',\n  'evalMLMethod',\n  'exp',\n  'exp10',\n  'exp2',\n  'exponentialMovingAverage',\n  'exponentialTimeDecayedAvg',\n  'exponentialTimeDecayedCount',\n  'exponentialTimeDecayedMax',\n  'exponentialTimeDecayedSum',\n  'extract',\n  'extractAll',\n  'extractAllGroups',\n  'extractAllGroupsHorizontal',\n  'extractAllGroupsVertical',\n  'extractGroups',\n  'extractTextFromHTML',\n  'extractURLParameter',\n  'extractURLParameterNames',\n  'extractURLParameters',\n  'farmFingerprint64',\n  'farmHash64',\n  'file',\n  'filesystemAvailable',\n  'filesystemCapacity',\n  'filesystemFree',\n  'finalizeAggregation',\n  'firstSignificantSubdomain',\n  'firstSignificantSubdomainCustom',\n  'first_value',\n  'flatten',\n  'flattenTuple',\n  'floor',\n  'format',\n  'formatDateTime',\n  'formatReadableQuantity',\n  'formatReadableSize',\n  'formatReadableTimeDelta',\n  'formatRow',\n  'formatRowNoNewline',\n  'fragment',\n  'fromModifiedJulianDay',\n  'fromModifiedJulianDayOrNull',\n  'fromUnixTimestamp',\n  'fromUnixTimestamp64Micro',\n  'fromUnixTimestamp64Milli',\n  'fromUnixTimestamp64Nano',\n  'fullHostName',\n  'fuzzBits',\n  'gccMurmurHash',\n  'gcd',\n  'generateUUIDv4',\n  'geoDistance',\n  'geoToH3',\n  'geoToS2',\n  'geohashDecode',\n  'geohashEncode',\n  'geohashesInBox',\n  'getMacro',\n  'getOSKernelVersion',\n  'getServerPort',\n  'getSetting',\n  'getSizeOfEnumType',\n  'getTypeSerializationStreams',\n  'globalIn',\n  'globalInIgnoreSet',\n  'globalNotIn',\n  'globalNotInIgnoreSet',\n  'globalNotNullIn',\n  'globalNotNullInIgnoreSet',\n  'globalNullIn',\n  'globalNullInIgnoreSet',\n  'globalVariable',\n  'greatCircleAngle',\n  'greatCircleDistance',\n  'greater',\n  'greaterOrEquals',\n  'greatest',\n  'groupArray',\n  'groupArrayInsertAt',\n  'groupArrayMovingAvg',\n  'groupArrayMovingSum',\n  'groupArraySample',\n  'groupBitAnd',\n  'groupBitOr',\n  'groupBitXor',\n  'groupBitmap',\n  'groupBitmapAnd',\n  'groupBitmapOr',\n  'groupBitmapXor',\n  'groupUniqArray',\n  'h3CellAreaM2',\n  'h3CellAreaRads2',\n  'h3Distance',\n  'h3EdgeAngle',\n  'h3EdgeLengthKm',\n  'h3EdgeLengthM',\n  'h3ExactEdgeLengthKm',\n  'h3ExactEdgeLengthM',\n  'h3ExactEdgeLengthRads',\n  'h3GetBaseCell',\n  'h3GetFaces',\n  'h3GetPentagonIndexes',\n  'h3GetRes0Indexes',\n  'h3GetResolution',\n  'h3HexAreaKm2',\n  'h3HexAreaM2',\n  'h3HexRing',\n  'h3IndexesAreNeighbors',\n  'h3IsPentagon',\n  'h3IsResClassIII',\n  'h3IsValid',\n  'h3Line',\n  'h3NumHexagons',\n  'h3PointDistKm',\n  'h3PointDistM',\n  'h3PointDistRads',\n  'h3ToCenterChild',\n  'h3ToChildren',\n  'h3ToGeo',\n  'h3ToGeoBoundary',\n  'h3ToParent',\n  'h3ToString',\n  'h3kRing',\n  'halfMD5',\n  'has',\n  'hasAll',\n  'hasAny',\n  'hasColumnInTable',\n  'hasSubstr',\n  'hasThreadFuzzer',\n  'hasToken',\n  'hasTokenCaseInsensitive',\n  'hex',\n  'histogram',\n  'hiveHash',\n  'hop',\n  'hopEnd',\n  'hopStart',\n  'hostName',\n  'hostname',\n  'hypot',\n  'identity',\n  'if',\n  'ifNotFinite',\n  'ifNull',\n  'ignore',\n  'ilike',\n  'in',\n  'inIgnoreSet',\n  'indexHint',\n  'indexOf',\n  'initialQueryID',\n  'initial_query_id',\n  'initializeAggregation',\n  'intDiv',\n  'intDivOrZero',\n  'intExp10',\n  'intExp2',\n  'intHash32',\n  'intHash64',\n  'intervalLengthSum',\n  'isConstant',\n  'isDecimalOverflow',\n  'isFinite',\n  'isIPAddressInRange',\n  'isIPv4String',\n  'isIPv6String',\n  'isInfinite',\n  'isNaN',\n  'isNotNull',\n  'isNull',\n  'isValidJSON',\n  'isValidUTF8',\n  'isZeroOrNull',\n  'javaHash',\n  'javaHashUTF16LE',\n  'joinGet',\n  'joinGetOrNull',\n  'jumpConsistentHash',\n  'kostikConsistentHash',\n  'kurtPop',\n  'kurtSamp',\n  'lagInFrame',\n  'last_value',\n  'lcase',\n  'lcm',\n  'leadInFrame',\n  'least',\n  'left',\n  'leftPad',\n  'leftPadUTF8',\n  'leftUTF8',\n  'lemmatize',\n  'length',\n  'lengthUTF8',\n  'less',\n  'lessOrEquals',\n  'lgamma',\n  'like',\n  'ln',\n  'locate',\n  'log',\n  'log10',\n  'log1p',\n  'log2',\n  'logTrace',\n  'lowCardinalityIndices',\n  'lowCardinalityKeys',\n  'lower',\n  'lowerUTF8',\n  'lpad',\n  'makeDate',\n  'makeDate32',\n  'makeDateTime',\n  'makeDateTime64',\n  'mannWhitneyUTest',\n  'map',\n  'mapAdd',\n  'mapApply',\n  'mapContains',\n  'mapContainsKeyLike',\n  'mapExtractKeyLike',\n  'mapFilter',\n  'mapKeys',\n  'mapPopulateSeries',\n  'mapSubtract',\n  'mapUpdate',\n  'mapValues',\n  'match',\n  'materialize',\n  'max',\n  'max2',\n  'maxIntersections',\n  'maxIntersectionsPosition',\n  'maxMappedArrays',\n  'meanZTest',\n  'median',\n  'medianBFloat16',\n  'medianBFloat16Weighted',\n  'medianDeterministic',\n  'medianExact',\n  'medianExactHigh',\n  'medianExactLow',\n  'medianExactWeighted',\n  'medianTDigest',\n  'medianTDigestWeighted',\n  'medianTiming',\n  'medianTimingWeighted',\n  'meiliMatch',\n  'metroHash64',\n  'mid',\n  'min',\n  'min2',\n  'minMappedArrays',\n  'minSampleSizeContinous',\n  'minSampleSizeConversion',\n  'minus',\n  'mod',\n  'modelEvaluate',\n  'modulo',\n  'moduloLegacy',\n  'moduloOrZero',\n  'monthName',\n  'multiFuzzyMatchAllIndices',\n  'multiFuzzyMatchAny',\n  'multiFuzzyMatchAnyIndex',\n  'multiIf',\n  'multiMatchAllIndices',\n  'multiMatchAny',\n  'multiMatchAnyIndex',\n  'multiSearchAllPositions',\n  'multiSearchAllPositionsCaseInsensitive',\n  'multiSearchAllPositionsCaseInsensitiveUTF8',\n  'multiSearchAllPositionsUTF8',\n  'multiSearchAny',\n  'multiSearchAnyCaseInsensitive',\n  'multiSearchAnyCaseInsensitiveUTF8',\n  'multiSearchAnyUTF8',\n  'multiSearchFirstIndex',\n  'multiSearchFirstIndexCaseInsensitive',\n  'multiSearchFirstIndexCaseInsensitiveUTF8',\n  'multiSearchFirstIndexUTF8',\n  'multiSearchFirstPosition',\n  'multiSearchFirstPositionCaseInsensitive',\n  'multiSearchFirstPositionCaseInsensitiveUTF8',\n  'multiSearchFirstPositionUTF8',\n  'multiply',\n  'murmurHash2_32',\n  'murmurHash2_64',\n  'murmurHash3_128',\n  'murmurHash3_32',\n  'murmurHash3_64',\n  'negate',\n  'neighbor',\n  'netloc',\n  'ngramDistance',\n  'ngramDistanceCaseInsensitive',\n  'ngramDistanceCaseInsensitiveUTF8',\n  'ngramDistanceUTF8',\n  'ngramMinHash',\n  'ngramMinHashArg',\n  'ngramMinHashArgCaseInsensitive',\n  'ngramMinHashArgCaseInsensitiveUTF8',\n  'ngramMinHashArgUTF8',\n  'ngramMinHashCaseInsensitive',\n  'ngramMinHashCaseInsensitiveUTF8',\n  'ngramMinHashUTF8',\n  'ngramSearch',\n  'ngramSearchCaseInsensitive',\n  'ngramSearchCaseInsensitiveUTF8',\n  'ngramSearchUTF8',\n  'ngramSimHash',\n  'ngramSimHashCaseInsensitive',\n  'ngramSimHashCaseInsensitiveUTF8',\n  'ngramSimHashUTF8',\n  'ngrams',\n  'normL1',\n  'normL2',\n  'normLinf',\n  'normLp',\n  'normalizeL1',\n  'normalizeL2',\n  'normalizeLinf',\n  'normalizeLp',\n  'normalizeQuery',\n  'normalizeQueryKeepNames',\n  'normalizeUTF8NFC',\n  'normalizeUTF8NFD',\n  'normalizeUTF8NFKC',\n  'normalizeUTF8NFKD',\n  'normalizedQueryHash',\n  'normalizedQueryHashKeepNames',\n  'not',\n  'notEmpty',\n  'notEquals',\n  'notILike',\n  'notIn',\n  'notInIgnoreSet',\n  'notLike',\n  'notNullIn',\n  'notNullInIgnoreSet',\n  'nothing',\n  'now',\n  'now64',\n  'nth_value',\n  'nullIf',\n  'nullIn',\n  'nullInIgnoreSet',\n  'or',\n  'parseDateTime32BestEffort',\n  'parseDateTime32BestEffortOrNull',\n  'parseDateTime32BestEffortOrZero',\n  'parseDateTime64BestEffort',\n  'parseDateTime64BestEffortOrNull',\n  'parseDateTime64BestEffortOrZero',\n  'parseDateTimeBestEffort',\n  'parseDateTimeBestEffortOrNull',\n  'parseDateTimeBestEffortOrZero',\n  'parseDateTimeBestEffortUS',\n  'parseDateTimeBestEffortUSOrNull',\n  'parseDateTimeBestEffortUSOrZero',\n  'partitionId',\n  'path',\n  'pathFull',\n  'pi',\n  'plus',\n  'pointInEllipses',\n  'pointInPolygon',\n  'polygonAreaCartesian',\n  'polygonAreaSpherical',\n  'polygonConvexHullCartesian',\n  'polygonPerimeterCartesian',\n  'polygonPerimeterSpherical',\n  'polygonsDistanceCartesian',\n  'polygonsDistanceSpherical',\n  'polygonsEqualsCartesian',\n  'polygonsIntersectionCartesian',\n  'polygonsIntersectionSpherical',\n  'polygonsSymDifferenceCartesian',\n  'polygonsSymDifferenceSpherical',\n  'polygonsUnionCartesian',\n  'polygonsUnionSpherical',\n  'polygonsWithinCartesian',\n  'polygonsWithinSpherical',\n  'port',\n  'position',\n  'positionCaseInsensitive',\n  'positionCaseInsensitiveUTF8',\n  'positionUTF8',\n  'pow',\n  'power',\n  'proportionsZTest',\n  'protocol',\n  'quantile',\n  'quantileBFloat16',\n  'quantileBFloat16Weighted',\n  'quantileDeterministic',\n  'quantileExact',\n  'quantileExactExclusive',\n  'quantileExactHigh',\n  'quantileExactInclusive',\n  'quantileExactLow',\n  'quantileExactWeighted',\n  'quantileTDigest',\n  'quantileTDigestWeighted',\n  'quantileTiming',\n  'quantileTimingWeighted',\n  'quantiles',\n  'quantilesBFloat16',\n  'quantilesBFloat16Weighted',\n  'quantilesDeterministic',\n  'quantilesExact',\n  'quantilesExactExclusive',\n  'quantilesExactHigh',\n  'quantilesExactInclusive',\n  'quantilesExactLow',\n  'quantilesExactWeighted',\n  'quantilesTDigest',\n  'quantilesTDigestWeighted',\n  'quantilesTiming',\n  'quantilesTimingWeighted',\n  'queryID',\n  'queryString',\n  'queryStringAndFragment',\n  'query_id',\n  'radians',\n  'rand',\n  'rand32',\n  'rand64',\n  'randConstant',\n  'randomFixedString',\n  'randomPrintableASCII',\n  'randomString',\n  'randomStringUTF8',\n  'range',\n  'rank',\n  'rankCorr',\n  'readWKTMultiPolygon',\n  'readWKTPoint',\n  'readWKTPolygon',\n  'readWKTRing',\n  'regexpQuoteMeta',\n  'regionHierarchy',\n  'regionIn',\n  'regionToArea',\n  'regionToCity',\n  'regionToContinent',\n  'regionToCountry',\n  'regionToDistrict',\n  'regionToName',\n  'regionToPopulation',\n  'regionToTopContinent',\n  'reinterpret',\n  'reinterpretAsDate',\n  'reinterpretAsDateTime',\n  'reinterpretAsFixedString',\n  'reinterpretAsFloat32',\n  'reinterpretAsFloat64',\n  'reinterpretAsInt128',\n  'reinterpretAsInt16',\n  'reinterpretAsInt256',\n  'reinterpretAsInt32',\n  'reinterpretAsInt64',\n  'reinterpretAsInt8',\n  'reinterpretAsString',\n  'reinterpretAsUInt128',\n  'reinterpretAsUInt16',\n  'reinterpretAsUInt256',\n  'reinterpretAsUInt32',\n  'reinterpretAsUInt64',\n  'reinterpretAsUInt8',\n  'reinterpretAsUUID',\n  'repeat',\n  'replace',\n  'replaceAll',\n  'replaceOne',\n  'replaceRegexpAll',\n  'replaceRegexpOne',\n  'replicate',\n  'retention',\n  'reverse',\n  'reverseUTF8',\n  'right',\n  'rightPad',\n  'rightPadUTF8',\n  'rightUTF8',\n  'round',\n  'roundAge',\n  'roundBankers',\n  'roundDown',\n  'roundDuration',\n  'roundToExp2',\n  'rowNumberInAllBlocks',\n  'rowNumberInBlock',\n  'row_number',\n  'rpad',\n  'runningAccumulate',\n  'runningConcurrency',\n  'runningDifference',\n  'runningDifferenceStartingWithFirstValue',\n  's2CapContains',\n  's2CapUnion',\n  's2CellsIntersect',\n  's2GetNeighbors',\n  's2RectAdd',\n  's2RectContains',\n  's2RectIntersection',\n  's2RectUnion',\n  's2ToGeo',\n  'scalarProduct',\n  'sequenceCount',\n  'sequenceMatch',\n  'sequenceNextNode',\n  'serverUUID',\n  'shardCount',\n  'shardNum',\n  'sigmoid',\n  'sign',\n  'simpleJSONExtractBool',\n  'simpleJSONExtractFloat',\n  'simpleJSONExtractInt',\n  'simpleJSONExtractRaw',\n  'simpleJSONExtractString',\n  'simpleJSONExtractUInt',\n  'simpleJSONHas',\n  'simpleLinearRegression',\n  'sin',\n  'singleValueOrNull',\n  'sinh',\n  'sipHash128',\n  'sipHash64',\n  'skewPop',\n  'skewSamp',\n  'sleep',\n  'sleepEachRow',\n  'snowflakeToDateTime',\n  'snowflakeToDateTime64',\n  'sparkbar',\n  'splitByChar',\n  'splitByNonAlpha',\n  'splitByRegexp',\n  'splitByString',\n  'splitByWhitespace',\n  'sqrt',\n  'startsWith',\n  'stddevPop',\n  'stddevPopStable',\n  'stddevSamp',\n  'stddevSampStable',\n  'stem',\n  'stochasticLinearRegression',\n  'stochasticLogisticRegression',\n  'stringToH3',\n  'studentTTest',\n  'subBitmap',\n  'substr',\n  'substring',\n  'substringUTF8',\n  'subtractDays',\n  'subtractHours',\n  'subtractMicroseconds',\n  'subtractMilliseconds',\n  'subtractMinutes',\n  'subtractMonths',\n  'subtractNanoseconds',\n  'subtractQuarters',\n  'subtractSeconds',\n  'subtractWeeks',\n  'subtractYears',\n  'sum',\n  'sumCount',\n  'sumKahan',\n  'sumMapFiltered',\n  'sumMapFilteredWithOverflow',\n  'sumMapWithOverflow',\n  'sumMappedArrays',\n  'sumWithOverflow',\n  'svg',\n  'synonyms',\n  'tan',\n  'tanh',\n  'tcpPort',\n  'tgamma',\n  'theilsU',\n  'throwIf',\n  'tid',\n  'timeSlot',\n  'timeSlots',\n  'timeZone',\n  'timeZoneOf',\n  'timeZoneOffset',\n  'timezone',\n  'timezoneOf',\n  'timezoneOffset',\n  'toBool',\n  'toColumnTypeName',\n  'toDate',\n  'toDate32',\n  'toDate32OrDefault',\n  'toDate32OrNull',\n  'toDate32OrZero',\n  'toDateOrDefault',\n  'toDateOrNull',\n  'toDateOrZero',\n  'toDateTime',\n  'toDateTime32',\n  'toDateTime64',\n  'toDateTime64OrDefault',\n  'toDateTime64OrNull',\n  'toDateTime64OrZero',\n  'toDateTimeOrDefault',\n  'toDateTimeOrNull',\n  'toDateTimeOrZero',\n  'toDayOfMonth',\n  'toDayOfWeek',\n  'toDayOfYear',\n  'toDecimal128',\n  'toDecimal128OrDefault',\n  'toDecimal128OrNull',\n  'toDecimal128OrZero',\n  'toDecimal256',\n  'toDecimal256OrDefault',\n  'toDecimal256OrNull',\n  'toDecimal256OrZero',\n  'toDecimal32',\n  'toDecimal32OrDefault',\n  'toDecimal32OrNull',\n  'toDecimal32OrZero',\n  'toDecimal64',\n  'toDecimal64OrDefault',\n  'toDecimal64OrNull',\n  'toDecimal64OrZero',\n  'toFixedString',\n  'toFloat32',\n  'toFloat32OrDefault',\n  'toFloat32OrNull',\n  'toFloat32OrZero',\n  'toFloat64',\n  'toFloat64OrDefault',\n  'toFloat64OrNull',\n  'toFloat64OrZero',\n  'toHour',\n  'toIPv4',\n  'toIPv4OrDefault',\n  'toIPv4OrNull',\n  'toIPv6',\n  'toIPv6OrDefault',\n  'toIPv6OrNull',\n  'toISOWeek',\n  'toISOYear',\n  'toInt128',\n  'toInt128OrDefault',\n  'toInt128OrNull',\n  'toInt128OrZero',\n  'toInt16',\n  'toInt16OrDefault',\n  'toInt16OrNull',\n  'toInt16OrZero',\n  'toInt256',\n  'toInt256OrDefault',\n  'toInt256OrNull',\n  'toInt256OrZero',\n  'toInt32',\n  'toInt32OrDefault',\n  'toInt32OrNull',\n  'toInt32OrZero',\n  'toInt64',\n  'toInt64OrDefault',\n  'toInt64OrNull',\n  'toInt64OrZero',\n  'toInt8',\n  'toInt8OrDefault',\n  'toInt8OrNull',\n  'toInt8OrZero',\n  'toIntervalDay',\n  'toIntervalHour',\n  'toIntervalMicrosecond',\n  'toIntervalMillisecond',\n  'toIntervalMinute',\n  'toIntervalMonth',\n  'toIntervalNanosecond',\n  'toIntervalQuarter',\n  'toIntervalSecond',\n  'toIntervalWeek',\n  'toIntervalYear',\n  'toJSONString',\n  'toLastDayOfMonth',\n  'toLowCardinality',\n  'toMinute',\n  'toModifiedJulianDay',\n  'toModifiedJulianDayOrNull',\n  'toMonday',\n  'toMonth',\n  'toNullable',\n  'toQuarter',\n  'toRelativeDayNum',\n  'toRelativeHourNum',\n  'toRelativeMinuteNum',\n  'toRelativeMonthNum',\n  'toRelativeQuarterNum',\n  'toRelativeSecondNum',\n  'toRelativeWeekNum',\n  'toRelativeYearNum',\n  'toSecond',\n  'toStartOfDay',\n  'toStartOfFifteenMinutes',\n  'toStartOfFiveMinute',\n  'toStartOfFiveMinutes',\n  'toStartOfHour',\n  'toStartOfISOYear',\n  'toStartOfInterval',\n  'toStartOfMicrosecond',\n  'toStartOfMillisecond',\n  'toStartOfMinute',\n  'toStartOfMonth',\n  'toStartOfNanosecond',\n  'toStartOfQuarter',\n  'toStartOfSecond',\n  'toStartOfTenMinutes',\n  'toStartOfWeek',\n  'toStartOfYear',\n  'toString',\n  'toStringCutToZero',\n  'toTime',\n  'toTimeZone',\n  'toTimezone',\n  'toTypeName',\n  'toUInt128',\n  'toUInt128OrNull',\n  'toUInt128OrZero',\n  'toUInt16',\n  'toUInt16OrDefault',\n  'toUInt16OrNull',\n  'toUInt16OrZero',\n  'toUInt256',\n  'toUInt256OrDefault',\n  'toUInt256OrNull',\n  'toUInt256OrZero',\n  'toUInt32',\n  'toUInt32OrDefault',\n  'toUInt32OrNull',\n  'toUInt32OrZero',\n  'toUInt64',\n  'toUInt64OrDefault',\n  'toUInt64OrNull',\n  'toUInt64OrZero',\n  'toUInt8',\n  'toUInt8OrDefault',\n  'toUInt8OrNull',\n  'toUInt8OrZero',\n  'toUUID',\n  'toUUIDOrDefault',\n  'toUUIDOrNull',\n  'toUUIDOrZero',\n  'toUnixTimestamp',\n  'toUnixTimestamp64Micro',\n  'toUnixTimestamp64Milli',\n  'toUnixTimestamp64Nano',\n  'toValidUTF8',\n  'toWeek',\n  'toYYYYMM',\n  'toYYYYMMDD',\n  'toYYYYMMDDhhmmss',\n  'toYear',\n  'toYearWeek',\n  'today',\n  'tokens',\n  'topK',\n  'topKWeighted',\n  'topLevelDomain',\n  'transactionID',\n  'transactionLatestSnapshot',\n  'transactionOldestSnapshot',\n  'transform',\n  'trimBoth',\n  'trimLeft',\n  'trimRight',\n  'trunc',\n  'truncate',\n  'tryBase64Decode',\n  'tumble',\n  'tumbleEnd',\n  'tumbleStart',\n  'tuple',\n  'tupleDivide',\n  'tupleDivideByNumber',\n  'tupleElement',\n  'tupleHammingDistance',\n  'tupleMinus',\n  'tupleMultiply',\n  'tupleMultiplyByNumber',\n  'tupleNegate',\n  'tuplePlus',\n  'tupleToNameValuePairs',\n  'ucase',\n  'unbin',\n  'unhex',\n  'uniq',\n  'uniqCombined',\n  'uniqCombined64',\n  'uniqExact',\n  'uniqHLL12',\n  'uniqTheta',\n  'uniqUpTo',\n  'upper',\n  'upperUTF8',\n  'uptime',\n  'user',\n  'validateNestedArraySizes',\n  'varPop',\n  'varPopStable',\n  'varSamp',\n  'varSampStable',\n  'vectorDifference',\n  'vectorSum',\n  'version',\n  'visibleWidth',\n  'visitParamExtractBool',\n  'visitParamExtractFloat',\n  'visitParamExtractInt',\n  'visitParamExtractRaw',\n  'visitParamExtractString',\n  'visitParamExtractUInt',\n  'visitParamHas',\n  'week',\n  'welchTTest',\n  'windowFunnel',\n  'windowID',\n  'wkt',\n  'wordShingleMinHash',\n  'wordShingleMinHashArg',\n  'wordShingleMinHashArgCaseInsensitive',\n  'wordShingleMinHashArgCaseInsensitiveUTF8',\n  'wordShingleMinHashArgUTF8',\n  'wordShingleMinHashCaseInsensitive',\n  'wordShingleMinHashCaseInsensitiveUTF8',\n  'wordShingleMinHashUTF8',\n  'wordShingleSimHash',\n  'wordShingleSimHashCaseInsensitive',\n  'wordShingleSimHashCaseInsensitiveUTF8',\n  'wordShingleSimHashUTF8',\n  'wyHash64',\n  'xor',\n  'xxHash32',\n  'xxHash64',\n  'yandexConsistentHash',\n  'yearweek',\n  'yesterday',\n  'zookeeperSessionUptime',\n  'toLowerCase',\n];\n","export default [\n  'JSON',\n  'Polygon',\n  'Ring',\n  'Point',\n  'SimpleAggregateFunction',\n  'MultiPolygon',\n  'IPv6',\n  'UInt32',\n  'IntervalYear',\n  'IntervalQuarter',\n  'IntervalMonth',\n  'Int64',\n  'IntervalDay',\n  'IntervalHour',\n  'IPv4',\n  'IntervalSecond',\n  'LowCardinality',\n  'Int16',\n  'UInt256',\n  'AggregateFunction',\n  'Nothing',\n  'Decimal256',\n  'Tuple',\n  'Array',\n  'IntervalMicrosecond',\n  'Bool',\n  'Enum16',\n  'IntervalMinute',\n  'FixedString',\n  'String',\n  'DateTime',\n  'Object',\n  'Map',\n  'UUID',\n  'Decimal64',\n  'Nullable',\n  'Enum',\n  'Int32',\n  'UInt8',\n  'Date',\n  'Decimal32',\n  'UInt128',\n  'Float64',\n  'Nested',\n  'UInt16',\n  'IntervalMillisecond',\n  'Int128',\n  'Decimal128',\n  'Int8',\n  'Decimal',\n  'Int256',\n  'DateTime64',\n  'Enum8',\n  'DateTime32',\n  'Date32',\n  'IntervalWeek',\n  'UInt64',\n  'IntervalNanosecond',\n  'Float32',\n  'bool',\n  'INET6',\n  'INET4',\n  'ENUM',\n  'BINARY',\n  'GEOMETRY',\n  'NATIONAL CHAR VARYING',\n  'BINARY VARYING',\n  'NCHAR LARGE OBJECT',\n  'NATIONAL CHARACTER VARYING',\n  'boolean',\n  'NATIONAL CHARACTER LARGE OBJECT',\n  'NATIONAL CHARACTER',\n  'NATIONAL CHAR',\n  'CHARACTER VARYING',\n  'LONGBLOB',\n  'TINYBLOB',\n  'MEDIUMTEXT',\n  'TEXT',\n  'VARCHAR2',\n  'CHARACTER LARGE OBJECT',\n  'DOUBLE PRECISION',\n  'LONGTEXT',\n  'NVARCHAR',\n  'INT1 UNSIGNED',\n  'VARCHAR',\n  'CHAR VARYING',\n  'MEDIUMBLOB',\n  'NCHAR',\n  'VARBINARY',\n  'CHAR',\n  'SMALLINT UNSIGNED',\n  'TIMESTAMP',\n  'FIXED',\n  'TINYTEXT',\n  'NUMERIC',\n  'DEC',\n  'TIME',\n  'FLOAT',\n  'SET',\n  'TINYINT UNSIGNED',\n  'INTEGER UNSIGNED',\n  'INT UNSIGNED',\n  'CLOB',\n  'MEDIUMINT UNSIGNED',\n  'BLOB',\n  'REAL',\n  'SMALLINT',\n  'INTEGER SIGNED',\n  'NCHAR VARYING',\n  'INT SIGNED',\n  'TINYINT SIGNED',\n  'BIGINT SIGNED',\n  'BINARY LARGE OBJECT',\n  'SMALLINT SIGNED',\n  'YEAR',\n  'MEDIUMINT',\n  'INTEGER',\n  'INT1 SIGNED',\n  'BIT',\n  'BIGINT UNSIGNED',\n  'BYTEA',\n  'INT',\n  'SINGLE',\n  'MEDIUMINT SIGNED',\n  'DOUBLE',\n  'INT1',\n  'CHAR LARGE OBJECT',\n  'TINYINT',\n  'BIGINT',\n  'CHARACTER',\n  'BYTE',\n];\n","export default ['true', 'false', 'NULL', 'null', 'inf', 'nan'];\n","export default [\n  '$table',\n  '$dateCol',\n  '$dateTimeCol',\n  '$from',\n  '$to',\n  '$interval',\n  '$timeFilter',\n  '$timeFilterMs',\n  '$timeFilterByColumn',\n  '$timeFilter64ByColumn',\n  '$timeSeries',\n  '$timeSeriesMs',\n  '$naturalTimeSeries',\n  '$rate',\n  '$rateColumns',\n  '$rateColumnsAggregated',\n  '$perSecond',\n  '$perSecondColumns',\n  '$perSecondColumnsAggregated',\n  '$delta',\n  '$deltaColumns',\n  '$deltaColumnsAggregated',\n  '$increase',\n  '$increaseColumns',\n  '$increaseColumnsAggregated',\n  '$columns',\n  '$columnsMs',\n  '$unescape',\n  '$adhoc',\n  '$conditionalTest',\n];\n","import { getAutocompletions } from './autocompletions/functions';\nimport { getMacrosAutocompletion } from './autocompletions/macros';\nimport keywords from './constants/keywords';\nimport funcs from './constants/funcs';\nimport dataTypes from './constants/data-types';\nimport constants from './constants/constants';\nimport macros from './constants/macros';\n\nlet currentEditor: any = null;\n\ndeclare global {\n  interface Window {\n    monacoInstance: any; // Replace 'any' with the desired type of your 'test' property\n  }\n}\n\nenum TokenType {\n  FUNCTIONS = 'custom-functions',\n  KEYWORDS = 'custom-keywords',\n  CONSTANTS = 'custom-constants',\n  DATATYPES = 'custom-datatypes',\n  MACROS = 'custom-macros',\n  PARENTHESIS = 'custom-parenthesis',\n  COMMENT = 'custom-comment',\n  COMMENT_BLOCK = 'custom-comment-block',\n  VARIABLE = 'custom-variable',\n  STRING = 'custom-string',\n}\n\nexport const THEME_NAME = 'clickhouse-dark-theme';\nexport const LANGUAGE_ID = 'clickhouseLanguage';\n\nexport const initiateEditor = (\n  templateVariables: any,\n  monacoInstance: any,\n  autocompletionData: any,\n  systemDatabasesData: any\n) => {\n  const { Method, Variable, Constant, Keyword, TypeParameter, Text } = monacoInstance.languages.CompletionItemKind;\n\n  let dynamicIdentifier: string[];\n  let dynamicKeyword: string[];\n  let dynamicString: string[];\n  let dynamicSystemDatabases: string[];\n\n  if (autocompletionData) {\n    dynamicIdentifier = autocompletionData?.identifier || [];\n    dynamicKeyword = autocompletionData?.keyword || [];\n    dynamicString = autocompletionData?.string || [];\n  }\n\n  if (systemDatabasesData) {\n    dynamicSystemDatabases = systemDatabasesData || [];\n  }\n\n  if (!monacoInstance) {\n    return;\n  }\n\n  // Dispose the previous editor if it exists\n  if (currentEditor) {\n    currentEditor.dispose();\n    currentEditor = null;\n  }\n\n  const Colors = {\n    FUNCTIONS: '#66d9ef', // Gold for functions\n    KEYWORDS: '#66d9ef', // Spring green for keywords\n    CONSTANTS: '#fe85fc', // Sky blue for constants\n    DATATYPES: '#66d9ef', // Tomato for data types\n    MACROS: '#a6e22e', // Gold for macros (similar to functions for consistency)\n    PARENTHESIS: '#f0a842', // Slate blue for parentheses\n    COMMENTS: '#75715e', // Dark gray for comments,\n    COMMENT_BLOCK: '#75715e', // Dark gray for comments,\n    VARIABLE: '#75715e', // Dark gray for comments,\n    STRING: '#74e680',\n  };\n\n  const Types = {\n    [Constant]: 'Constant',\n    [TypeParameter]: 'Type',\n    [Keyword]: 'Keyword',\n    [Method]: 'Function',\n    [Variable]: 'Macros',\n    [Text]: 'Macros',\n  };\n\n  const tokenize = () => {\n    const keywordsImported = keywords;\n    const functionsImported = funcs;\n    const dataTypesImported = dataTypes;\n    const constantsImported = constants;\n    const macrosImported = macros;\n\n    monacoInstance.languages.setMonarchTokensProvider(LANGUAGE_ID, {\n      tokenizer: {\n        root: [\n          [\n            new RegExp(`\\\\b(${[...keywordsImported, ...dynamicKeyword, ...dynamicSystemDatabases].join('|')})\\\\b`),\n            TokenType.KEYWORDS,\n          ],\n          [new RegExp(`\\\\s(${functionsImported.join('|')})`), TokenType.FUNCTIONS],\n          [new RegExp(`[()]`), TokenType.PARENTHESIS],\n          [new RegExp(`--.*$`), TokenType.COMMENT],\n          [new RegExp(`\\`\\`\\`.*\\`\\`\\``), TokenType.COMMENT_BLOCK],\n          [new RegExp(`\\\\$\\\\w+`), TokenType.VARIABLE],\n          [new RegExp(`\\\\$\\{\\\\w+\\}`), TokenType.VARIABLE],\n          [new RegExp(`'.*?'`), TokenType.STRING],\n          [new RegExp(`\\\\b(${dataTypesImported.join('|')})\\\\b`), TokenType.DATATYPES],\n          [new RegExp(`\\\\b(${constantsImported.join('|')})\\\\b`), TokenType.CONSTANTS],\n          [new RegExp(`(${macrosImported.map((macros) => macros.replace('$', '\\\\$')).join('|')})`), TokenType.MACROS],\n        ],\n      },\n    });\n  };\n\n  const defineTheme = () => {\n    monacoInstance.editor.defineTheme(THEME_NAME, {\n      base: 'vs-dark',\n      inherit: false,\n      rules: [\n        { token: TokenType.FUNCTIONS, foreground: Colors.FUNCTIONS },\n        { token: TokenType.PARENTHESIS, foreground: Colors.PARENTHESIS },\n        { token: TokenType.KEYWORDS, foreground: Colors.KEYWORDS },\n        { token: TokenType.CONSTANTS, foreground: Colors.CONSTANTS },\n        { token: TokenType.DATATYPES, foreground: Colors.DATATYPES },\n        { token: TokenType.MACROS, foreground: Colors.MACROS },\n        { token: TokenType.COMMENT, foreground: Colors.COMMENTS },\n        { token: TokenType.COMMENT_BLOCK, foreground: Colors.COMMENT_BLOCK },\n        { token: TokenType.VARIABLE, foreground: Colors.MACROS },\n        { token: TokenType.STRING, foreground: Colors.STRING },\n      ],\n      colors: {\n        'editor.foreground': '#e0e0e0',\n        'editor.background': '#000000',\n      },\n    });\n  };\n\n  // @ts-ignore\n  const createCompletionItem = (\n    label: string,\n    // @ts-ignore\n    kind: monacoInstance.languages.CompletionItemKind,\n    insertText: string,\n    range: any,\n    documentation?: string\n  ) => {\n    return {\n      label: {\n        label,\n        description: Types[kind],\n      },\n      kind,\n      insertText,\n      range,\n      documentation: {\n        value: documentation,\n      } as any,\n    };\n  };\n\n  const registerAutocompletion = (templateVariables, monacoInstance) => {\n    return monacoInstance.languages.registerCompletionItemProvider(LANGUAGE_ID, {\n      provideCompletionItems: (model, position) => {\n        const word = model.getWordUntilPosition(position);\n\n        const range: any = {\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: word.startColumn,\n          endColumn: word.endColumn,\n        };\n\n        const rangeMacros: any = {\n          ...range,\n          startColumn: word.startColumn - 1,\n        };\n\n        // @ts-ignore\n        type CompletionItemKind = monacoInstance.languages.CompletionItemKind;\n\n        const mapToCompletionItems = (array: string[], kind: CompletionItemKind) =>\n          array.map((item) => createCompletionItem(item, kind, item, range));\n        const mapMacroToCompletionItems = (\n          array: Array<{ name: string; def: string; docText: string }>,\n          kind: CompletionItemKind\n        ) => array.map((item) => createCompletionItem(item.name, kind, item.def, rangeMacros, item.docText));\n        const mapFunctionToCompletionItems = (\n          array: Array<{ name: string; def: string; docText: string }>,\n          kind: CompletionItemKind\n        ) => array.map((item) => createCompletionItem(item.name, kind, item.def, range, item.docText));\n\n        return {\n          incomplete: false,\n          suggestions: [\n            ...mapFunctionToCompletionItems(getAutocompletions(), Method),\n            ...mapMacroToCompletionItems(getMacrosAutocompletion(), Variable),\n            ...mapToCompletionItems(constants, Constant),\n            ...mapToCompletionItems(keywords, Keyword),\n            ...mapToCompletionItems(dataTypes, TypeParameter),\n            ...mapToCompletionItems(dynamicIdentifier, Keyword),\n            ...mapToCompletionItems(dynamicSystemDatabases, Keyword),\n            ...mapToCompletionItems(dynamicKeyword, Keyword),\n            ...mapToCompletionItems(dynamicString, Text),\n            ...mapToCompletionItems(\n              templateVariables.map((item: string) => `${item}`),\n              Variable\n            ),\n          ],\n        } as any;\n      },\n    });\n  };\n\n  // TODO: add use effect to databases autocompletion\n  monacoInstance.languages.register({ id: LANGUAGE_ID });\n  tokenize();\n  defineTheme();\n  currentEditor = registerAutocompletion(templateVariables, monacoInstance);\n\n  return { theme: THEME_NAME, language: LANGUAGE_ID, editor: currentEditor };\n};\n","const getAutocompletions = () => {\n  return [\n    {\n      name: 'corr',\n      def: 'corr(x, y)',\n      docText:\n        'Calculates the Pearson correlation coefficient: `Σ((x - x̅)(y - y̅)) / sqrt(Σ((x - x̅)<sup>2</sup>) * Σ((y - y̅)<sup>2</sup>))`.',\n    },\n    {\n      name: 'stddevPop',\n      def: 'stddevPop(x)',\n      docText: 'The result is equal to the square root of `varPop(x)`.',\n    },\n    {\n      name: 'varPop',\n      def: 'varPop(x, y)',\n      docText: 'Calculates the value of `Σ((x - x̅)(y - y̅)) / n`.',\n    },\n    {\n      name: 'argMin',\n      def: 'argMin(arg, val)',\n      docText:\n        'Calculates the `arg` value for a minimal `val` value. If there are several different values of `arg` for minimal values of `val`, the first of these values encountered is output.',\n    },\n    {\n      name: 'quantileExactWeighted',\n      def: 'quantileExactWeighted(level)(x, weight)',\n      docText:\n        'Computes the level quantile exactly. In this case, each value is taken into account with the weight weight - as if it is present weight once. The arguments of the function can be considered as histograms, where the value \"x\" corresponds to the \"column\" of the histogram of the height weight, and the function itself can be considered as the summation of histograms.\\n' +\n        '\\n' +\n        'The algorithm is a hash table. Because of this, in case the transmitted values are often repeated, the function consumes less RAM than the quantileExact. You can use this function instead of quantileExact, specifying the number 1 as the weight.',\n    },\n    {\n      name: 'min',\n      def: 'min(v)',\n      docText: 'Aggregate function that calculates the minimum across a group of values.',\n    },\n    {\n      name: 'varSamp',\n      def: 'varSamp(x)',\n      docText:\n        \"Calculates the amount Σ((x - x̅)2) / (n - 1), where 'n' is the sample size and 'x̅' is the average value of 'x'.\\n\" +\n        '\\n' +\n        'It represents an unbiased estimate of the variance of a random variable, if the values passed to the function are a sample of this random amount.\\n' +\n        '\\n' +\n        'Returns Float64. If n <= 1, it returns +∞.',\n    },\n    {\n      name: 'anyLast',\n      def: 'anyLast(x)',\n      docText:\n        'Selects the last value encountered. \\n' +\n        '\\n' +\n        ' The result is just as indeterminate as for the `any` function.',\n    },\n    {\n      name: 'argMax',\n      def: 'argMax(arg, val)',\n      docText:\n        'Calculates the `arg` value for a maximum `val` value. If there are several different values of `arg` for maximum values of `val`, the first of these values encountered is output.',\n    },\n    {\n      name: 'count',\n      def: 'count()',\n      docText: 'Counts the number of rows. ',\n    },\n    {\n      name: 'any',\n      def: 'any(x)',\n      docText:\n        'Selects the last value encountered. \\n' +\n        '\\n' +\n        ' The result is just as indeterminate as for the `any` function.',\n    },\n    {\n      name: 'avg',\n      def: 'avg(x)',\n      docText:\n        'Calculates the average. \\n' + '\\n' + ' Only works for numbers. \\n' + '\\n' + ' The result is always Float64.',\n    },\n    {\n      name: 'sequenceMatch',\n      def: 'sequenceMatch(pattern)(time, cond1, cond2, ...)',\n      docText:\n        'Pattern matching for event chains.\\n' +\n        '\\n' +\n        \"'pattern' is a string containing a pattern to match. The pattern is similar to a regular expression. 'time' is the event time of the DateTime type. 'cond1, cond2 ...' are from one to 32 arguments of the UInt8 type that indicate whether an event condition was met.\\n\" +\n        '\\n' +\n        \"The function collects a sequence of events in RAM. Then it checks whether this sequence matches the pattern. It returns UInt8 - 0 if the pattern isn't matched, or 1 if it matches.\\n\" +\n        '\\n' +\n        \"Example: sequenceMatch('(?1).*(?2)')(EventTime, URL LIKE '%company%', URL LIKE '%cart%') - whether there was a chain of events in which pages with the address in company were visited earlier than pages with the address in cart.\",\n    },\n    {\n      name: 'stddevSamp',\n      def: 'stddevSamp(x)',\n      docText: 'The result is equal to the square root of `varSamp(x)`.',\n    },\n    {\n      name: 'medianDeterministic',\n      def: 'medianDeterministic(x, determinator)',\n      docText: 'This function works similarly to the `median` function - it approximates the median.',\n    },\n    {\n      name: 'quantilesTimingWeighted',\n      def: 'quantilesTimingWeighted(level1, level2, ...)(x, weight)',\n      docText:\n        'Calculates the quantiles of all specified levels using the same algorithm as the `medianTimingWeighted` function.',\n    },\n    {\n      name: 'uniq',\n      def: 'uniq(N)(x)',\n      docText:\n        'Calculates the number of different argument values, if it is less than or equal to N. \\n' +\n        '\\n' +\n        ' If the number of different argument values is greater than N, it returns N + 1.',\n    },\n    {\n      name: 'covarSamp',\n      def: 'covarSamp(x, y)',\n      docText: 'Calculates the value of `Σ((x - x̅)(y - y̅)) / (n - 1)`. ' + 'Returns Float64. If n <= 1, it returns +∞.',\n    },\n    {\n      name: 'max',\n      def: 'max(v)',\n      docText: 'Aggregate function that calculates the maximum across a group of values.',\n    },\n    {\n      name: 'quantileTDigest',\n      def: 'quantileTDigest(level)(x)',\n      docText: 't-digest',\n    },\n    {\n      name: 'quantilesTiming',\n      def: 'quantilesTiming(level1, level2, ...)(x, weight)',\n      docText:\n        'Calculates the quantiles of all specified levels using the same algorithm as the `medianTimingWeighted` function.',\n    },\n    {\n      name: 'quantiles',\n      def: 'quantiles(level1, level2, ...)(x, determinator)',\n      docText:\n        'Calculates the quantiles of all specified levels using the same algorithm as the `medianDeterministic` function.',\n    },\n    {\n      name: 'quantile',\n      def: 'quantile(level1, level2, ...)(x, determinator)',\n      docText:\n        'Calculates the quantiles of all specified levels using the same algorithm as the `medianDeterministic` function.',\n    },\n    {\n      name: 'groupArray',\n      def: 'groupArray(x)',\n      docText:\n        'Creates an array of argument values. \\n' +\n        '\\n' +\n        ' Values can be added to the array in any (indeterminate) order. \\n' +\n        '\\n' +\n        ' In some cases, you can rely on the order of execution. This applies to cases when SELECT comes from a subquery that uses ORDER BY.',\n    },\n    {\n      name: 'sum',\n      def: 'sum(x)',\n      docText: 'Calculates the sum. \\n' + '\\n' + ' Only works for numbers.',\n    },\n    {\n      name: 'median',\n      def: 'median(x, weight)',\n      docText:\n        'Differs from the `medianTiming` function in that it has a second argument - `weights`. Weight is a non-negative integer. \\n' +\n        '\\n' +\n        ' The result is calculated as if the `x` value were passed `weight` number of times to the `medianTiming` function.',\n    },\n    {\n      name: 'quantileTiming',\n      def: 'quantileTiming(level)(x, weight)',\n      docText: 'Calculates the quantile of `level` using the same algorithm as the `medianTimingWeighted` function.',\n    },\n    {\n      name: 'quantileTimingWeighted',\n      def: 'quantileTimingWeighted(level)(x, weight)',\n      docText: 'Calculates the quantile of `level` using the same algorithm as the `medianTimingWeighted` function.',\n    },\n    {\n      name: 'groupUniqArray',\n      def: 'groupUniqArray(x)',\n      docText:\n        'Creates an array from different argument values. Memory consumption is the same as for the `uniqExact` function.',\n    },\n    {\n      name: 'uniqHLL12',\n      def: 'uniqHLL12(x)',\n      docText: 'Uses the HyperLogLog algorithm to approximate the number of different values of the argument. ',\n    },\n    {\n      name: 'covarPop',\n      def: 'covarPop(x, y)',\n      docText: 'Calculates the value of `Σ((x - x̅)(y - y̅)) / n`.',\n    },\n    {\n      name: 'sequenceCount',\n      def: 'sequenceCount(pattern)(time, cond1, cond2, ...)',\n      docText: 'sequenceMatch',\n    },\n    {\n      name: 'quantileDeterministic',\n      def: 'quantileDeterministic(level)(x, determinator)',\n      docText: 'Calculates the quantile of `level` using the same algorithm as the `medianDeterministic` function.',\n    },\n    {\n      name: 'quantileExact',\n      def: 'quantileExact(level)(x, weight)',\n      docText: '',\n    },\n    {\n      name: 'quantilesDeterministic',\n      def: 'quantilesDeterministic(level1, level2, ...)(x, determinator)',\n      docText:\n        'Calculates the quantiles of all specified levels using the same algorithm as the `medianDeterministic` function.',\n    },\n    {\n      name: 'medianTiming',\n      def: 'medianTiming(x, weight)',\n      docText: 'Differs from the `medianTiming` function in that it has a second argument - `weights`.',\n    },\n    {\n      name: 'medianTimingWeighted',\n      def: 'medianTimingWeighted(x, weight)',\n      docText: 'Differs from the `medianTiming` function in that it has a second argument - `weights`.',\n    },\n    {\n      name: 'uniqExact',\n      def: 'uniqExact(x)',\n      docText:\n        'Calculates the number of different values of the argument, exactly. \\n' +\n        '\\n' +\n        ' There is no reason to fear approximations, so it`s better to use the `uniq` function. \\n' +\n        '\\n' +\n        ' You should use the `uniqExact` function if you definitely need an exact result. ',\n    },\n    {\n      name: 'uniqCombined',\n      def: 'uniqCombined(x)',\n      docText: '',\n    },\n    {\n      name: 'uniqCombinedIf',\n      def: 'uniqCombinedIf(x,v)',\n      docText: '',\n    },\n    {\n      name: 'uniqUpTo',\n      def: 'uniqUpTo(N)(x)',\n      docText:\n        'Calculates the number of different argument values, if it is less than or equal to N. \\n' +\n        '\\n' +\n        ' If the number of different argument values is greater than N, it returns N + 1.',\n    },\n    {\n      name: 'substring',\n      def: 'substring(s, offset, length)',\n      docText:\n        'The same as `substring`, but for Unicode code points. Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text. If this assumption is not met, it returns some result (it doesn`t throw an exception).',\n    },\n    {\n      name: 'notLike',\n      def: 'notLike(haystack, pattern), haystack NOT LIKE pattern operator',\n      docText: 'The same thing as `like`, but negative.',\n    },\n    {\n      name: 'hostName',\n      def: 'hostName()',\n      docText:\n        'Returns a string with the name of the host that this function was performed on. For distributed processing, this is the name of the remote server host, if the function is performed on a remote server.',\n    },\n    {\n      name: 'globalNotIn',\n      def: 'globalNotIn(v)',\n      docText: 'See the section `IN operators`.',\n    },\n    {\n      name: 'or',\n      def: 'or(v)',\n      docText:\n        'The same thing as `max_temporary_columns`, but without counting constant columns. \\n' +\n        '\\n' +\n        ' Note that constant columns are formed fairly often when running a query, but they require approximately zero computing resources.',\n    },\n    {\n      name: 'extractAll',\n      def: 'extractAll(haystack, pattern)',\n      docText:\n        'Extracts all the fragments of a string using a regular expression. If `haystack` doesn`t match the `pattern` regex, an empty string is returned. Returns an array of strings consisting of all matches to the regex.',\n    },\n    {\n      name: 'arrayFirst',\n      def: 'arrayFirst(func, arr1, ...)',\n      docText:\n        'Returns the index of the first element in the `arr1` array for which `func` returns something other than 0.',\n    },\n    {\n      name: 'arrayExists',\n      def: 'arrayExists([func,] arr1, ...)',\n      docText:\n        'Returns 1 if there is at least one element in `arr` for which `func` returns something other than 0. Otherwise, it returns 0.',\n    },\n    {\n      name: 'arrayCount',\n      def: 'arrayCount([func,] arr1, ...)',\n      docText:\n        'Returns the number of elements in `arr` for which `func` returns something other than 0. If `func` is not specified, it returns the number of non-zero items in the array.',\n    },\n    {\n      name: 'arrayMap',\n      def: 'arrayMap(func, arr1, ...)',\n      docText:\n        'Returns an array obtained from the original application of the `func` function to each element in the `arr` array.',\n    },\n    {\n      name: 'now',\n      def: 'now(v)',\n      docText:\n        'If the parameter is true, INSERT operation will skip columns with unknown names from input. \\n' +\n        '\\n' +\n        ' Otherwise, an exception will be generated, it is default behavior. \\n' +\n        '\\n' +\n        ' The parameter works only for JSONEachRow and TSKV input formats.',\n    },\n    {\n      name: 'intDiv',\n      def: 'intDiv(a, b)',\n      docText:\n        'Differs from `intDiv` in that it returns zero when dividing by zero or when dividing a minimal negative number by minus one.',\n    },\n    {\n      name: 'topLevelDomain',\n      def: 'topLevelDomain(v)',\n      docText: 'Selects the top-level domain. Example: .ru.',\n    },\n    {\n      name: 'intHash32',\n      def: 'intHash32(v)',\n      docText:\n        'Calculates a 32-bit hash code from any type of integer. \\n' +\n        '\\n' +\n        ' This is a relatively fast non-cryptographic hash function of average quality for numbers.',\n    },\n    {\n      name: 'replaceOne',\n      def: 'replaceOne(haystack, pattern, replacement)',\n      docText:\n        'Replaces the first occurrence, if it exists, of the `pattern` substring in `haystack` with the `replacement` substring. \\n' +\n        '\\n' +\n        ' Hereafter, `pattern` and `replacement` must be constants.',\n    },\n    {\n      name: 'cityHash64',\n      def: 'cityHash64(v)',\n      docText:\n        'Calculates CityHash64 from a string or a similar hash function for any number of any type of arguments. \\n' +\n        '\\n' +\n        ' For String-type arguments, CityHash is used. This is a fast non-cryptographic hash function for strings with decent quality',\n    },\n    {\n      name: 'OSToRoot',\n      def: 'OSToRoot(v)',\n      docText:\n        'Accepts a UInt8 number - the ID of the operating system from the Yandex.Metrica dictionary. If any OS matches the passed number, it returns a UInt8 number - the ID of the corresponding root OS (for example, it converts Windows Vista to Windows). Otherwise, returns 0.',\n    },\n    {\n      name: 'sipHash128',\n      def: 'sipHash128(v)',\n      docText:\n        'Calculates SipHash from a string. \\n' +\n        '\\n' +\n        ' Accepts a String-type argument. Returns FixedString(16). \\n' +\n        '\\n' +\n        ' Differs from sipHash64 in that the final xor-folding state is only done up to 128 bits.',\n    },\n    {\n      name: 'SHA1',\n      def: 'SHA1(v)',\n      docText:\n        'Calculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32).',\n    },\n    {\n      name: 'asin',\n      def: 'asin(x)',\n      docText: 'The arc sine.',\n    },\n    {\n      name: 'SHA256',\n      def: 'SHA256(v)',\n      docText:\n        'Calculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32).',\n    },\n    {\n      name: 'MD5',\n      def: 'MD5(v)',\n      docText: 'Calculates the MD5 from a string and returns the resulting set of bytes as FixedString(16).',\n    },\n    {\n      name: 'bitmaskToList',\n      def: 'bitmaskToList(num)',\n      docText:\n        'Accepts an integer. Returns a string containing the list of powers of two that total the source number when summed. They are comma-separated without spaces in text format, in ascending order.',\n    },\n    {\n      name: 'array',\n      def: 'array(v)',\n      docText:\n        'The -`Array` suffix can be appended to any aggregate function. In this case, the aggregate function takes arguments of the `Array(T)` type (arrays) instead of `T` type arguments. If the aggregate function accepts multiple arguments, this must be arrays of equal lengths. ',\n    },\n    {\n      name: 'dictGetStringOrDefault',\n      def: 'dictGetStringOrDefault(v)',\n      docText:\n        \"dictGetT('dict_name', 'attr_name', id) Gets the value of the 'attr_name' attribute from the 'dict_name' dictionary by the 'id' key. 'dict_name' and 'attr_name' are constant strings. 'id' must be UInt64. If the 'id' key is not in the dictionary, it returns the default value set in the dictionary definition.\",\n    },\n    {\n      name: 'greaterOrEquals',\n      def: 'greaterOrEquals(v)',\n      docText: '',\n    },\n    {\n      name: 'e',\n      def: 'e(v)',\n      docText: 'What to do when the amount of data exceeds one of the limits: `throw` or `break`. By default, throw.',\n    },\n    {\n      name: 'runningDifference',\n      def: 'runningDifference(x)',\n      docText:\n        'Calculates the difference between consecutive values in the data block. \\n' +\n        '\\n' +\n        ' Result of the function depends on the order of the data in the blocks. \\n' +\n        '\\n' +\n        ' It works only inside of the each processed block of data. Data splitting in the blocks is not explicitly controlled by the user. ',\n    },\n    {\n      name: 'not',\n      def: 'not(v)',\n      docText: 'See the section `IN operators`.',\n    },\n    {\n      name: 'intHash64',\n      def: 'intHash64(v)',\n      docText:\n        'Calculates a 64-bit hash code from any type of integer. \\n' +\n        '\\n' +\n        ' It works faster than intHash32. Average quality.',\n    },\n    {\n      name: 'acos',\n      def: 'acos(x)',\n      docText: 'The arc cosine.',\n    },\n    {\n      name: 'dictGetString',\n      def: 'dictGetString(v)',\n      docText: '',\n    },\n    {\n      name: 'and',\n      def: 'and(x, determinator)',\n      docText:\n        'This function works similarly to the `median` function - it approximates the median. However, in contrast to `median`, the result is deterministic and does not depend on the order of query execution. \\n' +\n        '\\n' +\n        ' To achieve this, the function takes a second argument - the `determinator`. ',\n    },\n    {\n      name: 'dictGetDate',\n      def: 'dictGetDate(v)',\n      docText:\n        \"dictGetT('dict_name', 'attr_name', id) Gets the value of the 'attr_name' attribute from the 'dict_name' dictionary by the 'id' key. 'dict_name' and 'attr_name' are constant strings. 'id' must be UInt64. If the 'id' key is not in the dictionary, it returns the default value set in the dictionary definition.\",\n    },\n    {\n      name: 'dictGetFloat32',\n      def: 'dictGetFloat32(v)',\n      docText:\n        \"dictGetT('dict_name', 'attr_name', id) Gets the value of the 'attr_name' attribute from the 'dict_name' dictionary by the 'id' key. 'dict_name' and 'attr_name' are constant strings. 'id' must be UInt64. If the 'id' key is not in the dictionary, it returns the default value set in the dictionary definition.\",\n    },\n    {\n      name: 'dictGetInt8',\n      def: 'dictGetInt8(v)',\n      docText:\n        \"dictGetT('dict_name', 'attr_name', id) Gets the value of the 'attr_name' attribute from the 'dict_name' dictionary by the 'id' key. 'dict_name' and 'attr_name' are constant strings. 'id' must be UInt64. If the 'id' key is not in the dictionary, it returns the default value set in the dictionary definition.\",\n    },\n    {\n      name: 'dictGetUInt32',\n      def: 'dictGetUInt32(v)',\n      docText:\n        \"dictGetT('dict_name', 'attr_name', id) Gets the value of the 'attr_name' attribute from the 'dict_name' dictionary by the 'id' key. 'dict_name' and 'attr_name' are constant strings. 'id' must be UInt64. If the 'id' key is not in the dictionary, it returns the default value set in the dictionary definition.\",\n    },\n    {\n      name: 'OSIn',\n      def: 'OSIn(lhs, rhs)',\n      docText: 'Checks whether the `lhs` operating system belongs to the `rhs` operating system.',\n    },\n    {\n      name: 'arrayFirstIndex',\n      def: 'arrayFirstIndex(func, arr1, ...)',\n      docText:\n        'Returns the index of the first element in the `arr1` array for which `func` returns something other than 0.',\n    },\n    {\n      name: 'ceil',\n      def: 'ceil(x[, N])',\n      docText:\n        'Returns the smallest round number that is greater than or equal to `x`. In every other way, it is the same as the `floor` function (see above).',\n    },\n    {\n      name: 'fragment',\n      def: 'fragment(v)',\n      docText: 'Removes the query-string and fragment identifier. The question mark and number sign are also removed.',\n    },\n    {\n      name: 'dictGetUInt8',\n      def: 'dictGetUInt8(v)',\n      docText:\n        \"dictGetT('dict_name', 'attr_name', id) Gets the value of the 'attr_name' attribute from the 'dict_name' dictionary by the 'id' key. 'dict_name' and 'attr_name' are constant strings. 'id' must be UInt64. If the 'id' key is not in the dictionary, it returns the default value set in the dictionary definition.\",\n    },\n    {\n      name: 'dictHas',\n      def: 'dictHas(v)',\n      docText:\n        \"dictHas('dict_name', id) check the presence of a key in the dictionary. Returns a value of type UInt8, equal to 0, if there is no key and 1 if there is a key.\",\n    },\n    {\n      name: 'arraySum',\n      def: 'arraySum([func,] arr1, ...)',\n      docText:\n        'Returns the sum of the `func` values. If the function is omitted, it just returns the sum of the array elements.',\n    },\n    {\n      name: 'emptyArrayDateTime',\n      def: 'emptyArrayDateTime(v)',\n      docText: 'Accepts zero arguments and returns an empty array of the appropriate type.',\n    },\n    {\n      name: 'intDivOrZero',\n      def: 'intDivOrZero(a, b)',\n      docText:\n        'Differs from `intDiv` in that it returns zero when dividing by zero or when dividing a minimal negative number by minus one.',\n    },\n    {\n      name: 'SEHierarchy',\n      def: 'SEHierarchy(v)',\n      docText:\n        'Accepts a UInt8 number - the ID of the search engine from the Yandex.Metrica dictionary. Returns an array with a hierarchy of search engines. Similar to the `regionHierarchy` function.',\n    },\n    {\n      name: 'regionToContinent',\n      def: 'regionToContinent(id[, geobase])',\n      docText:\n        'Converts a region to a continent. In every other way, this function is the same as `regionToCity`. \\n' +\n        '\\n' +\n        ' Example: `regionToContinent(toUInt32(213)) = 10001` converts Moscow (213) to Eurasia (10001).',\n    },\n    {\n      name: 'dictGetInt32',\n      def: 'dictGetInt32(v)',\n      docText:\n        \"dictGetT('dict_name', 'attr_name', id) Gets the value of the 'attr_name' attribute from the 'dict_name' dictionary by the 'id' key. 'dict_name' and 'attr_name' are constant strings. 'id' must be UInt64. If the 'id' key is not in the dictionary, it returns the default value set in the dictionary definition.\",\n    },\n    {\n      name: 'toInt8',\n      def: 'toInt8(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'materialize',\n      def: 'materialize(x)',\n      docText:\n        'Turns a constant into a full column containing just one value. \\n' +\n        '\\n' +\n        ' In ClickHouse, full columns and constants are represented differently in memory. Functions work differently for constant arguments and normal arguments (different code is executed), although the result is almost always the same. This function is for debugging this behavior.',\n    },\n    {\n      name: 'regionToCountry',\n      def: 'regionToCountry(id[, geobase])',\n      docText:\n        'Converts a region to a country. In every other way, this function is the same as `regionToCity`. \\n' +\n        '\\n' +\n        ' Example: `regionToCountry(toUInt32(213)) = 225` converts Moscow (213) to Russia (225).',\n    },\n    {\n      name: 'dictGetDateTime',\n      def: 'dictGetDateTime(v)',\n      docText:\n        \"dictGetT('dict_name', 'attr_name', id) Gets the value of the 'attr_name' attribute from the 'dict_name' dictionary by the 'id' key. 'dict_name' and 'attr_name' are constant strings. 'id' must be UInt64. If the 'id' key is not in the dictionary, it returns the default value set in the dictionary definition.\",\n    },\n    {\n      name: 'xor',\n      def: 'xor(v)',\n      docText: '',\n    },\n    {\n      name: 'regionToCity',\n      def: 'regionToCity(id[, geobase])',\n      docText:\n        'Accepts a UInt32 number - the region ID from the Yandex geobase. If this region is a city or part of a city, it returns the region ID for the appropriate city. Otherwise, returns 0.',\n    },\n    {\n      name: 'dictGetFloat64',\n      def: 'dictGetFloat64(v)',\n      docText:\n        \"dictGetT('dict_name', 'attr_name', id) Gets the value of the 'attr_name' attribute from the 'dict_name' dictionary by the 'id' key. 'dict_name' and 'attr_name' are constant strings. 'id' must be UInt64. If the 'id' key is not in the dictionary, it returns the default value set in the dictionary definition.\",\n    },\n    {\n      name: 'timeSlot',\n      def: 'timeSlot(StartTime, Duration)',\n      docText:\n        'For a time interval starting at `StartTime` and continuing for `Duration` seconds, it returns an array of moments in time, consisting of points from this interval rounded down to the half hour.',\n    },\n    {\n      name: 'toTime',\n      def: 'toTime(v)',\n      docText: 'Converts a date with time to the date of the start of the Unix Epoch, while preserving the time.',\n    },\n    {\n      name: 'log2',\n      def: 'log2(x)',\n      docText: 'Accepts a numeric argument and returns a Float64 number close to the binary logarithm of the argument.',\n    },\n    {\n      name: 'toRelativeHourNum',\n      def: 'toRelativeHourNum(v)',\n      docText:\n        'Converts a date with time or date to the number of the hour, starting from a certain fixed point in the past.',\n    },\n    {\n      name: 'toRelativeDayNum',\n      def: 'toRelativeDayNum(v)',\n      docText:\n        'Converts a date with time or date to the number of the day, starting from a certain fixed point in the past.',\n    },\n    {\n      name: 'toRelativeWeekNum',\n      def: 'toRelativeWeekNum(v)',\n      docText:\n        'Converts a date with time or date to the number of the week, starting from a certain fixed point in the past.',\n    },\n    {\n      name: 'splitByString',\n      def: 'splitByString(separator, s)',\n      docText:\n        'The same as above, but it uses a string of multiple characters as the separator. The string must be non-empty.',\n    },\n    {\n      name: 'currentDatabase',\n      def: 'currentDatabase()',\n      docText:\n        'Returns the name of the current database. \\n' +\n        '\\n' +\n        ' You can use this function in table engine parameters in a CREATE TABLE query where you need to specify the database.',\n    },\n    {\n      name: 'toRelativeMonthNum',\n      def: 'toRelativeMonthNum(v)',\n      docText:\n        'Converts a date with time or date to the number of the month, starting from a certain fixed point in the past.',\n    },\n    {\n      name: 'visibleWidth',\n      def: 'visibleWidth(x)',\n      docText:\n        'Calculates the approximate width when outputting values to the console in text format (tab-separated). This function is used by the system for implementing Pretty formats.',\n    },\n    {\n      name: 'bitShiftRight',\n      def: 'bitShiftRight(a, b)',\n      docText: '',\n    },\n    {\n      name: 'toRelativeYearNum',\n      def: 'toRelativeYearNum(v)',\n      docText:\n        'Converts a date with time or date to the number of the year, starting from a certain fixed point in the past.',\n    },\n    {\n      name: 'toStartOfHour',\n      def: 'toStartOfHour(v)',\n      docText: 'Rounds down a date with time to the start of the hour.',\n    },\n    {\n      name: 'halfMD5',\n      def: 'halfMD5(v)',\n      docText:\n        'Calculates the MD5 from a string. Then it takes the first 8 bytes of the hash and interprets them as UInt64 in big endian.',\n    },\n    {\n      name: 'toStartOfFiveMinute',\n      def: 'toStartOfFiveMinute(v)',\n      docText: 'Rounds down a date with time to the start of the 5 minute (00:00, 00:05, 00:10...).',\n    },\n    {\n      name: 'toStartOfFifteenMinutes',\n      def: 'toStartOfFifteenMinutes(v)',\n      docText: 'Rounds down a date with time to the start of the 15 minute (00:00, 00:15, 00:30...).',\n    },\n    {\n      name: 'toUInt16OrZero',\n      def: 'toUInt16OrZero(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument.',\n    },\n    {\n      name: 'toMonday',\n      def: 'toMonday(v)',\n      docText: 'Rounds down a date or date with time to the nearest Monday. \\n' + '\\n' + ' Returns the date.',\n    },\n    {\n      name: 'IPv6NumToString',\n      def: 'IPv6NumToString(x)',\n      docText:\n        'Accepts a FixedString(16) value containing the IPv6 address in binary format. Returns a string containing this address in text format. ',\n    },\n    {\n      name: 'indexOf',\n      def: 'indexOf(arr, x)',\n      docText: 'Returns the index of the `x` element (starting from 1) if it is in the array, or 0 if it is not.',\n    },\n    {\n      name: 'today',\n      def: 'today(v)',\n      docText:\n        'Accepts zero arguments and returns the current date at one of the moments of request execution. \\n' +\n        '\\n' +\n        ' The same as `toDate(now())`.',\n    },\n    {\n      name: 'emptyArrayToSingle',\n      def: 'emptyArrayToSingle(v)',\n      docText: 'Accepts an empty array as argument and returns an array of one element equal to the default value.',\n    },\n    {\n      name: 'sleep',\n      def: 'sleep(seconds)',\n      docText: 'Sleeps `seconds` seconds on each data block. You can specify an integer or a floating-point number.',\n    },\n    {\n      name: 'extract',\n      def: 'extract(params, name)',\n      docText:\n        'Parses the string in double quotes. The value is unescaped. If unescaping failed, it returns an empty string. Examples: ',\n    },\n    {\n      name: 'emptyArrayInt8',\n      def: 'emptyArrayInt8(v)',\n      docText: 'Accepts zero arguments and returns an empty array of the appropriate type.',\n    },\n    {\n      name: 'regionToName',\n      def: 'regionToName(id[, lang])',\n      docText:\n        'Accepts a UInt32 number - the region ID from the Yandex geobase. A string with the name of the language can be passed as a second argument. Supported languages are: ru, en, ua, uk, by, kz, tr. If the second argument is omitted, the language `ru` is used. ',\n    },\n    {\n      name: 'concat',\n      def: 'concat(arr[, separator])',\n      docText:\n        'Concatenates strings from the array elements, using `separator` as the separator. \\n' +\n        '\\n' +\n        ' `separator` is a string constant, an optional parameter. By default it is an empty string. \\n' +\n        '\\n' +\n        ' Returns a string.',\n    },\n    {\n      name: 'convertCharset',\n      def: 'convertCharset(s, from, to)',\n      docText: 'Returns a string with the data `s` (encoded as `from` charset) that was converted to the `to` charset.',\n    },\n    {\n      name: 'toMonth',\n      def: 'toMonth(v)',\n      docText: 'Converts a date or date with time to a UInt8 number containing the month number (1-12).',\n    },\n    {\n      name: 'IPv6StringToNum',\n      def: 'IPv6StringToNum(s)',\n      docText:\n        'The reverse function of IPv6NumToString. If the IPv6 address has an invalid format, it returns a string of null bytes. \\n' +\n        '\\n' +\n        ' HEX can be uppercase or lowercase.',\n    },\n    {\n      name: 'emptyArrayString',\n      def: 'emptyArrayString(v)',\n      docText: 'Accepts zero arguments and returns an empty array of the appropriate type.',\n    },\n    {\n      name: 'uptime',\n      def: 'uptime()',\n      docText: \"Returns server's uptime in seconds.\",\n    },\n    {\n      name: 'blockSize',\n      def: 'blockSize()',\n      docText:\n        'Gets the size of the block. \\n' +\n        '\\n' +\n        ' In ClickHouse, queries are always run on blocks (sets of column parts). This function allows getting the size of the block that you called it for.',\n    },\n    {\n      name: 'toInt64OrZero',\n      def: 'toInt64OrZero(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'pathFull',\n      def: 'pathFull(v)',\n      docText: 'Selects the path, but including query-string and fragment. Example: /top/news.html?page=2#comments',\n    },\n    {\n      name: 'emptyArrayDate',\n      def: 'emptyArrayDate(v)',\n      docText: 'Accepts zero arguments and returns an empty array of the appropriate type.',\n    },\n    {\n      name: 'emptyArrayInt64',\n      def: 'emptyArrayInt64(v)',\n      docText: 'Accepts zero arguments and returns an empty array of the appropriate type.',\n    },\n    {\n      name: 'toInt32OrZero',\n      def: 'toInt32OrZero(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'greater',\n      def: 'greater(v)',\n      docText: '',\n    },\n    {\n      name: 'emptyArrayInt32',\n      def: 'emptyArrayInt32(v)',\n      docText: 'Accepts zero arguments and returns an empty array of the appropriate type.',\n    },\n    {\n      name: 'toString',\n      def: 'toString(str)',\n      docText:\n        'Accepts a FixedString(16) value containing the UUID in the binary format. Returns a readable string containing the UUID in the text format.',\n    },\n    {\n      name: 'greatest',\n      def: 'greatest(a, b)',\n      docText: 'Returns the greatest element of a and b.',\n    },\n    {\n      name: 'emptyArrayUInt64',\n      def: 'emptyArrayUInt64(v)',\n      docText: 'Accepts zero arguments and returns an empty array of the appropriate type.',\n    },\n    {\n      name: 'emptyArrayUInt32',\n      def: 'emptyArrayUInt32(v)',\n      docText: 'Accepts zero arguments and returns an empty array of the appropriate type.',\n    },\n    {\n      name: 'formatReadableSize',\n      def: 'formatReadableSize(x)',\n      docText:\n        'Gets a size (number of bytes). Returns a string that contains rounded size with the suffix (KiB, MiB etc.).\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        'SELECT\\n' +\n        '    arrayJoin([1, 1024, 1024*1024, 192851925]) AS f_bytes,\\n' +\n        '    formatReadableSize(filesize_bytes) AS filesize\\n' +\n        '┌─f_bytes-─┬─filesize───┐\\n' +\n        '│        1 │ 1.00 B     │\\n' +\n        '│     1024 │ 1.00 KiB   │\\n' +\n        '│  1048576 │ 1.00 MiB   │\\n' +\n        '│192851925 │ 183.92 MiB │\\n' +\n        '└──────────┴────────────┘\\n',\n    },\n    {\n      name: 'toInt16OrZero',\n      def: 'toInt16OrZero(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'emptyArrayUInt8',\n      def: 'emptyArrayUInt8(v)',\n      docText: 'Accepts zero arguments and returns an empty array of the appropriate type.',\n    },\n    {\n      name: 'protocol',\n      def: 'protocol(v)',\n      docText: 'Selects the protocol. Examples: http, ftp, mailto, magnet...',\n    },\n    {\n      name: 'regionToPopulation',\n      def: 'regionToPopulation(id[, geobase])',\n      docText:\n        'Gets the population for a region. \\n' +\n        '\\n' +\n        ' The population can be recorded in files with the geobase. See the section `External dictionaries`. \\n' +\n        '\\n' +\n        ' If the population is not recorded for the region, it returns 0. \\n' +\n        '\\n' +\n        ' In the Yandex geobase, the population might be recorded for child regions, but not for parent regions.',\n    },\n    {\n      name: 'notIn',\n      def: 'notIn(v)',\n      docText: 'See the section `IN operators`.',\n    },\n    {\n      name: 'position',\n      def: 'position(haystack, needle)',\n      docText:\n        'The same as `position`, but the position is returned in Unicode code points. Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text. If this assumption is not met, it returns some result (it doesn`t throw an exception). \\n' +\n        '\\n' +\n        \" There's also positionCaseInsensitiveUTF8 function.\",\n    },\n    {\n      name: 'arrayElement',\n      def: 'arrayElement(arr, n), arr[n] operator',\n      docText:\n        'Get the element with the index `n` from the array `arr`. \\n' +\n        '\\n' +\n        ' `n` should be any integer type. \\n' +\n        '\\n' +\n        ' Indexes in an array begin from one. \\n' +\n        '\\n' +\n        ' Negative indexes are supported - in this case, it selects the corresponding element numbered from the end. ',\n    },\n    {\n      name: 'toStringCutToZero',\n      def: 'toStringCutToZero(s)',\n      docText:\n        'Accepts a String or FixedString argument. Returns a String that is cut to a first null byte occurrence.',\n    },\n    {\n      name: 'log',\n      def: 'log(x)',\n      docText:\n        'Accepts a numeric argument and returns a Float64 number close to the decimal logarithm of the argument.',\n    },\n    {\n      name: 'SEIn',\n      def: 'SEIn(lhs, rhs)',\n      docText: 'Checks whether the `lhs` search engine belongs to the `rhs` search engine.',\n    },\n    {\n      name: 'replicate',\n      def: 'replicate(v)',\n      docText:\n        'Create a MergeTree table with a different name. Move all the data from the directory with the ReplicatedMergeTree table data to the new table`s data directory.',\n    },\n    {\n      name: 'sipHash64',\n      def: 'sipHash64(v)',\n      docText:\n        'Calculates SipHash from a string. \\n' +\n        '\\n' +\n        ' Accepts a String-type argument. Returns UInt64. \\n' +\n        '\\n' +\n        ' SipHash is a cryptographic hash function. It works at least three times faster than MD5. For more information, see [https://131002.net/siphash/](https://131002.net/siphash/)',\n    },\n    {\n      name: 'emptyArrayUInt16',\n      def: 'emptyArrayUInt16(v)',\n      docText: 'Accepts zero arguments and returns an empty array of the appropriate type.',\n    },\n    {\n      name: 'hex',\n      def: 'hex(str)',\n      docText:\n        'Accepts a string containing any number of hexadecimal digits, and returns a string containing the corresponding bytes. Supports both uppercase and lowercase letters A-F. The number of hexadecimal digits doesn`t have to be even.',\n    },\n    {\n      name: 'regionToDistrict',\n      def: 'regionToDistrict(id[, geobase])',\n      docText:\n        'Converts a region to a federal district (type 4 in the geobase). In every other way, this function is the same as `regionToCity`. ',\n    },\n    {\n      name: 'arrayFilter',\n      def: 'arrayFilter(func, arr1, ...)',\n      docText:\n        'Returns an array containing only the elements in `arr1` for which `func` returns something other than 0. \\n' +\n        '\\n' +\n        ' Examples: \\n' +\n        '\\n' +\n        ' SELECT arrayFilter(x -> x LIKE `%World%`, [`Hello`, `abc World`]) AS res ',\n    },\n    {\n      name: 'toStartOfQuarter',\n      def: 'toStartOfQuarter(v)',\n      docText:\n        'Rounds down a date or date with time to the first day of the quarter. \\n' +\n        '\\n' +\n        ' The first day of the quarter is either 1 January, 1 April, 1 July, or 1 October. Returns the date.',\n    },\n    {\n      name: 'divide',\n      def: 'divide(a, b), a / b operator',\n      docText:\n        'Calculates the quotient of the numbers. The result type is always a floating-point type. \\n' +\n        '\\n' +\n        ' It is not integer division. For integer division, use the `intDiv` function. \\n' +\n        '\\n' +\n        ' When dividing by zero you get `inf`, `-inf`, or `nan`.',\n    },\n    {\n      name: 'reverseUTF8',\n      def: 'reverseUTF8(v)',\n      docText:\n        'Reverses a sequence of Unicode code points, assuming that the string contains a set of bytes representing a UTF-8 text. Otherwise, it does something else (it doesn`t throw an exception).',\n    },\n    {\n      name: 'toDate',\n      def: 'toDate(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'emptyArrayFloat64',\n      def: 'emptyArrayFloat64(v)',\n      docText: 'Accepts zero arguments and returns an empty array of the appropriate type.',\n    },\n    {\n      name: 'abs',\n      def: 'abs(s, c)',\n      docText:\n        'If the `s` string is non-empty and does not contain the `c` character at the end, it appends the `c` character to the end.',\n    },\n    {\n      name: 'yesterday',\n      def: 'yesterday(v)',\n      docText:\n        'Accepts zero arguments and returns yesterday`s date at one of the moments of request execution. \\n' +\n        '\\n' +\n        ' The same as `today() - 1`.',\n    },\n    {\n      name: 'toMinute',\n      def: 'toMinute(v)',\n      docText: 'Converts a date with time to a UInt8 number containing the number of the minute of the hour (0-59).',\n    },\n    {\n      name: 'bitXor',\n      def: 'bitXor(a, b)',\n      docText: '',\n    },\n    {\n      name: 'minus',\n      def: 'minus(a, b), a - b operator',\n      docText:\n        'Calculates the difference. The result is always signed. \\n' +\n        '\\n' +\n        ' You can also calculate whole numbers from a date or date with time. The idea is the same - see above for `plus`.',\n    },\n    {\n      name: 'toDateTime',\n      def: 'toDateTime(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'modulo',\n      def: 'modulo(a, b), a % b operator',\n      docText:\n        'Calculates the remainder after division. \\n' +\n        '\\n' +\n        ' If arguments are floating-point numbers, they are pre-converted to integers by dropping the decimal portion. The remainder is taken in the same sense as in C++. Truncated division is used for negative numbers. \\n' +\n        '\\n' +\n        ' An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.',\n    },\n    {\n      name: 'bitmaskToArray',\n      def: 'bitmaskToArray(num)',\n      docText:\n        'Accepts an integer. Returns an array of UInt64 numbers containing the list of powers of two that total the source number when summed. Numbers in the array are in ascending order.',\n    },\n    {\n      name: 'negate',\n      def: 'negate(a), -a operator',\n      docText: 'Calculates a number with the reverse sign. The result is always signed.',\n    },\n    {\n      name: 'emptyArrayFloat32',\n      def: 'emptyArrayFloat32(v)',\n      docText: 'Accepts zero arguments and returns an empty array of the appropriate type.',\n    },\n    {\n      name: 'range',\n      def: 'range(N)',\n      docText:\n        'Returns an array of numbers from 0 to N-1. \\n' +\n        '\\n' +\n        ' Just in case, an exception is thrown if arrays with a total length of more than 100,000,000 elements are created in a data block.',\n    },\n    {\n      name: 'arrayAll',\n      def: 'arrayAll([func,] arr1, ...)',\n      docText:\n        'Returns 1 if `func` returns something other than 0 for all the elements in `arr`. Otherwise, it returns 0.',\n    },\n    {\n      name: 'toInt32',\n      def: 'toInt32(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'unhex',\n      def: 'unhex(str)',\n      docText:\n        'Accepts a string containing any number of hexadecimal digits, and returns a string containing the corresponding bytes. Supports both uppercase and lowercase letters A-F. The number of hexadecimal digits doesn`t have to be even. If it is odd, the last digit is interpreted as the younger half of the 00-0F byte. If the argument string contains anything other than hexadecimal digits, some implementation-defined result is returned (an exception isn`t thrown). \\n' +\n        '\\n' +\n        ' If you want to convert the result to a number, you can use the functions `reverse` and `reinterpretAsType`.',\n    },\n    {\n      name: 'toFloat64',\n      def: 'toFloat64(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'bitAnd',\n      def: 'bitAnd(a, b)',\n      docText: '',\n    },\n    {\n      name: 'toStartOfYear',\n      def: 'toStartOfYear(v)',\n      docText: 'Rounds down a date or date with time to the first day of the year. \\n' + '\\n' + ' Returns the date.',\n    },\n    {\n      name: 'bitOr',\n      def: 'bitOr(a, b)',\n      docText: '',\n    },\n    {\n      name: 'SEToRoot',\n      def: 'SEToRoot(v)',\n      docText:\n        'Accepts a UInt8 number - the ID of the search engine from the Yandex.Metrica dictionary. If any search engine matches the passed number, it returns a UInt8 number - the ID of the corresponding root search engine (for example, it converts Yandex.Images to Yandex). Otherwise, returns 0.',\n    },\n    {\n      name: 'toRelativeMinuteNum',\n      def: 'toRelativeMinuteNum(v)',\n      docText:\n        'Converts a date with time or date to the number of the minute, starting from a certain fixed point in the past.',\n    },\n    {\n      name: 'visitParamExtractInt',\n      def: 'visitParamExtractInt(params, name)',\n      docText: 'The same as for Int64.',\n    },\n    {\n      name: 'emptyArrayInt16',\n      def: 'emptyArrayInt16(v)',\n      docText: 'Accepts zero arguments and returns an empty array of the appropriate type.',\n    },\n    {\n      name: 'visitParamExtractString',\n      def: 'visitParamExtractString(params, name)',\n      docText:\n        'Parses the string in double quotes. The value is unescaped. If unescaping failed, it returns an empty string. ',\n    },\n    {\n      name: 'arrayEnumerateUniq',\n      def: 'arrayEnumerateUniq(arr, ...)',\n      docText:\n        'Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value. ',\n    },\n    {\n      name: 'visitParamExtractUInt',\n      def: 'visitParamExtractUInt(params, name)',\n      docText:\n        'Parses UInt64 from the value of the field named `name`. If this is a string field, it tries to parse a number from the beginning of the string. If the field doesn`t exist, or it exists but doesn`t contain a number, it returns 0.',\n    },\n    {\n      name: 'toTypeName',\n      def: 'toTypeName(x)',\n      docText: 'Gets the type name. Returns a string containing the type name of the passed argument.',\n    },\n    {\n      name: 'empty',\n      def: 'empty(v)',\n      docText: 'Accepts an empty array as argument and returns an array of one element equal to the default value.',\n    },\n    {\n      name: 'multiply',\n      def: 'multiply(a, b), a * b operator',\n      docText: 'Calculates the product of the numbers.',\n    },\n    {\n      name: 'has',\n      def: \"has('database', 'table', 'column')\",\n      docText:\n        'Accepts constant String columns - database name, table name and column name. Returns constant UInt8 value, equal to 1 if column exists, otherwise 0.\\n' +\n        '\\n' +\n        \" If table doesn't exist than exception is thrown. \\n\" +\n        '\\n' +\n        ' For elements of nested data structure function checks existence of column. For nested data structure 0 is returned.',\n    },\n    {\n      name: 'bitNot',\n      def: 'bitNot(a)',\n      docText: '',\n    },\n    {\n      name: 'lessOrEquals',\n      def: 'lessOrEquals(v)',\n      docText: 'greaterOrEquals, >= operator',\n    },\n    {\n      name: 'reinterpretAsInt64',\n      def: 'reinterpretAsInt64(v)',\n      docText:\n        \"Functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.\",\n    },\n    {\n      name: 'IPv4NumToString',\n      def: 'IPv4NumToString(num)',\n      docText: 'Similar to IPv4NumToString, but using `xxx` instead of the last octet. ',\n    },\n    {\n      name: 'bitShiftLeft',\n      def: 'bitShiftLeft(a, b)',\n      docText: '',\n    },\n    {\n      name: 'dictGetInt16',\n      def: 'dictGetInt16(v)',\n      docText:\n        \"dictGetT('dict_name', 'attr_name', id) Gets the value of the 'attr_name' attribute from the 'dict_name' dictionary by the 'id' key. 'dict_name' and 'attr_name' are constant strings. 'id' must be UInt64. If the 'id' key is not in the dictionary, it returns the default value set in the dictionary definition.\",\n    },\n    {\n      name: 'toUInt32OrZero',\n      def: 'toUInt32OrZero(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'regionIn',\n      def: 'regionIn(lhs, rhs[, geobase])',\n      docText:\n        'Checks whether a `lhs` region belongs to a `rhs` region. Returns a UInt8 number equal to 1 if it belongs, or 0 if it doesn`t belong. \\n' +\n        '\\n' +\n        ' The relationship is reflexive - any region also belongs to itself.',\n    },\n    {\n      name: 'reinterpretAsUInt8',\n      def: 'reinterpretAsUInt8(v)',\n      docText:\n        \"Functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.\",\n    },\n    {\n      name: 'dictIsIn',\n      def: 'dictIsIn(v)',\n      docText:\n        '`dictIsIn(`dict_name`, child_id, ancestor_id)` \\n' +\n        '\\n' +\n        ' - For the `dict_name` hierarchical dictionary, finds out whether the `child_id` key is located inside `ancestor_id` (or matches `ancestor_id`). Returns UInt8.',\n    },\n    {\n      name: 'toSecond',\n      def: 'toSecond(v)',\n      docText:\n        'Converts a date with time to a UInt8 number containing the number of the second in the minute (0-59). \\n' +\n        '\\n' +\n        ' Leap seconds are not accounted for.',\n    },\n    {\n      name: 'least',\n      def: 'least(a, b)',\n      docText: 'Returns the least element of a and b.',\n    },\n    {\n      name: 'countEqual',\n      def: 'countEqual(arr, x)',\n      docText:\n        'Returns the number of elements in the array equal to `x`. Equivalent to `arrayCount(elem -> elem = x, arr)`.',\n    },\n    {\n      name: 'IPv4StringToNum',\n      def: 'IPv4StringToNum(s)',\n      docText: 'The reverse function of IPv4NumToString. If the IPv4 address has an invalid format, it returns 0.',\n    },\n    {\n      name: 'replaceRegexpAll',\n      def: 'replaceRegexpAll(haystack, pattern, replacement)',\n      docText: 'This does the same thing, but replaces all the occurrences',\n    },\n    {\n      name: 'SHA224',\n      def: 'SHA224(v)',\n      docText:\n        'Calculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32). \\n' +\n        '\\n' +\n        ' The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million). ',\n    },\n    {\n      name: 'URLHash',\n      def: 'URLHash(url[, N])',\n      docText:\n        'A fast, decent-quality non-cryptographic hash function for a string obtained from a URL using some type of normalization. \\n' +\n        '\\n' +\n        ' URLHash(s) - Calculates a hash from a string without one of the trailing symbols /,? or # at the end, if present',\n    },\n    {\n      name: 'equals',\n      def: 'equals(v)',\n      docText: 'greaterOrEquals, >= operator',\n    },\n    {\n      name: 'plus',\n      def: 'plus(a, b), a + b operator',\n      docText:\n        'Calculates the sum of the numbers. \\n' +\n        '\\n' +\n        ' You can also add whole numbers with a date or date and time. In the case of a date, adding a whole number means adding the corresponding number of days. For a date with time, it means adding the corresponding number of seconds.',\n    },\n    {\n      name: 'less',\n      def: 'less(v)',\n      docText: 'greaterOrEquals, >= operator',\n    },\n    {\n      name: 'regionHierarchy',\n      def: 'regionHierarchy(id[, geobase])',\n      docText:\n        'Accepts a UInt32 number - the region ID from the Yandex geobase. Returns an array of region IDs consisting of the passed region and all parents along the chain. \\n' +\n        '\\n' +\n        ' Example: `regionHierarchy(toUInt32(213)) = [213,1,3,225,10001,10000]`.',\n    },\n    {\n      name: 'toUInt64OrZero',\n      def: 'toUInt64OrZero(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'rowNumberInAllBlocks',\n      def: 'rowNumberInAllBlocks()',\n      docText: 'Returns an incremental row number within all blocks that were processed by this function.',\n    },\n    {\n      name: 'toDayOfWeek',\n      def: 'toDayOfWeek(v)',\n      docText:\n        'Converts a date or date with time to a UInt8 number containing the number of the day of the week (Monday is 1, and Sunday is 7).',\n    },\n    {\n      name: 'bar',\n      def: 'bar(v)',\n      docText:\n        'Allows building a unicode-art diagram. \\n' +\n        '\\n' +\n        ' bar(x, min, max, width) - Draws a band with a width proportional to (x - min) and equal to `width` characters when x',\n    },\n    {\n      name: 'if',\n      def: 'if(v)',\n      docText:\n        'The suffix -`If` can be appended to the name of any aggregate function. In this case, the aggregate function accepts an extra argument - a condition (Uint8 type). ',\n    },\n    {\n      name: 'regionToArea',\n      def: 'regionToArea(id[, geobase])',\n      docText:\n        'Converts a region to an area (type 5 in the geobase). In every other way, this function is the same as `regionToCity`.',\n    },\n    {\n      name: 'dictGetUInt16',\n      def: 'dictGetUInt16(v)',\n      docText:\n        \"dictGetT('dict_name', 'attr_name', id) Gets the value of the 'attr_name' attribute from the 'dict_name' dictionary by the 'id' key. 'dict_name' and 'attr_name' are constant strings. 'id' must be UInt64. If the 'id' key is not in the dictionary, it returns the default value set in the dictionary definition.\",\n    },\n    {\n      name: 'toUInt8',\n      def: 'toUInt8(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'toUInt16',\n      def: 'toUInt16(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'path',\n      def: 'path(URL)',\n      docText:\n        '- The same thing, but without the protocol and host in the result. The / element (root) is not included.',\n    },\n    {\n      name: 'extractURLParameters',\n      def: 'extractURLParameters(URL)',\n      docText:\n        '- Gets an array of name=value strings corresponding to the URL parameters. The values are not decoded in any way.',\n    },\n    {\n      name: 'OSHierarchy',\n      def: 'OSHierarchy(v)',\n      docText:\n        'Accepts a UInt8 number - the ID of the operating system from the Yandex.Metrica dictionary. Returns an array with a hierarchy of operating systems. Similar to the `regionHierarchy` function.',\n    },\n    {\n      name: 'cutQueryStringAndFragment',\n      def: 'cutQueryStringAndFragment(v)',\n      docText: 'Removes the query-string and fragment identifier. The question mark and number sign are also removed.',\n    },\n    {\n      name: 'timeSlots',\n      def: 'timeSlots(StartTime, Duration)',\n      docText:\n        'For a time interval starting at `StartTime` and continuing for `Duration` seconds, it returns an array of moments in time, consisting of points from this interval rounded down to the half hour. \\n' +\n        '\\n' +\n        ' For example, `timeSlots(toDateTime(`2012-01-01 12:20:00`), toUInt32(600)) = [toDateTime(`2012-01-01 12:00:00`), toDateTime(`2012-01-01 12:30:00`)]`. \\n' +\n        '\\n' +\n        ' This is necessary for searching for pageviews in the corresponding session.',\n    },\n    {\n      name: 'toUInt32',\n      def: 'toUInt32(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'toStartOfMinute',\n      def: 'toStartOfMinute(v)',\n      docText: 'Rounds down a date with time to the start of the minute.',\n    },\n    {\n      name: 'version',\n      def: 'version()',\n      docText: \"Returns server's version as a string.\",\n    },\n    {\n      name: 'toUInt64',\n      def: 'toUInt64(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'toInt16',\n      def: 'toInt16(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'reinterpretAsInt16',\n      def: 'reinterpretAsInt16(v)',\n      docText:\n        \"Functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.\",\n    },\n    {\n      name: 'toInt64',\n      def: 'toInt64(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'toFixedString',\n      def: 'toFixedString(s, N)',\n      docText:\n        'Converts a String type argument to a FixedString(N) type (a string with fixed length N). N must be a constant. If the string has fewer bytes than N, it is passed with null bytes to the right. If the string has more bytes than N, an exception is thrown.',\n    },\n    {\n      name: 'toFloat32',\n      def: 'toFloat32(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'dictGetHierarchy',\n      def: 'dictGetHierarchy(v)',\n      docText:\n        '`dictGetHierarchy(`dict_name`, id)` \\n' +\n        '\\n' +\n        ' - For the `dict_name` hierarchical dictionary, returns an array of dictionary keys starting from `id` and continuing along the chain of parent elements. Returns Array(UInt64).',\n    },\n    {\n      name: 'dictGetInt64',\n      def: 'dictGetInt64(v)',\n      docText:\n        \"dictGetT('dict_name', 'attr_name', id) Gets the value of the 'attr_name' attribute from the 'dict_name' dictionary by the 'id' key. 'dict_name' and 'attr_name' are constant strings. 'id' must be UInt64. If the 'id' key is not in the dictionary, it returns the default value set in the dictionary definition.\",\n    },\n    {\n      name: 'CAST',\n      def: 'CAST(x, t)',\n      docText: 'Casts `x` to the `t` data type. \\n' + '\\n' + ' The syntax `CAST(x AS t)` is also supported. \\n',\n    },\n    {\n      name: 'toRelativeSecondNum',\n      def: 'toRelativeSecondNum(v)',\n      docText:\n        'Converts a date with time or date to the number of the second, starting from a certain fixed point in the past.',\n    },\n    {\n      name: 'toUInt8OrZero',\n      def: 'toUInt8OrZero(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'toStartOfMonth',\n      def: 'toStartOfMonth(v)',\n      docText: 'Rounds down a date or date with time to the first day of the month. \\n' + '\\n' + ' Returns the date.',\n    },\n    {\n      name: 'rand64',\n      def: 'rand64(v)',\n      docText:\n        'Returns a pseudo-random UInt64 number, evenly distributed among all UInt64-type numbers. \\n' +\n        '\\n' +\n        ' Uses a linear congruential generator.',\n    },\n    {\n      name: 'toInt8OrZero',\n      def: 'toInt8OrZero(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'toFloat32OrZero',\n      def: 'toFloat32OrZero(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'toYear',\n      def: 'toYear(v)',\n      docText: 'Converts a date or date with time to a UInt16 number containing the year number (AD).',\n    },\n    {\n      name: 'atan',\n      def: 'atan(x)',\n      docText: 'The arc tangent.',\n    },\n    {\n      name: 'toFloat64OrZero',\n      def: 'toFloat64OrZero(v)',\n      docText:\n        'Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times. All these functions accept one argument. ',\n    },\n    {\n      name: 'arrayEnumerate',\n      def: 'arrayEnumerate(arr, ...)',\n      docText:\n        'Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value.',\n    },\n    {\n      name: 'toDayOfMonth',\n      def: 'toDayOfMonth(v)',\n      docText:\n        'Converts a date or date with time to a UInt8 number containing the number of the day of the month (1-31).',\n    },\n    {\n      name: 'dictGetUInt64',\n      def: 'dictGetUInt64(v)',\n      docText:\n        \"dictGetT('dict_name', 'attr_name', id) Gets the value of the 'attr_name' attribute from the 'dict_name' dictionary by the 'id' key. 'dict_name' and 'attr_name' are constant strings. 'id' must be UInt64. If the 'id' key is not in the dictionary, it returns the default value set in the dictionary definition.\",\n    },\n    {\n      name: 'IPv4NumToStringClassC',\n      def: 'IPv4NumToStringClassC(num)',\n      docText: 'Similar to IPv4NumToString, but using `xxx` instead of the last octet. ',\n    },\n    {\n      name: 'reinterpretAsString',\n      def: 'reinterpretAsString(v)',\n      docText:\n        'This function accepts a number or date or date with time, and returns a string containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a string that is one byte long.',\n    },\n    {\n      name: 'toHour',\n      def: 'toHour(v)',\n      docText:\n        'Converts a date with time to a UInt8 number containing the number of the hour in 24-hour time (0-23). \\n' +\n        '\\n' +\n        ' This function assumes that if clocks are moved ahead, it is by one hour and occurs at 2 a.m., and if clocks are moved back, it is by one hour and occurs at 3 a.m. (which is not always true - even in Moscow the clocks were once changed at a different time).',\n    },\n    {\n      name: 'ignore',\n      def: 'ignore(...)',\n      docText:\n        'A function that accepts any arguments and always returns 0. \\n' +\n        '\\n' +\n        ' However, the argument is still calculated. This can be used for benchmarks.',\n    },\n    {\n      name: 'arrayJoin',\n      def: 'arrayJoin(v)',\n      docText:\n        'This is a very unusual function.\\n' +\n        '\\n' +\n        \"Normal functions don't change a set of rows, but just change the values in each row (map). Aggregate functions compress a set of rows (fold or reduce). The 'arrayJoin' function takes each row and generates a set of rows (unfold).\\n\" +\n        '\\n' +\n        'This function takes an array as an argument, and propagates the source row to multiple rows for the number of elements in the array. All the values in columns are simply copied, except the values in the column where this function is applied - it is replaced with the corresponding array value.\\n' +\n        '\\n' +\n        \"A query can use multiple 'arrayJoin' functions. In this case, the transformation is performed multiple times.\\n\" +\n        '\\n' +\n        'Note the ARRAY JOIN syntax in the SELECT query, which provides broader possibilities.',\n    },\n    {\n      name: 'length',\n      def: 'length(v)',\n      docText:\n        'Returns the length of a string in Unicode code points (not in characters), assuming that the string contains a set of bytes that make up UTF-8 encoded text. If this assumption is not met, it returns some result (it doesn`t throw an exception). \\n' +\n        '\\n' +\n        ' The result type is UInt64.',\n    },\n    {\n      name: 'tuple',\n      def: 'tuple(tuple, n), operator x.N',\n      docText:\n        'A function that allows getting columns from a tuple. \\n' +\n        '\\n' +\n        ' `N` is the column index, starting from 1. `N` must be a constant. `N` must be a strict postive integer no greater than the size of the tuple. \\n' +\n        '\\n' +\n        ' There is no cost to execute the function.',\n    },\n    {\n      name: 'extractURLParameterNames',\n      def: 'extractURLParameterNames(URL)',\n      docText:\n        '- Gets an array of name=value strings corresponding to the names of URL parameters. The values are not decoded in any way.',\n    },\n    {\n      name: 'tupleElement',\n      def: 'tupleElement(tuple, n), operator x.N',\n      docText:\n        'A function that allows getting columns from a tuple. \\n' +\n        '\\n' +\n        ' `N` is the column index, starting from 1. `N` must be a constant. `N` must be a strict postive integer no greater than the size of the tuple. \\n' +\n        '\\n' +\n        ' There is no cost to execute the function.',\n    },\n    {\n      name: 'in',\n      def: 'in(v)',\n      docText: 'What to do when the amount of data exceeds one of the limits: `throw` or `break`. By default, throw.',\n    },\n    {\n      name: 'globalIn',\n      def: 'globalIn(v)',\n      docText: 'See the section `IN operators`.',\n    },\n    {\n      name: 'isFinite',\n      def: 'isFinite(x)',\n      docText:\n        'Accepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is not infinite and not a NaN, otherwise 0.',\n    },\n    {\n      name: 'isNaN',\n      def: 'isNaN(x)',\n      docText: 'Accepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is a NaN, otherwise 0.',\n    },\n    {\n      name: 'isInfinite',\n      def: 'isInfinite(x)',\n      docText:\n        'Accepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is infinite, otherwise 0. \\n' +\n        '\\n' +\n        ' Note that 0 is returned for a NaN.',\n    },\n    {\n      name: 'transform',\n      def: 'transform(v)',\n      docText:\n        'Transforms a value according to the explicitly defined mapping of some elements to other ones. \\n' +\n        '\\n' +\n        ' There are two variations of this function: \\n' +\n        '\\n' +\n        ' 1. `transform(x, array_from, array_to, default)` ',\n    },\n    {\n      name: 'rand',\n      def: 'rand(v)',\n      docText:\n        'Returns a pseudo-random UInt64 number, evenly distributed among all UInt64-type numbers. \\n' +\n        '\\n' +\n        ' Uses a linear congruential generator.',\n    },\n    {\n      name: 'reinterpretAsUInt16',\n      def: 'reinterpretAsUInt16(v)',\n      docText:\n        \"Functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.\",\n    },\n    {\n      name: 'pi',\n      def: 'pi(v)',\n      docText:\n        'Maximum pipeline depth. Corresponds to the number of transformations that each data block goes through during query processing. Counted within the limits of a single server. If the pipeline depth is greater, an exception is thrown. By default, 1000.',\n    },\n    {\n      name: 'reinterpretAsUInt32',\n      def: 'reinterpretAsUInt32(v)',\n      docText:\n        \"Functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.\",\n    },\n    {\n      name: 'reinterpretAsUInt64',\n      def: 'reinterpretAsUInt64(v)',\n      docText:\n        \"Functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.\",\n    },\n    {\n      name: 'reinterpretAsInt8',\n      def: 'reinterpretAsInt8(v)',\n      docText:\n        \"Functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.\",\n    },\n    {\n      name: 'upperUTF8',\n      def: 'upperUTF8(v)',\n      docText:\n        'Converts a string to uppercase, assuming the string contains a set of bytes that make up a UTF-8 encoded text. It doesn`t detect the language. So for Turkish the result might not be exactly correct. ',\n    },\n    {\n      name: 'reinterpretAsInt32',\n      def: 'reinterpretAsInt32(v)',\n      docText:\n        \"Functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.\",\n    },\n    {\n      name: 'reinterpretAsFloat32',\n      def: 'reinterpretAsFloat32(v)',\n      docText:\n        \"Functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.\",\n    },\n    {\n      name: 'reinterpretAsFloat64',\n      def: 'reinterpretAsFloat64(v)',\n      docText:\n        \"Functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.\",\n    },\n    {\n      name: 'reinterpretAsDate',\n      def: 'reinterpretAsDate(v)',\n      docText:\n        \"Functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.\",\n    },\n    {\n      name: 'reinterpretAsDateTime',\n      def: 'reinterpretAsDateTime(v)',\n      docText:\n        \"Functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.\",\n    },\n    {\n      name: 'roundToExp2',\n      def: 'roundToExp2(num)',\n      docText:\n        'Accepts a number. If the number is less than one, it returns 0. Otherwise, it rounds the number down to the nearest (whole non-negative) degree of two.',\n    },\n    {\n      name: 'upper',\n      def: 'upper(v)',\n      docText:\n        'Converts a string to uppercase, assuming the string contains a set of bytes that make up a UTF-8 encoded text. It doesn`t detect the language. So for Turkish the result might not be exactly correct.',\n    },\n    {\n      name: 'positionUTF8',\n      def: 'positionUTF8(haystack, needle)',\n      docText:\n        'The same as `position`, but the position is returned in Unicode code points. Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text. If this assumption is not met, it returns some result (it doesn`t throw an exception). \\n' +\n        '\\n' +\n        \" There's also positionCaseInsensitiveUTF8 function.\",\n    },\n    {\n      name: 'roundDuration',\n      def: 'roundDuration(num)',\n      docText:\n        'Accepts a number. If the number is less than one, it returns 0. Otherwise, it rounds the number down to numbers from the set: 1, 10, 30, 60, 120, 180, 240, 300, 600, 1200, 1800, 3600, 7200, 18000, 36000. This function is specific to Yandex.Metrica and used for implementing the report on session length.',\n    },\n    {\n      name: 'roundAge',\n      def: 'roundAge(num)',\n      docText:\n        'Accepts a number. If the number is less than 18, it returns 0. Otherwise, it rounds the number down to numbers from the set: 18, 25, 35, 45. This function is specific to Yandex.Metrica and used for implementing the report on user age.',\n    },\n    {\n      name: 'round',\n      def: 'round(num)',\n      docText:\n        'Accepts a number. If the number is less than 18, it returns 0. Otherwise, it rounds the number down to numbers from the set: 18, 25, 35, 45. This function is specific to Yandex.Metrica and used for implementing the report on user age.',\n    },\n    {\n      name: 'floor',\n      def: 'floor(x[, N])',\n      docText: 'Returns a rounder number that is less than or equal to `x`.',\n    },\n    {\n      name: 'notEmpty',\n      def: 'notEmpty(v)',\n      docText:\n        'Returns 0 for an empty array, or 1 for a non-empty array. \\n' +\n        '\\n' +\n        ' The result type is UInt8. \\n' +\n        '\\n' +\n        ' The function also works for strings.',\n    },\n    {\n      name: 'lengthUTF8',\n      def: 'lengthUTF8(v)',\n      docText:\n        'Returns the length of a string in Unicode code points (not in characters), assuming that the string contains a set of bytes that make up UTF-8 encoded text. If this assumption is not met, it returns some result (it doesnt throw an exception). \\n' +\n        '\\n' +\n        ' The result type is UInt64.',\n    },\n    {\n      name: 'lower',\n      def: 'lower(v)',\n      docText:\n        'Converts a string to lowercase, assuming the string contains a set of bytes that make up a UTF-8 encoded text. It doesn`t detect the language.  ',\n    },\n    {\n      name: 'lowerUTF8',\n      def: 'lowerUTF8(v)',\n      docText:\n        'Converts a string to lowercase, assuming the string contains a set of bytes that make up a UTF-8 encoded text. It doesn`t detect the language. ',\n    },\n    {\n      name: 'reverse',\n      def: 'reverse(v)',\n      docText:\n        'Reverses a sequence of Unicode code points, assuming that the string contains a set of bytes representing a UTF-8 text. Otherwise, it does something else (it doesn`t throw an exception).',\n    },\n    {\n      name: 'URLPathHierarchy',\n      def: 'URLPathHierarchy(URL)',\n      docText:\n        '- The same thing, but without the protocol and host in the result. The / element (root) is not included. ',\n    },\n    {\n      name: 'substringUTF8',\n      def: 'substringUTF8(s, offset, length)',\n      docText:\n        'The same as `substring`, but for Unicode code points. Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text. If this assumption is not met, it returns some result (it doesn`t throw an exception).',\n    },\n    {\n      name: 'appendTrailingCharIfAbsent',\n      def: 'appendTrailingCharIfAbsent(s, c)',\n      docText:\n        'If the `s` string is non-empty and does not contain the `c` character at the end, it appends the `c` character to the end.',\n    },\n    {\n      name: 'alphaTokens',\n      def: 'alphaTokens(s)',\n      docText:\n        'Selects substrings of consecutive bytes from the range a-z and A-Z. \\n' +\n        '\\n' +\n        ' Returns an array of selected substrings.',\n    },\n    {\n      name: 'splitByChar',\n      def: 'splitByChar(separator, s)',\n      docText:\n        'Splits a string into substrings, using `separator` as the separator. \\n' +\n        '\\n' +\n        ' `separator` must be a string constant consisting of exactly one character. \\n' +\n        '\\n' +\n        ' Returns an array of selected substrings',\n    },\n    {\n      name: 'arrayStringConcat',\n      def: 'arrayStringConcat(arr[, separator])',\n      docText:\n        'Concatenates strings from the array elements, using `separator` as the separator. \\n' +\n        '\\n' +\n        ' `separator` is a string constant, an optional parameter. By default it is an empty string. \\n' +\n        '\\n' +\n        ' Returns a string.',\n    },\n    {\n      name: 'replaceAll',\n      def: 'replaceAll(haystack, pattern, replacement)',\n      docText: 'Replaces all occurrences of the `pattern` substring in `haystack` with the `replacement` substring.',\n    },\n    {\n      name: 'replaceRegexpOne',\n      def: 'replaceRegexpOne(haystack, pattern, replacement)',\n      docText:\n        'Replacement using the `pattern` regular expression. A re2 regular expression. Replaces only the first occurrence, if it exists. \\n' +\n        '\\n' +\n        ' A pattern can be specified as `replacement`. ',\n    },\n    {\n      name: 'cbrt',\n      def: 'cbrt(x)',\n      docText: 'Accepts a numeric argument and returns a Float64 number close to the cubic root of the argument.',\n    },\n    {\n      name: 'match',\n      def: 'match(pattern)(time, cond1, cond2, ...)',\n      docText:\n        'Pattern matching for event chains. \\n' +\n        '\\n' +\n        ' `pattern` is a string containing a pattern to match. The pattern is similar to a regular expression.',\n    },\n    {\n      name: 'cutURLParameter',\n      def: 'cutURLParameter(URL, name)',\n      docText:\n        'Removes the URL parameter named `name`, if present. This function works under the assumption that the parameter name is encoded in the URL exactly the same way as in the passed argument.',\n    },\n    {\n      name: 'like',\n      def: 'like(haystack, pattern), haystack NOT LIKE pattern operator',\n      docText: 'The same thing as `like`, but negative.',\n    },\n    {\n      name: 'domain',\n      def: 'domain(v)',\n      docText:\n        '- Selects the part of the domain that includes top-level subdomains up to the `first significant subdomain` (see the explanation above). \\n' +\n        '\\n' +\n        ' For example, cutToFirstSignificantSubdomain(`https://news.yandex.com.tr/`) = `yandex.com.tr`.',\n    },\n    {\n      name: 'domainWithoutWWW',\n      def: 'domainWithoutWWW(v)',\n      docText: '- Selects the domain and removes no more than one `www.` from the beginning of it, if present.',\n    },\n    {\n      name: 'firstSignificantSubdomain',\n      def: 'firstSignificantSubdomain(v)',\n      docText:\n        '- Selects the part of the domain that includes top-level subdomains up to the `first significant subdomain` (see the explanation above). \\n' +\n        '\\n' +\n        ' For example, cutToFirstSignificantSubdomain(`https://news.yandex.com.tr/`) = `yandex.com.tr`.',\n    },\n    {\n      name: 'queryString',\n      def: 'queryString(v)',\n      docText: 'Removes the query-string and fragment identifier. The question mark and number sign are also removed.',\n    },\n    {\n      name: 'queryStringAndFragment',\n      def: 'queryStringAndFragment(v)',\n      docText: 'Removes the query-string and fragment identifier. The question mark and number sign are also removed.',\n    },\n    {\n      name: 'extractURLParameter',\n      def: 'extractURLParameter(URL)',\n      docText:\n        '- Gets an array of name=value strings corresponding to the names of URL parameters. The values are not decoded in any way.',\n    },\n    {\n      name: 'URLHierarchy',\n      def: 'URLHierarchy(URL)',\n      docText:\n        '- Gets an array containing the URL trimmed to the `/`, `?` characters in the path and query-string.  Consecutive separator characters are counted as one. The cut is made in the position after all the consecutive separator characters. Example:',\n    },\n    {\n      name: 'cutToFirstSignificantSubdomain',\n      def: 'cutToFirstSignificantSubdomain(v)',\n      docText:\n        '- Selects the part of the domain that includes top-level subdomains up to the `first significant subdomain` (see the explanation above). \\n' +\n        '\\n' +\n        ' For example, cutToFirstSignificantSubdomain(`https://news.yandex.com.tr/`) = `yandex.com.tr`.',\n    },\n    {\n      name: 'cutWWW',\n      def: 'cutWWW(v)',\n      docText: 'Removes no more than one `www.` from the beginning of the URL`s domain, if present.',\n    },\n    {\n      name: 'cutQueryString',\n      def: 'cutQueryString(v)',\n      docText: 'Removes the query-string and fragment identifier. The question mark and number sign are also removed.',\n    },\n    {\n      name: 'cutFragment',\n      def: 'cutFragment(v)',\n      docText: 'Removes the fragment identifier. The number sign is also removed.',\n    },\n    {\n      name: 'visitParamHas',\n      def: 'visitParamHas(params, name)',\n      docText: 'Checks whether there is a field with the `name` name.',\n    },\n    {\n      name: 'visitParamExtractFloat',\n      def: 'visitParamExtractFloat(params, name)',\n      docText: 'The same as for Float64.',\n    },\n    {\n      name: 'visitParamExtractBool',\n      def: 'visitParamExtractBool(params, name)',\n      docText: 'Parses a true/false value. The result is UInt8.',\n    },\n    {\n      name: 'visitParamExtractRaw',\n      def: 'visitParamExtractRaw(params, name)',\n      docText: 'Returns the value of a field, including separators.',\n    },\n    {\n      name: 'exp',\n      def: 'exp(x)',\n      docText: 'Accepts a numeric argument and returns a Float64 number close to 10 in power of x.',\n    },\n    {\n      name: 'exp2',\n      def: 'exp2(x)',\n      docText: 'Accepts a numeric argument and returns a Float64 number close to 2 in power of x.',\n    },\n    {\n      name: 'exp10',\n      def: 'exp10(x)',\n      docText: 'Accepts a numeric argument and returns a Float64 number close to 10 in power of x.',\n    },\n    {\n      name: 'tgamma',\n      def: 'tgamma(x)',\n      docText: 'Gamma function.',\n    },\n    {\n      name: 'log10',\n      def: 'log10(x)',\n      docText:\n        'Accepts a numeric argument and returns a Float64 number close to the decimal logarithm of the argument.',\n    },\n    {\n      name: 'sqrt',\n      def: 'sqrt(x)',\n      docText: 'Accepts a numeric argument and returns a Float64 number close to the square root of the argument.',\n    },\n    {\n      name: 'erf',\n      def: 'erf(v)',\n      docText: 'What to do when the amount of data exceeds one of the limits: `throw` or `break`. By default, throw.',\n    },\n    {\n      name: 'erfc',\n      def: 'erfc(x)',\n      docText:\n        'Accepts a numeric argument and returns a Float64 number close to 1 - erf(x), but without loss of precision for large `x` values.',\n    },\n    {\n      name: 'lgamma',\n      def: 'lgamma(x)',\n      docText: 'The logarithm of the gamma function.',\n    },\n    {\n      name: 'sin',\n      def: 'sin(x)',\n      docText:\n        'Accepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is infinite, otherwise 0. \\n' +\n        '\\n' +\n        ' Note that 0 is returned for a NaN.',\n    },\n    {\n      name: 'cos',\n      def: 'cos(x)',\n      docText: 'The arc cosine.',\n    },\n    {\n      name: 'tan',\n      def: 'tan(x)',\n      docText: 'The arc tangent.',\n    },\n    {\n      name: 'pow',\n      def: 'pow(x, y)',\n      docText: 'x in power of y.',\n    },\n    {\n      name: 'JSONExtract',\n      def: 'JSONExtract(json[, indices_or_keys…], Return_type)',\n      docText: 'Parses a JSON and extract a value of the given ClickHouse data type.',\n    },\n  ];\n};\n\nexport { getAutocompletions };\n","const getMacrosAutocompletion = function () {\n  return [\n    {\n      name: '$table',\n      def: '$table',\n      docText: 'Replaced with selected table name from Query Builder',\n    },\n    {\n      name: '$dateCol',\n      def: '$dateCol',\n      docText: 'Replaced with `Date:Col` value from Query Builder',\n    },\n    {\n      name: '$dateTimeCol',\n      def: '$dateTimeCol',\n      docText: 'Replaced with `Column:DateTime` or `Column:TimeStamp` value from Query Builder',\n    },\n    {\n      name: '$from',\n      def: '$from',\n      docText: 'Replaced with timestamp/1000 value of selected `Time Range:From`',\n    },\n    {\n      name: '$to',\n      def: '$to',\n      docText: 'Replaced with timestamp/1000 value of selected `Time Range:To`',\n    },\n    {\n      name: '$interval',\n      def: '$interval',\n      docText: 'Replaced with selected `Group by time interval` value (as a number of seconds)',\n    },\n    {\n      name: '$timeFilter',\n      def: '$timeFilter',\n      docText:\n        'Replaced with currently selected `Time Range`. Requires `Column:Date` and `Column:DateTime` or `Column:TimeStamp` or `Column:DateTime64` to be selected',\n    },\n    {\n      name: '$timeFilterMs',\n      def: '$timeFilterMs',\n      docText:\n        'Replaced with currently selected `Time Range` with Millisecond precision. Requires `Column:DateTime64` to be selected',\n    },\n    {\n      name: '$timeFilterByColumn',\n      def: '$timeFilterByColumn(column_name)',\n      docText:\n        'Replaced with currently selected `Time Range`. Requires column name with type `Date` and `DateTime` or `DateTime64`',\n    },\n    {\n      name: '$timeFilter64ByColumn',\n      def: '$timeFilter64ByColumn(column_name)',\n      docText:\n        'Replaced with currently selected `Time Range` with sub-seconds values. Requires column name with type `DateTime64`',\n    },\n    {\n      name: '$timeSeries',\n      def: '$timeSeries',\n      docText:\n        'Replaced with special ClickHouse construction to convert results as time-series data. Use it as `SELECT $timeSeries...`. Require `Column:DateTime` or `Column:TimeStamp` or `Column:DateTime64` to be selected',\n    },\n    {\n      name: '$timeSeriesMs',\n      def: '$timeSeriesMs',\n      docText:\n        'Replaced with special ClickHouse construction to convert results as time-series data with Milliseconds precision. Use it as `SELECT $timeSeriesMs...`. Require `Column:DateTime64` to be selected',\n    },\n    {\n      name: '$naturalTimeSeries',\n      def: '$naturalTimeSeries',\n      docText:\n        'Replaced with special ClickHouse construction to convert results as time-series data in logical/natural units. Use it as `SELECT $timeSeries...`. Require `Column:DateTime` or `Column:TimeStamp` to be selected',\n    },\n    {\n      name: '$rate',\n      def: '$rate(cols...)',\n      docText:\n        'Converts query results as `change rate per interval`. Can be used to display changes-per-second.' +\n        '\\n' +\n        'Example:\\n $rate(countIf(Type = 200) AS good, countIf(Type != 200) AS bad) FROM requests',\n    },\n    {\n      name: '$perSecond',\n      def: '$perSecond(cols...)',\n      docText:\n        'Similar to $rate macros for Counter-like type of metrics which are only grow. The macros will chose the max' +\n        'value for each column in every timeSlot and calculate the changes.' +\n        '\\n' +\n        'Example:\\n $perSecond(total_requests) FROM requests',\n    },\n    {\n      name: '$delta',\n      def: '$delta(cols...)',\n      docText:\n        'The macros will chose the max value for each column in every timeSlot and calculate the delta. Could have negative values' +\n        '\\n' +\n        'Example:\\n $delta(total_requests) FROM requests',\n    },\n    {\n      name: '$increase',\n      def: '$increase(cols...)',\n      docText:\n        'The macros will chose the max value for each column in every timeSlot and calculate the delta. Have only positive values' +\n        '\\n' +\n        'Example:\\n $increase(total_requests) FROM requests',\n    },\n    {\n      name: '$perSecondColumns',\n      def: '$perSecondColumns(key, value)',\n      docText:\n        'A combination of $perSecond and $columns' + '\\n' + 'Example:\\n $perSecondColumns(type, total) FROM requests',\n    },\n    {\n      name: '$perSecondColumnsAggregated(key, subkey, aggFunction1, value1, aggFunctionN, valueN) - if you need to calculate \\`perSecond\\` for higher cardinality dimension and then aggregate by lower cardinality dimension',\n      def: '$perSecondColumnsAggregated(key, subkey, aggFunction1, value1, aggFunctionN, valueN)',\n      docText:\n        'if you need to calculate `$perSecond` for higher cardinality dimension and then aggregate by lower cardinality dimension',\n    },\n    {\n      name: '$deltaColumns',\n      def: '$deltaColumns(key, value)',\n      docText: 'A combination of $delta and $columns' + '\\n' + 'Example:\\n $deltaColumns(type, total) FROM requests',\n    },\n    {\n      name: '$deltaColumnsAggregated',\n      def: '$deltaColumnsAggregated(key, subkey, aggFunction1, value1, aggFunctionN, valueN)',\n      docText: 'if you need to calculate `$delta` for higher cardinality dimension and then aggregate by lower cardinality dimension',\n    },\n    {\n      name: '$increaseColumns',\n      def: '$increaseColumns(key, value)',\n      docText:\n        'A combination of $increase and $columns' + '\\n' + 'Example:\\n $increaseColumns(type, total) FROM requests',\n    },\n    {\n      name: '$increaseColumnsAggregated',\n      def: '$increaseColumnsAggregated(key, subkey, aggFunction1, value1, ... aggFunctionN, valueN)',\n      docText:\n        'if you need to calculate `$increase` for higher cardinality dimension and then aggregate by lower cardinality dimension',\n    },\n    {\n      name: '$columns',\n      def: '$columns(key, value)',\n      docText:\n        'Query values as array of [key, value], where key will be used as label. Can be used to display multiple lines at graph' +\n        '\\n' +\n        'Example:\\n $columns(OSName, count(*) c) FROM requests',\n    },\n    {\n      name: '$columnsMs',\n      def: '$columnsMs(key, value)',\n      docText:\n        'Query values as array of [key, value], where key will be used as label. Can be used to display multiple lines at graph' +\n        '\\n' +\n        'Example:\\n $columnsMs(OSName, count(*) c) FROM requests',\n    },\n    {\n      name: '$rateColumns',\n      def: '$rateColumns(key, value)',\n      docText:\n        'A combination of `$columns` and `$rate` .' + '\\n' + 'Example:\\n $rateColumns(OS, count(*) c) FROM requests',\n    },\n    {\n      name: '$rateColumnsAggregated',\n      def: '$rateColumnsAggregated(key, subkey, aggFunction1, value1, aggFunctionN, valueN)',\n      docText:\n        'if you need calculate `$rate` for higher cardinality dimension and then aggregate by lower cardinality dimension',\n    },\n    {\n      name: '$unescape',\n      def: '$unescape($variable)',\n      docText:\n        'Unescapes variable value by removing single quotes' +\n        '\\n' +\n        'Example:\\n SELECT $unescape($column) FROM requests WHERE $unescape($column) = 5',\n    },\n    {\n      name: '$adhoc',\n      def: '$adhoc',\n      docText:\n        'Replaced with a rendered ad-hoc filter expression, or `1` if no ad-hoc filters exist' +\n        '\\n' +\n        'Example:\\n SELECT * FROM (select a, b from table2 WHERE $adhoc) ORDER BY a',\n    },\n    {\n      name: '$conditionalTest',\n      def: '$conditionalTest(SQL predicate,$variable)',\n      docText:\n        'Will add `SQL predicate` filter expression only if $variable have non empty value' +\n        '\\n' +\n        'Example:\\n' +\n        'SELECT $timeSeries as t, count() FROM $table WHERE $timeFilter\\n' +\n        '  $conditionalTest(AND toLowerCase(column) in ($var),$var)\\n' +\n        \"  $conditionalTest(AND toLowerCase(column2) like '%$text%',$text)\\n\" +\n        '  $conditionalTest(\\n' +\n        '    AND toLowerCase(column3) ilike ${text_with_single_quote:sqlstring},\\n' +\n        '    $text_with_single_quote\\n' +\n        '  )\\n' +\n        'GROUP BY t\\n' +\n        'ORDER BY t',\n    },\n  ];\n};\nexport { getMacrosAutocompletion };\n","import { useEffect, useState } from 'react';\n\nconst GET_DATABASES_QUERY =\n  'SELECT name FROM system.tables\\n' +\n  \"WHERE database='system' AND name IN (\\n\" +\n  \"'functions','table_engines','formats',\\n\" +\n  \"'table_functions','data_type_families','merge_tree_settings',\\n\" +\n  \"'settings','clusters','macros','storage_policies','aggregate_function_combinators',\\n\" +\n  \"'database','tables','dictionaries','columns'\\n\" +\n  ')';\n\nexport const useSystemDatabases = (datasource) => {\n  const [data, setData] = useState<null | any[]>(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const storageKey = `altinity_systemDatabases_${datasource.uid}`;\n      const cachedData = localStorage.getItem(storageKey);\n      const now = new Date();\n\n      if (cachedData) {\n        const { expiry, result } = JSON.parse(cachedData);\n        if (now.getTime() < expiry) {\n          setData(result);\n          return;\n        }\n      }\n\n      try {\n        const result = await datasource.metricFindQuery(GET_DATABASES_QUERY);\n        const expiry = now.getTime() + 10 * 60 * 1000;\n        localStorage.setItem(storageKey, JSON.stringify({ expiry, result: result.map((item) => item.text) }));\n        setData(result.map((item) => item.text));\n      } catch (error) {\n        setData([]);\n        console.error('Failed to fetch data:', error);\n      }\n    };\n\n    fetchData();\n  }, [datasource]);\n\n  return data;\n};\n","import { useEffect, useState } from 'react';\n\n// SQL query for autocompletion data\nconst AUTOCOMPLETION_QUERY = `\nSELECT DISTINCT arrayJoin(extractAll(name, '[\\\\\\\\w_]{2,}')) AS completion, color \nFROM (\n  SELECT name, 'identifier' AS color FROM system.functions \n  UNION ALL \n  SELECT name, 'keyword' AS color FROM system.table_engines \n  UNION ALL \n  SELECT name, 'keyword' AS color FROM system.formats \n  UNION ALL \n  SELECT name, 'identifier' AS color FROM system.table_functions \n  UNION ALL \n  SELECT name, 'identifier' AS color FROM system.data_type_families \n  UNION ALL \n  SELECT name, 'identifier' AS color FROM system.merge_tree_settings \n  UNION ALL \n  SELECT name, 'identifier' AS color FROM system.settings \n  UNION ALL \n  SELECT cluster, 'string' AS color FROM system.clusters \n  UNION ALL \n  SELECT macro, 'string' AS color FROM system.macros \n  UNION ALL \n  SELECT policy_name, 'string' AS color FROM system.storage_policies \n  UNION ALL \n  SELECT concat(func.name, comb.name), 'identifier' AS color FROM system.functions AS func \n  CROSS JOIN system.aggregate_function_combinators AS comb WHERE is_aggregate \n  UNION ALL \n  SELECT name, 'identifier' AS color FROM system.databases \n  UNION ALL \n  SELECT DISTINCT name, 'identifier' AS color FROM system.tables \n  UNION ALL \n  SELECT DISTINCT name, 'identifier' AS color FROM system.dictionaries \n  UNION ALL \n  SELECT DISTINCT name, 'identifier' AS color FROM system.columns\n) WHERE notEmpty(completion) LIMIT 10000\n`;\n\nexport const useAutocompleteData = (datasource) => {\n  const [data, setData] = useState<null | any[]>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const storageKey = `altinity_autocomplete_${datasource.uid}`;\n      const cachedData = localStorage.getItem(storageKey);\n      const now = new Date();\n\n      if (cachedData) {\n        const { expiry, result } = JSON.parse(cachedData);\n        if (now.getTime() < expiry) {\n          setData(result);\n          return;\n        }\n      }\n\n      try {\n        const result = await datasource.metricFindQuery(AUTOCOMPLETION_QUERY);\n        const expiry = now.getTime() + 10 * 60 * 1000; // 10 minutes in milliseconds\n\n        const groupByColor = (data) => {\n          const groupedData = {};\n          data.forEach((item) => {\n            const color = item.color;\n            if (!groupedData[color]) {\n              groupedData[color] = [];\n            }\n            groupedData[color].push(item.completion);\n          });\n          return groupedData;\n        };\n\n        const groupedResult = groupByColor(result);\n        localStorage.setItem(storageKey, JSON.stringify({ expiry, result: groupedResult }));\n\n        // @ts-ignore\n        setData(groupedResult);\n      } catch (error) {\n        setData([]);\n        console.error('Failed to fetch autocomplete data:', error);\n      }\n    };\n\n    fetchData();\n  }, [datasource]);\n\n  return data;\n};\n","import { TimestampFormat } from '../types/types';\n\nexport const defaultQuery = 'SELECT $timeSeries as t, count() FROM $table WHERE $timeFilter GROUP BY t ORDER BY t';\nexport const DEFAULT_FORMAT = 'time_series';\nexport const DEFAULT_DATE_TIME_TYPE = TimestampFormat.DateTime;\nexport const DEFAULT_ROUND = '0s';\nexport const DEFAULT_INTERVAL_FACTOR = 1;\n\nexport const MONACO_EDITOR_OPTIONS: any = {\n  scrollBeyondLastLine: false,\n  wordWrap: 'on',\n  wrappingStrategy: 'advanced',\n  scrollbar: {\n    alwaysConsumeMouseWheel: false,\n  },\n  minimap: {\n    enabled: false,\n  },\n  overviewRulerLanes: 0,\n};\n","import React, { useEffect, useState } from 'react';\nimport { initiateEditor, LANGUAGE_ID, THEME_NAME } from './editor/initiateEditor';\nimport { CodeEditor } from '@grafana/ui';\nimport { useSystemDatabases } from '../../hooks/useSystemDatabases';\nimport { useAutocompleteData } from '../../hooks/useAutocompletionData';\nimport { MONACO_EDITOR_OPTIONS } from '../../../constants';\n\nexport const SQLCodeEditor = ({ query, onSqlChange, onRunQuery, datasource }: any) => {\n  const [initialized, setInitialized] = useState(false);\n  const [updatedSQLQuery, setUpdatedSQLQuery] = useState(query.query);\n  const autocompletionData = useAutocompleteData(datasource);\n  const databasesData = useSystemDatabases(datasource);\n\n  useEffect(() => {\n    onSqlChange(updatedSQLQuery);\n    // eslint-disable-next-line\n  }, [updatedSQLQuery]);\n\n  useEffect(() => {\n    if (!autocompletionData || !databasesData || !initialized) {\n      return;\n    }\n\n    setInitialized(false);\n\n    // @ts-ignore\n    initiateEditor(\n      datasource.templateSrv.getVariables().map((item) => `${item.name}`),\n      // @ts-ignore\n      window.monaco,\n      autocompletionData,\n      databasesData\n    );\n    setTimeout(() => {\n      // @ts-ignore\n      window.monaco.editor.setTheme(THEME_NAME);\n    }, 20);\n  }, [autocompletionData, databasesData, initialized, datasource.templateSrv]);\n\n  return (\n    <div style={{ position: 'relative', width: '100%', marginTop: '10px' }}>\n      <CodeEditor\n        height={Math.max(updatedSQLQuery.split('\\n').length * 18, 150)}\n        value={updatedSQLQuery}\n        language={LANGUAGE_ID}\n        monacoOptions={MONACO_EDITOR_OPTIONS}\n        onBeforeEditorMount={() => setInitialized(true)}\n        onChange={setUpdatedSQLQuery}\n        onBlur={onRunQuery}\n      />\n    </div>\n  );\n};\n","import { IconButton } from '@grafana/ui';\nimport React, { useState } from 'react';\n\nexport const FormattedSQL = ({ sql, showFormattedSQL }: { sql: any; showFormattedSQL: boolean }) => {\n  const [copyMessage, setCopyMessage] = useState('');\n  const [isFading, setIsFading] = useState(false);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(sql).then(() => {\n      setCopyMessage('Copied!');\n      setIsFading(false); // Ensure message is fully visible before fading starts\n      setTimeout(() => setIsFading(true), 500); // Start fading after 1 second\n      setTimeout(() => setCopyMessage(''), 1500); // Remove message after 2 seconds\n    });\n  };\n\n  return showFormattedSQL ? (\n    <div style={{ width: '100%' }}>\n      <h4 style={{ marginBottom: '10px' }}>Reformatted Query</h4>\n      <div style={{ position: 'relative' }}>\n        <pre\n          style={{\n            position: 'relative',\n            // padding: '10px',\n          }}\n        >\n          {sql}\n          <div\n            style={{\n              position: 'absolute',\n              top: '10px',\n              right: '10px',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '10px',\n            }}\n          >\n            {copyMessage && (\n              <span\n                style={{\n                  margin: 0,\n                  color: 'rgb(108, 207, 142)',\n                  opacity: isFading ? 0 : 1,\n                  transition: 'opacity 1s ease',\n                }}\n              >\n                {copyMessage}\n              </span>\n            )}\n            <IconButton\n              aria-label=\"copy-formatted-data-to-clipboard\"\n              name=\"copy\"\n              size=\"lg\"\n              variant=\"primary\"\n              onClick={handleCopy}\n              disabled={!!copyMessage}\n            />\n          </div>\n        </pre>\n      </div>\n    </div>\n  ) : null;\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  InlineField,\n  InlineFieldRow,\n  InlineLabel,\n  InlineSwitch,\n  Input,\n  Select,\n  TagsInput,\n  ToolbarButton,\n} from '@grafana/ui';\nimport QueryMacrosInfo from './QueryMacrosInfo';\nimport { SQLCodeEditor } from './SQLCodeEditor';\nimport Scanner from '../../../../datasource/scanner/scanner';\nimport {FormattedSQL} from \"./FormattedSQL\";\n\nconst RESOLUTION_OPTIONS = [\n  { value: 1, label: '1/1' },\n  { value: 2, label: '1/2' },\n  { value: 3, label: '1/3' },\n  { value: 4, label: '1/4' },\n  { value: 5, label: '1/5' },\n  { value: 10, label: '1/10' },\n];\n\nconst FORMAT_OPTIONS = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Logs', value: 'logs' },\n  { label: 'Traces', value: 'traces' },\n  { label: 'Flame Graph', value: 'flamegraph' },\n];\n\nexport const QueryTextEditor = ({\n  query,\n  onSqlChange,\n  onFieldChange,\n  formattedData,\n  onRunQuery,\n  datasource,\n  isAnnotationView,\n  adhocFilters,\n  areAdHocFiltersAvailable,\n}: any) => {\n  const [sqlFormattedData, setSqlFormattedData] = useState(formattedData);\n\n  useEffect(() => {\n    const scanner = new Scanner(formattedData);\n    // removed scanner.Format as it contains bugs inherited from v2\n    setSqlFormattedData(scanner.raw());\n  }, [formattedData]);\n\n  const handleStepChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    onFieldChange({ fieldName: 'interval', value: value });\n  };\n\n  const handleResolutionChange = (value: number) => {\n    onFieldChange({ fieldName: 'intervalFactor', value: value });\n  };\n\n  const handleRoundChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    onFieldChange({ fieldName: 'round', value: value });\n  };\n\n  const handleFormatChange = (value: string | undefined) => {\n    onFieldChange({ fieldName: 'format', value: value });\n  };\n\n  const handleContextWindowChange = (value: string | undefined) => {\n    onFieldChange({ fieldName: 'contextWindowSize', value: value });\n  };\n\n  const handleToggleField = (fieldName: string) => {\n    onFieldChange({ fieldName: fieldName, value: !query[fieldName] });\n  };\n\n  return (\n    <>\n      <SQLCodeEditor datasource={datasource} onSqlChange={onSqlChange} query={query} onRunQuery={onRunQuery} />\n      {!areAdHocFiltersAvailable && adhocFilters.length > 0 && (\n        <TagsInput\n          className={'adhoc-filters-tags'}\n          tags={adhocFilters.map((filter: any, index: number) => `${filter.key} ${filter.operator} ${filter.value}`)}\n          onChange={(tagsList) => {\n            onFieldChange({\n              fieldName: 'adHocFilters',\n              value: tagsList.map((item: string) => {\n                const [key, operator, value] = item.split(' ');\n\n                return { key, operator, value };\n              }),\n            });\n          }}\n        />\n      )}\n      <div className=\"gf-form\" style={{ display: 'flex', flexDirection: 'column', marginTop: '10px' }}>\n        <InlineFieldRow>\n          <InlineField\n            label={\n              <InlineLabel\n                width={18}\n                tooltip=\"Turn on if you don't like when last data point in time series much lower then previous\"\n              >\n                Extrapolation\n              </InlineLabel>\n            }\n          >\n            <InlineSwitch\n              transparent\n              data-testid=\"extrapolate-switch\"\n              value={query.extrapolate}\n              onChange={() => handleToggleField('extrapolate')}\n            />\n          </InlineField>\n          <InlineField\n            label={\n              <InlineLabel width={10} tooltip=\"Leave blank for auto handling based on time range and panel width\">\n                Step\n              </InlineLabel>\n            }\n          >\n            <Input placeholder=\"\" onChange={handleStepChange} data-testid=\"interval-input\" value={query.interval} />\n          </InlineField>\n          <InlineField label={<InlineLabel width={'auto'}>Resolution</InlineLabel>}>\n            <Select\n              width={'auto'}\n              data-testid=\"resolution-select\"\n              onChange={(e) => handleResolutionChange(Number(e.value))}\n              options={RESOLUTION_OPTIONS}\n              value={query.intervalFactor}\n            />\n          </InlineField>\n          <InlineField\n            label={\n              <InlineLabel width={10} tooltip=\"Set rounding for $from and $to timestamps...\">\n                Round\n              </InlineLabel>\n            }\n          >\n            <Input data-testid=\"round-input\" placeholder=\"\" onChange={handleRoundChange} value={query.round} />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField\n            label={\n              <InlineLabel width={18} tooltip=\"Add /* $__dashboard $__user */ to query\">\n                Add metadata\n              </InlineLabel>\n            }\n            style={{ height: '100%' }}\n          >\n            <InlineSwitch\n              data-testid=\"metadata-switch\"\n              width=\"auto\"\n              value={query.add_metadata}\n              onChange={() => handleToggleField('add_metadata')}\n              transparent\n            />\n          </InlineField>\n          <InlineField\n            label={\n              <InlineLabel width={18} tooltip=\"Turn off if you would like pass comments in SQL query to server\">\n                Skip Comments\n              </InlineLabel>\n            }\n            style={{ height: '100%' }}\n          >\n            <InlineSwitch\n              data-testid=\"skip-comments-switch\"\n              width=\"auto\"\n              value={query.skip_comments}\n              onChange={() => handleToggleField('skip_comments')}\n              transparent\n            />\n          </InlineField>\n          <InlineField\n            label={\n              <InlineLabel width={23} tooltip=\"Turn off if you would like use `runnindDifference` and `neighbor` functions for macros\">\n                Use window functions\n              </InlineLabel>\n            }\n            style={{ height: '100%' }}\n          >\n            <InlineSwitch\n              data-testid=\"use-window-func-for-macros\"\n              width=\"auto\"\n              value={query.useWindowFuncForMacros}\n              onChange={() => handleToggleField('useWindowFuncForMacros')}\n              transparent\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          {!isAnnotationView && (\n            <InlineField label={<InlineLabel width={'auto'}>Format As</InlineLabel>}>\n              <Select\n                width={'auto'}\n                data-testid=\"format-as-select\"\n                onChange={(e) => handleFormatChange(e.value)}\n                options={FORMAT_OPTIONS}\n                value={query.format}\n              />\n            </InlineField>\n          )}\n          {query.format === 'logs' && (\n            <InlineField label={<InlineLabel width={'auto'}>Context window</InlineLabel>}>\n              <Select\n                width={'auto'}\n                data-testid=\"context-window-size-select\"\n                onChange={(e) => handleContextWindowChange(e.value)}\n                options={['10', '20', '50', '100'].map((value) => ({ label: value + ' entries', value }))}\n                value={query.contextWindowSize}\n              />\n            </InlineField>\n          )}\n          <InlineField>\n            <ToolbarButton variant={'primary'} onClick={() => handleToggleField('showHelp')} isOpen={query.showHelp}>\n              Show help\n            </ToolbarButton>\n          </InlineField>\n          <InlineField>\n            <ToolbarButton\n              variant={'primary'}\n              onClick={() => handleToggleField('showFormattedSQL')}\n              isOpen={query.showFormattedSQL}\n            >\n              Show generated SQL\n            </ToolbarButton>\n          </InlineField>\n        </InlineFieldRow>\n        <FormattedSQL sql={sqlFormattedData} showFormattedSQL={query.showFormattedSQL} />\n        {query.showHelp && <QueryMacrosInfo />}\n      </div>\n    </>\n  );\n};\n","import { InlineField, Select } from '@grafana/ui';\nimport React, { useEffect, useState } from 'react';\nimport { SelectableValue } from '@grafana/data';\n\ntype UniversalSelectFieldProps = {\n  value: string | undefined;\n  onChange: (value: SelectableValue<string>) => void;\n  options: Array<SelectableValue<string>>;\n  label?: React.JSX.Element;\n  placeholder?: string;\n  disabled?: boolean;\n  width?: number;\n  testId?: string;\n};\n\nexport const UniversalSelectField: React.FC<UniversalSelectFieldProps> = ({\n  value,\n  onChange,\n  options,\n  label,\n  placeholder,\n  disabled,\n  width,\n  testId,\n}) => {\n  const [customOptions, setCustomOptions] = useState<Array<SelectableValue<string>>>([]);\n\n  useEffect(() => {\n    // Check if initial value is not in options or customOptions\n    const isValueExist =\n      options.some((option) => option.value === value) || customOptions.some((option) => option.value === value);\n    if (!isValueExist) {\n      // If value not in options or customOptions, add it to customOptions\n      const customValue: SelectableValue<string> = {\n        value: value,\n        label: value,\n      };\n      setCustomOptions(\n        [...customOptions, customValue].filter((option) => option.label !== undefined && option.label.trim() !== '')\n      );\n    }\n  }, [value, options, customOptions]);\n\n  // Remove duplicates from options\n  const mergedOptions = [...options, ...customOptions];\n  const uniqueOptions = mergedOptions\n    .filter((option, index) => {\n      const firstIndex = mergedOptions.findIndex((opt) => opt.value === option.value);\n      return index === firstIndex;\n    })\n    .filter((option) => option.label !== undefined && option.label.trim() !== '');\n\n  return (\n    <InlineField label={label ? label : null}>\n      <Select\n        isClearable\n        allowCustomValue={true}\n        onCreateOption={(v) => {\n          const customValue: SelectableValue<string> = {\n            value: v,\n            label: v,\n          };\n          setCustomOptions(\n            [...customOptions, customValue].filter((option) => option.label !== undefined && option.label.trim() !== '')\n          );\n          onChange({ value: v.trim() });\n        }}\n        width={width}\n        value={value}\n        onChange={(changeEvent) => {\n          onChange({ value: changeEvent ? changeEvent.value : undefined });\n        }}\n        placeholder={placeholder}\n        options={uniqueOptions}\n        disabled={disabled}\n        data-testid={testId}\n      />\n    </InlineField>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { InlineField, InlineFieldRow, InlineLabel, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { UniversalSelectField } from './components/UniversalSelectComponent';\nimport { TimestampFormat } from '../../../../types/types';\nimport { useConnectionData } from './hooks/useConnectionData';\n\nconst options = [\n  { label: 'DateTime', value: TimestampFormat.DateTime },\n  { label: 'DateTime64', value: TimestampFormat.DateTime64 },\n  { label: 'TimeStamp', value: TimestampFormat.TimeStamp },\n  { label: 'Float', value: TimestampFormat.Float },\n  { label: 'TimeStamp64(3)', value: TimestampFormat.TimeStamp64_3 },\n  { label: 'TimeStamp64(6)', value: TimestampFormat.TimeStamp64_6 },\n  { label: 'TimeStamp64(9)', value: TimestampFormat.TimeStamp64_9 },\n];\n\n// eslint-disable-next-line\nexport const QueryBuilder = ({ query, onChange, datasource }: any) => {\n  const [\n    databases,\n    tables,\n    dateColumns,\n    timestampColumns,\n    selectedColumnTimestampType,\n    selectedColumnDateType,\n    setSelectedDatabase,\n    setSelectedTable,\n    setSelectedColumnTimestampType,\n    setSelectedColumnDateType,\n    setSelectedDateTimeType,\n    selectedTable,\n    selectedDatabase,\n    selectedDateTimeType,\n  ] = useConnectionData(query, datasource);\n\n  useEffect(() => {\n    setSelectedDatabase(query.database);\n    setSelectedTable(query.table);\n    setSelectedColumnTimestampType(query.dateTimeColDataType);\n    setSelectedColumnDateType(query.dateColDataType);\n    setSelectedDateTimeType(query.dateTimeType);\n  }, [\n    query.database,\n    query.dateColDataType,\n    query.dateTimeColDataType,\n    query.dateTimeType,\n    query.table,\n    setSelectedColumnDateType,\n    setSelectedColumnTimestampType,\n    setSelectedDatabase,\n    setSelectedDateTimeType,\n    setSelectedTable,\n  ]);\n\n  const onDateTimeTypeChanged = (dateTimeType: SelectableValue) => {\n    const value = dateTimeType?.value ? dateTimeType.value : undefined;\n    setSelectedDateTimeType(value);\n    onChange({ ...query, dateTimeType: value });\n  };\n\n  const onDatabaseChange = (database?: string) => {\n    setSelectedDatabase(database);\n    onChange({ ...query, database });\n  };\n\n  const onTableChange = (table?: string) => {\n    setSelectedTable(table);\n    onChange({ ...query, table });\n  };\n\n  const onDateColDataTypeChange = (dateColDataType?: string) => {\n    // @ts-ignore\n    setSelectedColumnDateType((dateColDataType || '').trim());\n    onChange({ ...query, dateColDataType });\n  };\n\n  const onDateTimeColDataTypeChange = (dateTimeColDataType?: string) => {\n    // @ts-ignore\n    setSelectedColumnTimestampType((dateTimeColDataType || '').trim());\n    onChange({ ...query, dateTimeColDataType });\n  };\n\n  return (\n    <div className=\"gf-form\" style={{ display: 'flex', flexDirection: 'column', marginTop: '10px' }}>\n      <InlineFieldRow>\n        <UniversalSelectField\n          width={24}\n          label={\n            <InlineLabel width={24}>\n              <span style={{ color: '#6e9fff' }}>FROM</span>\n            </InlineLabel>\n          }\n          placeholder=\"Database\"\n          value={selectedDatabase}\n          onChange={(item: SelectableValue<string>) => onDatabaseChange(item.value)}\n          options={databases}\n          testId={'database-select'}\n        />\n        <UniversalSelectField\n          width={24}\n          placeholder=\"Table\"\n          value={selectedTable}\n          onChange={(selectedItem: SelectableValue<string>) => onTableChange(selectedItem.value)}\n          options={tables}\n          disabled={true}\n          testId={'table-select'}\n        />\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField\n          label={\n            <InlineLabel\n              width={24}\n              tooltip={\n                <div style={{ width: '200px', backgroundColor: 'black' }}>\n                  Select Type &nbsp;\n                  <a\n                    href=\"https://clickhouse.com/docs/en/sql-reference/data-types/datetime/\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    DateTime\n                  </a>\n                  ,&nbsp;\n                  <a\n                    href=\"https://clickhouse.com/docs/en/sql-reference/data-types/datetime64/\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    DateTime64\n                  </a>\n                  &nbsp; or{' '}\n                  <a\n                    href=\"https://clickhouse.com/docs/en/sql-reference/data-types/int-uint/\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    UInt32\n                  </a>{' '}\n                  column for binding with Grafana range selector\n                </div>\n              }\n            >\n              Column timestamp type\n            </InlineLabel>\n          }\n        >\n          <Select\n            width={24}\n            onChange={onDateTimeTypeChanged}\n            isClearable\n            placeholder={'Timestamp type'}\n            options={options}\n            value={selectedDateTimeType}\n            data-testid={'timestamp-type-select'}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <UniversalSelectField\n          width={24}\n          label={<InlineLabel width={24}>Timestamp Column</InlineLabel>}\n          placeholder=\"Timestamp column\"\n          value={selectedColumnTimestampType}\n          onChange={({ value }) => onDateTimeColDataTypeChange(value as string)}\n          options={timestampColumns}\n          disabled={!timestampColumns.length}\n          testId={'timestamp-column-select'}\n        />\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <UniversalSelectField\n          label={\n            <InlineLabel\n              width={24}\n              tooltip={\n                <div style={{ width: '200px', backgroundColor: 'black' }}>\n                  Select\n                  <a\n                    rel=\"noreferrer\"\n                    href=\"https://clickhouse.tech/docs/en/sql-reference/data-types/date/\"\n                    target=\"_blank\"\n                  >\n                    Date\n                  </a>\n                  column for binding with Grafana range selector\n                </div>\n              }\n            >\n              Date column\n            </InlineLabel>\n          }\n          width={24}\n          placeholder=\"Date Column\"\n          value={selectedColumnDateType}\n          onChange={(selectedItem) => onDateColDataTypeChange(selectedItem.value)}\n          options={dateColumns}\n          testId={'date-column-select'}\n        />\n      </InlineFieldRow>\n    </div>\n  );\n};\n\nexport default QueryBuilder;\n","import { useCallback, useEffect, useState } from 'react';\nimport { TimestampFormat } from '../../../../../types/types';\n\nexport const useConnectionData = (query, datasource) => {\n  const [databases, setDatabases] = useState([]);\n  const [tables, setTables] = useState([]);\n  const [dateColumns, setdateColumns] = useState([]);\n  const [timestampColumns, setTimestampColumns] = useState([]);\n  let [selectedDatabase, setSelectedDatabase] = useState<string | undefined>(query.database);\n  let [selectedTable, setSelectedTable] = useState<string | undefined>(query.table);\n  let [selectedColumnTimestampType, setSelectedColumnTimestampType] = useState(query.dateTimeColDataType);\n  let [selectedColumnDateType, setSelectedColumnDateType] = useState(query.dateColDataType);\n  let [selectedDateTimeType, setSelectedDateTimeType] = useState(query.dateTimeType);\n\n  const buildExploreQuery = useCallback(\n    (type) => {\n      let query;\n      switch (type) {\n        case 'TABLES':\n          query =\n            'SELECT name ' + 'FROM system.tables ' + \"WHERE database = '\" + selectedDatabase + \"' \" + 'ORDER BY name';\n          break;\n        case 'DATE':\n          query =\n            'SELECT name ' +\n            'FROM system.columns ' +\n            \"WHERE database = '\" +\n            selectedDatabase +\n            \"' AND \" +\n            \"table = '\" +\n            selectedTable +\n            \"' AND \" +\n            \"type IN ('Date','Date32','Nullable(Date)','Nullable(Date32)') \" +\n            'ORDER BY name ' +\n            \"UNION ALL SELECT ' ' AS name\";\n          break;\n        case TimestampFormat.DateTime:\n          query =\n            'SELECT name ' +\n            'FROM system.columns ' +\n            \"WHERE database = '\" +\n            selectedDatabase +\n            \"' AND \" +\n            \"table = '\" +\n            selectedTable +\n            \"' AND \" +\n            \"(substring(type,1,8) = 'DateTime' OR substring(type,10,8) = 'DateTime') AND \" +\n            \"(substring(type,1,10) != 'DateTime64' OR substring(type,10,10) != 'DateTime64')\" +\n            'ORDER BY name';\n          break;\n        case TimestampFormat.DateTime64:\n          query =\n            'SELECT name ' +\n            'FROM system.columns ' +\n            \"WHERE database = '\" +\n            selectedDatabase +\n            \"' AND \" +\n            \"table = '\" +\n            selectedTable +\n            \"' AND \" +\n            \"(substring(type,1,10) = 'DateTime64' OR substring(type,10,10) = 'DateTime64')\" +\n            'ORDER BY name';\n          break;\n        case TimestampFormat.TimeStamp:\n          query =\n            'SELECT name ' +\n            'FROM system.columns ' +\n            \"WHERE database = '\" +\n            selectedDatabase +\n            \"' AND \" +\n            \"table = '\" +\n            selectedTable +\n            \"' AND \" +\n            \"type = 'UInt32' \" +\n            'ORDER BY name';\n          break;\n        case TimestampFormat.TimeStamp64_3:\n        case TimestampFormat.TimeStamp64_6:\n        case TimestampFormat.TimeStamp64_9:\n          query =\n            'SELECT name ' +\n            'FROM system.columns ' +\n            \"WHERE database = '\" +\n            selectedDatabase +\n            \"' AND \" +\n            \"table = '\" +\n            selectedTable +\n            \"' AND \" +\n            \"type LIKE '%UInt64%'\" +\n            'ORDER BY name';\n          break;\n        case TimestampFormat.Float:\n          query =\n            'SELECT name ' +\n            'FROM system.columns ' +\n            \"WHERE database = '\" +\n            selectedDatabase +\n            \"' AND \" +\n            \"table = '\" +\n            selectedTable +\n            \"' AND \" +\n            \"type LIKE '%Float%' OR type LIKE '%Decimal%' \" +\n            'ORDER BY name';\n          break;\n        case 'DATABASES':\n          query = 'SELECT name ' + 'FROM system.databases ' + 'ORDER BY name';\n          break;\n        case 'COLUMNS':\n          query =\n            'SELECT name text, type value ' +\n            'FROM system.columns ' +\n            \"WHERE database = '\" +\n            selectedDatabase +\n            \"' AND \" +\n            \"table = '\" +\n            selectedTable +\n            \"'\";\n          break;\n      }\n      return query;\n    },\n    [selectedTable, selectedDatabase]\n  );\n\n  const querySegment = useCallback(\n    (type: any) => {\n      let query = buildExploreQuery(type);\n      return datasource.metricFindQuery(query);\n    },\n    [buildExploreQuery, datasource]\n  );\n\n  useEffect(() => {\n    (async () => {\n      const databases = await querySegment('DATABASES');\n      setDatabases(databases.map((item: any) => ({ label: item.text, value: item.text })));\n    })();\n  }, [querySegment]);\n\n  useEffect(() => {\n    if (selectedDatabase) {\n      (async () => {\n        const tables = await querySegment('TABLES');\n        setTables(tables.map((item: any) => ({ label: item.text, value: item.text })));\n      })();\n    }\n  }, [selectedDatabase, querySegment]);\n\n  useEffect(() => {\n    if (!!selectedDatabase || !!selectedTable || !!selectedDateTimeType) {\n      (async () => {\n        const timestampColumns = await querySegment(selectedDateTimeType);\n        setTimestampColumns(timestampColumns.map((item: any) => ({ label: item.text, value: item.text })));\n      })();\n    }\n  }, [selectedTable, selectedDatabase, selectedDateTimeType, querySegment]);\n\n  useEffect(() => {\n    if (!!selectedDatabase || !!selectedTable) {\n      (async () => {\n        const dateColumns = await querySegment('DATE');\n        setdateColumns(dateColumns.map((item: any) => ({ label: item.text, value: item.text })));\n      })();\n    }\n  }, [selectedTable, selectedDatabase, querySegment]);\n\n  return [\n    databases,\n    tables,\n    dateColumns,\n    timestampColumns,\n    selectedColumnTimestampType,\n    selectedColumnDateType,\n    setSelectedDatabase,\n    setSelectedTable,\n    setSelectedColumnTimestampType,\n    setSelectedColumnDateType,\n    setSelectedDateTimeType,\n    selectedTable,\n    selectedDatabase,\n    selectedDateTimeType,\n  ];\n};\n","import { useEffect, useState } from 'react';\nimport { EditorMode } from '../../../types/types';\nimport {\n  DEFAULT_DATE_TIME_TYPE,\n  DEFAULT_FORMAT,\n  DEFAULT_INTERVAL_FACTOR,\n  DEFAULT_ROUND,\n  defaultQuery,\n} from '../../constants';\n\nexport const useQueryState = (query, onChange, datasource) => {\n  const [datasourceName] = useState(datasource.name);\n  const [datasourceUid] = useState(datasource.uid);\n  const [refId] = useState(query.refId);\n\n  useEffect(() => {\n    const accessKey = `dataStorage_${datasourceName}_${datasourceUid}_${refId}`;\n    // On component mount\n    const storedData = localStorage.getItem(accessKey);\n    if (storedData) {\n      const { name, timestamp } = JSON.parse(storedData);\n      const currentTime = new Date().getTime();\n      const timeDifference = (currentTime - timestamp) / 1000; // Convert milliseconds to seconds\n\n      if (timeDifference < 5) {\n        if (name !== accessKey) {\n          const initialQuery = {\n            ...query,\n            format: DEFAULT_FORMAT,\n            extrapolate: true,\n            skip_comments: true,\n            add_metadata: true,\n            dateTimeType: DEFAULT_DATE_TIME_TYPE,\n            round: DEFAULT_ROUND,\n            intervalFactor: DEFAULT_INTERVAL_FACTOR,\n            interval: '',\n            query: defaultQuery,\n            formattedQuery: query.query,\n            editorMode: EditorMode.Builder,\n            database: undefined,\n            table: undefined,\n            dateColDataType: undefined,\n            dateTimeColDataType: undefined,\n          };\n\n          onChange(initialQuery);\n        }\n      }\n    }\n\n    // On component unmount\n    return () => {\n      const dataToStore = {\n        name: accessKey,\n        timestamp: new Date().getTime(),\n      };\n      localStorage.setItem(accessKey, JSON.stringify(dataToStore));\n    };\n    // eslint-disable-next-line\n  }, []);\n};\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js!./QueryEditor.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js!./QueryEditor.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { getTemplateSrv } from '@grafana/runtime';\nimport { AdHocVariableModel } from '@grafana/data';\n\nexport const getAdhocFilters = (datasourceName, datasourceUid: any) => {\n  const templateSrv = getTemplateSrv();\n  const adhocVariables: any[] = templateSrv\n    .getVariables()\n    .filter((variable) => variable.type === 'adhoc') as AdHocVariableModel[];\n  let filters: AdHocVariableModel[] = [];\n  // ts-ignore\n  for (const variable of adhocVariables) {\n    const variableUid = variable.datasource?.uid;\n\n    if (variableUid === datasourceUid) {\n      filters = filters.concat(variable.filters);\n    }\n  }\n\n  return filters;\n};\n","import React, { useEffect, useState } from 'react';\nimport { QueryEditorProps } from '@grafana/data';\nimport { CHDataSource } from '../../datasource/datasource';\nimport { CHDataSourceOptions, CHQuery, EditorMode } from '../../types/types';\nimport { QueryHeader } from './components/QueryHeader/QueryHeader';\nimport { QueryTextEditor } from './components/QueryTextEditor/QueryTextEditor';\nimport { QueryBuilder } from './components/QueryBuilder/QueryBuilder';\nimport { Alert } from '@grafana/ui';\nimport { useQueryState } from './hooks/useQueryState';\nimport { useFormattedData } from './hooks/useFormattedData';\nimport { initializeQueryDefaults } from './helpers/initializeQueryDefaults';\nimport './QueryEditor.css';\nimport { getAdhocFilters } from './helpers/getAdHocFilters';\n\nexport function QueryEditor(props: QueryEditorProps<CHDataSource, CHQuery, CHDataSourceOptions>) {\n  const { datasource, query, onChange, onRunQuery } = props;\n  const isAnnotationView = !props.app;\n  const initializedQuery = initializeQueryDefaults(query, isAnnotationView, datasource, onChange);\n  const [formattedData, error] = useFormattedData(initializedQuery, datasource);\n  const [editorMode, setEditorMode] = useState(initializedQuery.editorMode || EditorMode.Builder);\n  useQueryState(query, onChange, datasource);\n\n  const onSqlChange = (sql: string) => onChange({ ...initializedQuery, query: sql });\n  const onFieldChange = (field: any) => onChange({ ...initializedQuery, [field.fieldName]: field.value });\n  const onTriggerQuery = () => onRunQuery();\n\n  // @ts-ignore\n  const adHocFilters = getAdhocFilters(datasource?.name, query.datasource?.uid);\n  // @ts-ignore\n  const adHocFiltersKey = adHocFilters.map(({ key, operator, value }) => `${key}${operator}${value}`).join(',');\n  const areAdHocFiltersAvailable = !!adHocFilters.length;\n\n  useEffect(() => {\n    if (props.app !== 'explore') {\n      onChange({ ...initializedQuery, adHocFilters: adHocFilters });\n    }\n\n    // eslint-disable-next-line\n  }, [props.app, adHocFiltersKey]);\n\n  return (\n    <>\n      <QueryHeader\n        query={initializedQuery}\n        datasource={datasource}\n        editorMode={editorMode}\n        setEditorMode={setEditorMode}\n        isAnnotationView={isAnnotationView}\n        onTriggerQuery={onTriggerQuery}\n        onChange={onChange}\n      />\n      {error ? <Alert title={error} elevated style={{ marginTop: '5px', marginBottom: '5px' }} /> : null}\n      {editorMode === EditorMode.Builder && (\n        <QueryBuilder\n          query={initializedQuery}\n          datasource={datasource}\n          onChange={(items: CHQuery) => onChange({ ...items })}\n          onRunQuery={onTriggerQuery}\n        />\n      )}\n      {editorMode === EditorMode.SQL && (\n        <QueryTextEditor\n          adhocFilters={initializedQuery.adHocFilters}\n          areAdHocFiltersAvailable={areAdHocFiltersAvailable}\n          query={initializedQuery}\n          onSqlChange={onSqlChange}\n          onRunQuery={onTriggerQuery}\n          onFieldChange={onFieldChange}\n          formattedData={formattedData}\n          datasource={datasource}\n          isAnnotationView={isAnnotationView}\n        />\n      )}\n    </>\n  );\n}\n","import { CHQuery, EditorMode, TimestampFormat } from '../../../types/types';\nimport { DEFAULT_FORMAT, DEFAULT_INTERVAL_FACTOR, DEFAULT_ROUND, defaultQuery } from '../../constants';\n\nexport const initializeQueryDefaults = (\n  query: CHQuery,\n  isAnnotationView: boolean,\n  datasource: any,\n  onChange: any\n): CHQuery => {\n  const initializedQuery = {\n    ...query,\n    format: query.format || DEFAULT_FORMAT,\n    extrapolate: query.extrapolate ?? true,\n    skip_comments: query.skip_comments ?? true,\n    add_metadata: query.add_metadata ?? true,\n    useWindowFuncForMacros: query.useWindowFuncForMacros ?? true,\n    dateTimeType: query.dateTimeType,\n    round: query.round || DEFAULT_ROUND,\n    intervalFactor: query.intervalFactor || DEFAULT_INTERVAL_FACTOR,\n    interval: query.interval || '',\n    adHocFilters: query.adHocFilters || [],\n    query: query.query || defaultQuery,\n    formattedQuery: query.formattedQuery || query.query,\n    editorMode: query.database && query.table ? EditorMode.SQL : EditorMode.Builder,\n    contextWindowSize: query.contextWindowSize || '10',\n    adHocValuesQuery: query.adHocValuesQuery || '',\n  };\n\n  if (datasource.defaultValues && !query.initialized) {\n    if (datasource.defaultValues.defaultDateTimeType && !initializedQuery.dateTimeType) {\n      initializedQuery.dateTimeType = datasource.defaultValues.defaultDateTimeType;\n    }\n\n    if (\n      datasource.defaultValues.dateTime.defaultDateTime &&\n      initializedQuery.dateTimeType === TimestampFormat.DateTime &&\n      !initializedQuery.dateTimeColDataType\n    ) {\n      initializedQuery.dateTimeColDataType = datasource.defaultValues.dateTime.defaultDateTime;\n    }\n\n    if (\n      datasource.defaultValues.dateTime.defaultDateTime64 &&\n      initializedQuery.dateTimeType === TimestampFormat.DateTime64 &&\n      !initializedQuery.dateTimeColDataType\n    ) {\n      initializedQuery.dateTimeColDataType = datasource.defaultValues.dateTime.defaultDateTime64;\n    }\n\n    if (datasource.defaultValues.dateTime.defaultDateDate32 && !initializedQuery.dateColDataType) {\n      initializedQuery.dateColDataType = datasource.defaultValues.dateTime.defaultDateDate32;\n    }\n\n    if (\n      datasource.defaultValues.dateTime.defaultUint32 &&\n      initializedQuery.dateTimeType === TimestampFormat.TimeStamp &&\n      !initializedQuery.dateTimeColDataType\n    ) {\n      initializedQuery.dateTimeColDataType = datasource.defaultValues.dateTime.defaultUint32;\n    }\n\n    if (\n      datasource.defaultValues.dateTime.defaultFloat &&\n      initializedQuery.dateTimeType === TimestampFormat.Float &&\n      !initializedQuery.dateTimeColDataType\n    ) {\n      initializedQuery.dateTimeColDataType = datasource.defaultValues.dateTime.defaultFloat;\n    }\n\n    if (\n      datasource.defaultValues.dateTime.defaultTimeStamp64_3 &&\n      initializedQuery.dateTimeType === TimestampFormat.TimeStamp64_3 &&\n      !initializedQuery.dateTimeColDataType\n    ) {\n      initializedQuery.dateTimeColDataType = datasource.defaultValues.dateTime.defaultTimeStamp64_3;\n    }\n\n    if (\n      datasource.defaultValues.dateTime.defaultTimeStamp64_6 &&\n      initializedQuery.dateTimeType === TimestampFormat.TimeStamp64_6 &&\n      !initializedQuery.dateTimeColDataType\n    ) {\n      initializedQuery.dateTimeColDataType = datasource.defaultValues.dateTime.defaultTimeStamp64_6;\n    }\n\n    if (\n      datasource.defaultValues.dateTime.defaultTimeStamp64_9 &&\n      initializedQuery.dateTimeType === TimestampFormat.TimeStamp64_9 &&\n      !initializedQuery.dateTimeColDataType\n    ) {\n      initializedQuery.dateTimeColDataType = datasource.defaultValues.dateTime.defaultTimeStamp64_9;\n    }\n\n    if (datasource.defaultValues.contextWindowSize && !query.contextWindowSize) {\n      initializedQuery.contextWindowSize = datasource.defaultValues.contextWindowSize;\n    }\n\n    onChange({ ...query, ...initializedQuery, initialized: true });\n  }\n\n  if (isAnnotationView) {\n    initializedQuery.format = 'ANNOTATION';\n  }\n\n  return initializedQuery;\n};\n","import { CHQuery } from '../../../types/types';\nimport { CHDataSource } from '../../../datasource/datasource';\nimport { useSystemDatabases } from './useSystemDatabases';\nimport { useAutocompleteData } from './useAutocompletionData';\nimport { useEffect, useState } from 'react';\nimport SqlQuery from '../../../datasource/sql-query/sql_query';\n\nexport const useFormattedData = (query: CHQuery, datasource: CHDataSource): [string, string | null] => {\n  useSystemDatabases(datasource);\n  useAutocompleteData(datasource);\n  const [formattedData, setFormattedData] = useState(query.query);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    try {\n      if (datasource.options && datasource.templateSrv) {\n        const queryModel = new SqlQuery(query, datasource.templateSrv, datasource.options);\n        const replaced = queryModel.replace(datasource.options, query.adHocFilters);\n        setFormattedData(replaced);\n        setError(null);\n      }\n    } catch (e: any) {\n      setError(e?.message);\n    }\n  }, [query, datasource.name, datasource.options, datasource.templateSrv]);\n\n  return [formattedData, error];\n};\n","import _, { curry, each } from 'lodash';\nimport SqlSeries from './sql-series/sql_series';\nimport SqlQuery from './sql-query/sql_query';\nimport ResponseParser from './response_parser';\nimport AdHocFilter from './adhoc';\nimport Scanner from './scanner/scanner';\n\nimport {\n  AnnotationEvent,\n  DataQueryRequest,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceWithLogsContextSupport,\n  DataSourceWithToggleableQueryFiltersSupport,\n  LogRowContextOptions,\n  LogRowContextQueryDirection,\n  LogRowModel,\n  QueryFilterOptions,\n  TypedVariableModel,\n} from '@grafana/data';\nimport { BackendSrv, getBackendSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { CHDataSourceOptions, CHQuery, DEFAULT_QUERY } from '../types/types';\nimport { SqlQueryHelper } from './sql-query/sql-query-helper';\nimport SqlQueryMacros from './sql-query/sql-query-macros';\nimport { QueryEditor } from '../views/QueryEditor/QueryEditor';\nimport { getAdhocFilters } from '../views/QueryEditor/helpers/getAdHocFilters';\n\nconst adhocFilterVariable = 'adhoc_query_filter';\nexport class CHDataSource\n  extends DataSourceApi<CHQuery, CHDataSourceOptions>\n  implements DataSourceWithLogsContextSupport<CHQuery>, DataSourceWithToggleableQueryFiltersSupport<CHQuery>\n{\n  backendSrv: BackendSrv;\n  templateSrv: TemplateSrv;\n  adHocFilter: AdHocFilter;\n  responseParser: ResponseParser;\n  options: any;\n\n  url: string;\n  basicAuth: any;\n  withCredentials: any;\n  usePOST: boolean;\n  defaultDatabase: string;\n  addCorsHeader: boolean;\n  xHeaderUser: string;\n  xClickHouseSSLCertificateAuth: boolean;\n  defaultValues: any;\n  useYandexCloudAuthorization: boolean;\n  useCompression: boolean;\n  compressionType: string;\n  adHocValuesQuery: string;\n  adHocHideTableNames: boolean;\n  uid: string;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<CHDataSourceOptions>) {\n    super(instanceSettings);\n    this.uid = instanceSettings.uid;\n    this.url = instanceSettings.url!;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.addCorsHeader = instanceSettings.jsonData.addCorsHeader || false;\n    this.usePOST = instanceSettings.jsonData.usePOST || false;\n    this.useCompression = instanceSettings.jsonData.useCompression || false;\n    this.adHocValuesQuery = instanceSettings.jsonData.adHocValuesQuery || '';\n    this.adHocHideTableNames = instanceSettings.jsonData.adHocHideTableNames || false;\n    this.compressionType = instanceSettings.jsonData.compressionType || '';\n    this.defaultDatabase = instanceSettings.jsonData.defaultDatabase || '';\n    this.xHeaderUser = instanceSettings.jsonData.xHeaderUser || '';\n    this.xClickHouseSSLCertificateAuth = instanceSettings.jsonData.xClickHouseSSLCertificateAuth || false;\n    this.useYandexCloudAuthorization = instanceSettings.jsonData.useYandexCloudAuthorization || false;\n    if (instanceSettings.jsonData.useDefaultConfiguration) {\n      this.defaultValues = {\n        dateTime: {\n          defaultDateTime64: instanceSettings.jsonData.defaultDateTime64,\n          defaultDateTime: instanceSettings.jsonData.defaultDateTime,\n          defaultUint32: instanceSettings.jsonData.defaultUint32,\n          defaultDateDate32: instanceSettings.jsonData.defaultDateDate32,\n          defaultFloat: instanceSettings.jsonData.defaultFloat,\n          defaultTimeStamp64_3: instanceSettings.jsonData.defaultTimeStamp64_3,\n          defaultTimeStamp64_6: instanceSettings.jsonData.defaultTimeStamp64_6,\n          defaultTimeStamp64_9: instanceSettings.jsonData.defaultTimeStamp64_9,\n        },\n        defaultDateTimeType: instanceSettings.jsonData.defaultDateTimeType,\n        contextWindowSize: instanceSettings.jsonData.contextWindowSize,\n      };\n    }\n\n    this.backendSrv = getBackendSrv();\n    this.templateSrv = getTemplateSrv();\n    this.adHocFilter = new AdHocFilter(this);\n    this.responseParser = new ResponseParser();\n    this.annotations = {\n      QueryEditor: QueryEditor,\n    };\n  }\n\n  static _getRequestOptions(query: string, usePOST?: boolean, requestId?: string, options?: any) {\n    let requestOptions: any = {\n      url: options.url,\n      requestId: requestId,\n    };\n    let params: string[] = [];\n\n    if (usePOST) {\n      requestOptions.method = 'POST';\n      requestOptions.data = query;\n    } else {\n      requestOptions.method = 'GET';\n      params.push('query=' + encodeURIComponent(query));\n    }\n\n    if (options.defaultDatabase) {\n      params.push('database=' + options.defaultDatabase);\n    }\n\n    if (options.basicAuth || options.withCredentials) {\n      requestOptions.withCredentials = true;\n    }\n\n    requestOptions.headers = options.headers || {};\n    if (options.basicAuth) {\n      requestOptions.headers.Authorization = options.basicAuth;\n    }\n\n    if (options.useCompression) {\n      requestOptions.headers['Accept-Encoding'] = options.compressionType;\n      params.push('enable_http_compression=1');\n    }\n\n    if (options.useYandexCloudAuthorization) {\n      requestOptions.headers['X-ClickHouse-User'] = options.xHeaderUser;\n      // look to routes in plugin.json\n      if (options.xClickHouseSSLCertificateAuth) {\n        requestOptions.headers['X-ClickHouse-SSL-Certificate-Auth'] = 'on';\n        if (requestOptions.url.indexOf('/?') === -1) {\n          requestOptions.url += '/xClickHouseSSLCertificateAuth';\n        } else {\n          requestOptions.url.replace('/?', '/xClickHouseSSLCertificateAuth/?');\n        }\n      } else {\n        if (requestOptions.url.indexOf('/?') === -1) {\n          requestOptions.url += '/xHeaderKey';\n        } else {\n          requestOptions.url.replace('/?', '/xHeaderKey/?');\n        }\n      }\n    }\n\n    if (options.addCorsHeader) {\n      params.push('add_http_cors_header=1');\n    }\n\n    if (params.length) {\n      requestOptions.url += (requestOptions.url.indexOf('?') !== -1 ? '&' : '/?') + params.join('&');\n    }\n\n    return requestOptions;\n  }\n\n  _request(query: string, requestId?: string) {\n    const queryParams = CHDataSource._getRequestOptions(query, this.usePOST, requestId, this);\n\n    const dataRequest = new Promise((resolve, reject) => {\n      this.backendSrv.fetch(queryParams).subscribe(\n        (response) => {\n          if (response && response?.data) {\n            resolve(response.data);\n          } else {\n            resolve(null);\n          }\n        },\n        (e) => {\n          reject(e);\n        }\n      );\n    });\n\n    return dataRequest;\n  }\n\n  async getLogRowContext(\n    row: LogRowModel,\n    options?: LogRowContextOptions | undefined,\n    query?: CHQuery | undefined\n  ): Promise<{ data: any[] }> {\n    let traceId;\n    const requestOptions = { ...options, range: this.options.range };\n\n    const originalQuery = this.createQuery(requestOptions, query);\n    let scanner = new Scanner(originalQuery.stmt.replace(/\\r\\n|\\r|\\n/g, ' '));\n    let { select } = scanner.toAST();\n\n    const generateQueryForTraceID = (traceId, select) => {\n      return `SELECT ${select.join(',')} FROM $table WHERE $timeFilter AND trace_id=${traceId}`;\n    };\n\n    const generateQueryForTimestampBackward = (inputTimestampColumn, inputTimestampValue, contextWindowSize) => {\n      return `SELECT timestamp FROM (\n          SELECT\n            ${inputTimestampColumn},\n            FIRST_VALUE(${inputTimestampColumn}) OVER (ORDER BY ${inputTimestampColumn} ROWS BETWEEN ${\n        contextWindowSize || 10\n      } PRECEDING AND CURRENT ROW) AS timestamp\n          FROM $table\n          ORDER BY ${inputTimestampColumn}\n        ) WHERE ${inputTimestampColumn} = ${inputTimestampValue}`;\n    };\n\n    const generateQueryForTimestampForward = (inputTimestampColumn, inputTimestampValue, contextWindowSize) => {\n      return `SELECT timestamp FROM (\n          SELECT\n            ${inputTimestampColumn},\n            LAST_VALUE(${inputTimestampColumn}) OVER (ORDER BY ${inputTimestampColumn} ROWS BETWEEN CURRENT ROW AND ${\n        contextWindowSize || 10\n      } FOLLOWING) AS timestamp\n          FROM $table\n          ORDER BY ${inputTimestampColumn}\n        ) WHERE ${inputTimestampColumn} = ${inputTimestampValue}`;\n    };\n\n    const generateRequestForTimestampForward = (timestampField, timestamp, currentRowTimestamp, select) => {\n      return `SELECT ${select.join(\n        ','\n      )} FROM $table WHERE ${timestampField} <'${timestamp}' AND ${timestampField} > '${currentRowTimestamp}'`;\n    };\n\n    const generateRequestForTimestampBackward = (timestampField, timestamp, currentRowTimestamp, select) => {\n      return `SELECT ${select.join(\n        ','\n      )} FROM $table WHERE ${timestampField} > '${timestamp}' AND ${timestampField} < '${currentRowTimestamp}'`;\n    };\n\n    if (traceId) {\n      const queryForTraceID = generateQueryForTraceID(traceId, select);\n      const { stmt, requestId } = this.createQuery(requestOptions, { ...query, query: queryForTraceID });\n\n      const response: any = await this._seriesQuery(stmt, requestId + options?.direction);\n\n      if (response && !response.rows) {\n        return { data: [] };\n      } else if (!response) {\n        throw new Error('No response for traceId log context query');\n      }\n\n      let sqlSeries = new SqlSeries({\n        refId: 'FORWARD',\n        series: response.data,\n        meta: response.meta,\n      });\n\n      return { data: sqlSeries.toLogs() };\n    } else {\n      const timestampColumn = query?.dateTimeColDataType;\n\n      const getLogsTimeBoundaries = async () => {\n        let formattedDate = String(row.timeEpochMs);\n        if (formattedDate.length > 10) {\n          formattedDate = `toDateTime64(${row.timeEpochMs}/1000,3)`;\n        } else {\n          formattedDate = `'${row.timeUtc}'`;\n        }\n\n        const boundariesRequest =\n          options?.direction === LogRowContextQueryDirection.Backward\n            ? generateQueryForTimestampBackward(timestampColumn, formattedDate, query?.contextWindowSize)\n            : generateQueryForTimestampForward(timestampColumn, formattedDate, query?.contextWindowSize);\n\n        const { stmt, requestId } = this.createQuery(requestOptions, { ...query, query: boundariesRequest });\n\n        const result: any = await this._seriesQuery(stmt, requestId + options?.direction);\n\n        return result.data[0];\n      };\n\n      const { timestamp } = await getLogsTimeBoundaries();\n      const getLogContext = async () => {\n        const contextDataRequest =\n          options?.direction === LogRowContextQueryDirection.Backward\n            ? generateRequestForTimestampBackward(timestampColumn, timestamp, row.timeUtc, select)\n            : generateRequestForTimestampForward(timestampColumn, timestamp, row.timeUtc, select);\n\n        const { stmt, requestId } = this.createQuery(requestOptions, { ...query, query: contextDataRequest });\n\n        return this._seriesQuery(stmt, requestId + options?.direction);\n      };\n\n      const response: any = await getLogContext();\n\n      if (response && !response.rows) {\n        return { data: [] };\n      } else if (!response) {\n        throw new Error('No response for log context query');\n      }\n\n      let sqlSeries = new SqlSeries({\n        refId: options?.direction,\n        series: response.data,\n        meta: response.meta,\n      });\n\n      return { data: sqlSeries.toLogs() };\n    }\n  }\n\n  toggleQueryFilter(query: CHQuery, filter: any): any {\n    let filters = [...query.adHocFilters];\n    let isFilterAdded = query.adHocFilters.filter(\n      (f) => f.key === filter.options.key && f.value === filter.options.value\n    ).length;\n    if (filter.type === 'FILTER_FOR') {\n      if (isFilterAdded) {\n        filters = filters.filter(\n          (f) =>\n            f.key !== filter.options.key && f.value !== filter.options.value && f.operator !== filter.options.operator\n        );\n      } else {\n        filters.push({\n          value: filter.options.value,\n          key: filter.options.key,\n          operator: '=',\n        });\n      }\n    } else if (filter.type === 'FILTER_OUT') {\n      if (isFilterAdded) {\n        filters = filters.filter(\n          (f) =>\n            f.key !== filter.options.key && f.value !== filter.options.value && f.operator !== filter.options.operator\n        );\n      } else {\n        filters.push({\n          value: filter.options.value,\n          key: filter.options.key,\n          operator: '!=',\n        });\n      }\n    }\n\n    return {\n      ...query,\n      adHocFilters: filters,\n    };\n  }\n\n  queryHasFilter(query: CHQuery, filter: QueryFilterOptions): boolean {\n    return query.adHocFilters.some((f) => f.key === filter.key && f.value === filter.value);\n  }\n\n  query(options: DataQueryRequest<CHQuery>) {\n    this.options = options;\n    const targets = options.targets.filter((target) => !target.hide && target.query);\n    const queries = targets.map((target) => this.createQuery(options, target));\n    // No valid targets, return the empty result to save a round trip.\n    if (!queries.length) {\n      return Promise.resolve({ data: [] });\n    }\n\n    const allQueryPromise = queries.map((query) => {\n      return this._seriesQuery(query.stmt, query.requestId);\n    });\n\n    return Promise.all(allQueryPromise).then((responses: any): any => {\n      let result: any[] = [],\n        i = 0;\n      _.each(responses, (response) => {\n        const target = options.targets[i];\n        const keys = queries[i].keys;\n\n        i++;\n        if (!response || !response.rows) {\n          return;\n        }\n\n        let sqlSeries = new SqlSeries({\n          refId: target.refId,\n          series: response.data,\n          meta: response.meta,\n          keys: keys,\n          tillNow: options.rangeRaw?.to === 'now',\n          from: SqlQueryHelper.convertTimestamp(options.range.from),\n          to: SqlQueryHelper.convertTimestamp(options.range.to),\n        });\n\n        if (target.format === 'table') {\n          _.each(sqlSeries.toTable(), (data) => {\n            result.push(data);\n          });\n        } else if (target.format === 'traces') {\n          result = sqlSeries.toTraces();\n        } else if (target.format === 'flamegraph') {\n          result = sqlSeries.toFlamegraph();\n        } else if (target.format === 'logs') {\n          result = sqlSeries.toLogs();\n        } else if (target.refId === 'Anno') {\n          result = sqlSeries.toAnnotation(response.data, response.meta);\n        } else {\n          _.each(sqlSeries.toTimeSeries(target.extrapolate), (data) => {\n            result.push(data);\n          });\n        }\n      });\n\n      return { data: result };\n    });\n  }\n\n  modifyQuery(query: any, action: any): any {\n    let scanner = new Scanner(query.query ?? '');\n    let queryAST = scanner.toAST();\n    let where = queryAST['where'] || [];\n    const labelFilter = action.key + \" = '\" + action.value + \"'\";\n\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        if (where.length === 0) {\n          where.push(labelFilter);\n          break;\n        }\n\n        let alreadyAdded = false;\n        _.each(where, (w: string) => {\n          if (w.includes(labelFilter)) {\n            alreadyAdded = true;\n          }\n        });\n        if (!alreadyAdded) {\n          where.push('AND ' + labelFilter);\n        }\n        break;\n      }\n      case 'ADD_FILTER_OUT': {\n        if (where.length === 0) {\n          break;\n        }\n        where.forEach((w: string, i: number) => {\n          if (w.includes(labelFilter)) {\n            where.splice(i, 1);\n          }\n        });\n        break;\n      }\n      default:\n        break;\n    }\n\n    const modifiedQuery = scanner.Print(queryAST);\n    return { ...query, query: modifiedQuery };\n  }\n\n  createQuery(options: any, target: any) {\n    const queryModel = new SqlQuery(target, this.templateSrv, options);\n    // @ts-ignore\n    const adhocFilters = getAdhocFilters(this.adHocFilter?.datasource?.name, this.uid);\n    const stmt = queryModel.replace(options, adhocFilters);\n\n    let keys = [];\n\n    try {\n      let queryAST = new Scanner(stmt).toAST();\n      keys = queryAST['group by'] || [];\n    } catch (err) {\n      console.log('AST parser error: ', err);\n    }\n\n    return {\n      keys: keys,\n      requestId: options.panelId + target.refId,\n      stmt: stmt,\n    };\n  }\n\n  annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    if (!options.annotation.query) {\n      throw new Error('Query missing in annotation definition');\n    }\n\n    const params = Object.assign(\n      {\n        annotation: {\n          dateTimeColDataType: 'time',\n        },\n        interval: '30s',\n      },\n      options\n    );\n    let queryModel;\n    let query;\n\n    queryModel = new SqlQuery(params.annotation, this.templateSrv, params);\n    queryModel = queryModel.replace(params, []);\n    query = queryModel.replace(/\\r\\n|\\r|\\n/g, ' ');\n    query += ' FORMAT JSON';\n\n    const queryParams = CHDataSource._getRequestOptions(query, true, undefined, this);\n\n    const dataRequest = new Promise((resolve, reject) => {\n      this.backendSrv.fetch(queryParams).subscribe(\n        (response) => {\n          resolve(this.responseParser.transformAnnotationResponse(params, response.data) as AnnotationEvent[]);\n        },\n        (e) => {\n          reject(e);\n        }\n      );\n    });\n\n    return dataRequest as Promise<AnnotationEvent[]>;\n  }\n\n  metricFindQuery(query: string, options?: any) {\n    let interpolatedQuery: string;\n    const wildcardChar = '%';\n    const searchFilterVariableName = '__searchFilter';\n    let scopedVars = {};\n    if (query?.indexOf(searchFilterVariableName) !== -1) {\n      const searchFilterValue =\n        options && options.searchFilter ? `${options.searchFilter}${wildcardChar}` : `${wildcardChar}`;\n      scopedVars = {\n        __searchFilter: {\n          value: searchFilterValue,\n          text: '',\n        },\n      };\n      query = this.templateSrv.replace(query, scopedVars, SqlQueryHelper.interpolateQueryExpr);\n    }\n    interpolatedQuery = this.templateSrv.replace(\n      SqlQueryHelper.conditionalTest(query, this.templateSrv),\n      scopedVars,\n      SqlQueryHelper.interpolateQueryExpr\n    );\n\n    if (options && options.range) {\n      let from = SqlQueryHelper.convertTimestamp(options.range.from);\n      let to = SqlQueryHelper.convertTimestamp(options.range.to);\n      interpolatedQuery = interpolatedQuery.replace(/\\$to/g, to.toString()).replace(/\\$from/g, from.toString());\n      interpolatedQuery = SqlQueryMacros.replaceTimeFilters(interpolatedQuery, options.range);\n      interpolatedQuery = interpolatedQuery.replace(/\\r\\n|\\r|\\n/g, ' ');\n    }\n\n    // todo(nv): fix request id\n    return this._seriesQuery(interpolatedQuery).then(curry(this.responseParser.parse)(query));\n  }\n\n  testDatasource() {\n    return this.metricFindQuery(DEFAULT_QUERY.query).then(() => {\n      return { status: 'success', message: 'Data source is working', title: 'Success' };\n    });\n  }\n\n  formatQuery(query) {\n    let scanner = new Scanner(query ?? '');\n    scanner.Format();\n    return scanner.Format();\n  }\n\n  _seriesQuery(query: string, requestId?: string) {\n    query += ' FORMAT JSON';\n    return this._request(query, requestId);\n  }\n\n  targetContainsTemplate(target: CHQuery) {\n    return this.templateSrv.containsTemplate(target.query);\n  }\n\n  getTagKeys() {\n    // check whether variable `adhoc_query_filter` exists to apply additional filtering\n    // @see https://github.com/Altinity/clickhouse-grafana/issues/75\n    // @see https://github.com/grafana/grafana/issues/13109\n    let queryFilter = '';\n    each(this.templateSrv.getVariables(), (v: TypedVariableModel) => {\n      if ('query' in v && v.name === adhocFilterVariable) {\n        queryFilter = v.query;\n      }\n    });\n    return this.adHocFilter.GetTagKeys(queryFilter);\n  }\n\n  getTagValues(options: any) {\n    return this.adHocFilter.GetTagValues(options);\n  }\n\n  interpolateVariablesInQueries(queries: any, scopedVars: any) {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query: any) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.getRef(),\n          query: this.templateSrv.replace(\n            SqlQueryHelper.conditionalTest(query.query, this.templateSrv),\n            scopedVars,\n            SqlQueryHelper.interpolateQueryExpr\n          ),\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  getRef() {\n    return { type: this.type, uid: this.uid };\n  }\n}\n","import { getBackendSrv } from '@grafana/runtime';\nimport { CHDataSource } from '../../../../datasource/datasource';\n\nexport const getOptions = async (query: string, url: string, datasourceOptions: any): Promise<any> => {\n  const backendSrv = getBackendSrv();\n  const options = JSON.parse(JSON.stringify(datasourceOptions));\n\n  options.url = options.access === 'proxy' ? `/api/datasources/proxy/uid/${options.uid}` : options.url;\n\n  const queryParams = CHDataSource._getRequestOptions(query, options.jsonData.usePOST, undefined, options);\n\n  if (!url || !query) {\n    return Promise.reject('Invalid parameters');\n  }\n\n  return new Promise((resolve, reject) => {\n    backendSrv.fetch(queryParams).subscribe(\n      (response) => {\n        resolve(response.data);\n      },\n      (e) => {\n        reject(e);\n      }\n    );\n  });\n};\n\nexport const getSettings = async (): Promise<any> => {\n  const backendSrv = getBackendSrv();\n\n  return new Promise((resolve, reject) => {\n    backendSrv.fetch({ url: '/api/frontend/settings' }).subscribe(\n      (response) => {\n        resolve(response.data);\n      },\n      (e) => {\n        reject(e);\n      }\n    );\n  });\n};\n","import { Alert, InlineField, InlineLabel, InlineSwitch, Select } from '@grafana/ui';\nimport React, { useEffect, useState } from 'react';\nimport { getOptions, getSettings } from './DefaultValues.api';\nimport { TimestampFormat } from '../../../../types/types';\n\nconst TIME_RELATED_COLUMNS_QUERY =\n  \"SELECT name,database,table,type FROM system.columns WHERE (type LIKE '%Date%' OR type LIKE '%UInt64%' OR type LIKE '%UInt32%' OR type LIKE '%Float%' OR type LIKE '%Decimal%') AND NOT (database='system' AND name LIKE 'ProfileEvent%') AND NOT (database='system' AND name LIKE 'CurrentMetric%') AND NOT (type LIKE 'Tuple%') AND NOT (database IN ('INFORMATION_SCHEMA','information_schema')) ORDER BY type,name FORMAT JSON\";\n\ninterface DefaultValuesInterface {\n  jsonData: any;\n  onSwitchToggle: any;\n  newOptions: any;\n  onFieldChange: any;\n}\n\nexport const DefaultValues = ({ jsonData, newOptions, onSwitchToggle, onFieldChange }: DefaultValuesInterface) => {\n  const [defaultDateTime64Options, setDefaultDateTime64Options] = useState<any[]>([]);\n  const [defaultDateTimeOptions, setDefaultDateTimeOptions] = useState<any[]>([]);\n  const [defaultUint32Options, setDefaultUint32Options] = useState<any[]>([]);\n  const [defaultDateDate32Options, setDefaultDateDate32Options] = useState<any[]>([]);\n  const [defaultFloatOptions, setDefaultFloatOptions] = useState<any[]>([]);\n  const [defaultTimeStamp64_3Options, setDefaultTimeStamp64_3Options] = useState<any[]>([]);\n  const [defaultTimeStamp64_6Options, setDefaultTimeStamp64_6Options] = useState<any[]>([]);\n  const [defaultTimeStamp64_9Options, setDefaultTimeStamp64_9Options] = useState<any[]>([]);\n\n  useEffect(() => {\n    const doRequest = async () => {\n      if (\n        newOptions.version === 1 ||\n        !jsonData.useDefaultConfiguration ||\n        (!jsonData.dataSourceUrl.startsWith('http://') && !jsonData.dataSourceUrl.startsWith('https://'))\n      ) {\n        return;\n      }\n\n      try {\n        // Ensure newOptions and newOptions.uid are defined\n        if (!newOptions || !newOptions.uid) {\n          return;\n        }\n        const dashboardUID = newOptions.uid;\n\n        // Fetch settings\n        const response = await getSettings();\n        if (!response || !response.datasources) {\n          return;\n        }\n\n        // Find the current datasource\n        const currentDatasource: { basicAuth: String } = Object.values(response.datasources).find(\n          (datasource: any) => datasource?.uid === dashboardUID\n        ) as { basicAuth: String };\n\n        if (!currentDatasource) {\n          return;\n        }\n\n        // Set basicAuth if applicable\n        const basicAuth = currentDatasource.basicAuth;\n        newOptions.basicAuth = newOptions.basicAuth ? basicAuth : newOptions.basicAuth;\n\n        // Fetch options columns\n        const columns = await getOptions(TIME_RELATED_COLUMNS_QUERY, jsonData.dataSourceUrl, newOptions);\n        if (!columns || !Array.isArray(columns.data)) {\n          return;\n        }\n\n        // Group columns by type\n        const groupedByType = columns.data.reduce((acc, item) => {\n          if (!item || !item.type || !item.name) {\n            return acc;\n          }\n          let typeKey: string = item.type;\n          if (typeKey.startsWith('LowCardinality(')) {\n            typeKey = typeKey.slice('LowCardinality('.length);\n            typeKey = typeKey.slice(0, -')'.length);\n          }\n          if (typeKey.startsWith('Nullable(')) {\n            typeKey = typeKey.slice('Nullable('.length);\n            typeKey = typeKey.slice(0, -')'.length);\n          }\n          if (typeKey.startsWith('DateTime64(')) {\n            typeKey = 'DateTime64';\n          }\n          if (typeKey.startsWith('DateTime(')) {\n            typeKey = 'DateTime';\n          }\n\n          if (typeKey.startsWith('Float')) {\n            typeKey = 'Float';\n          }\n\n          if (typeKey.startsWith('Decimal')) {\n            typeKey = 'Decimal';\n          }\n\n          acc[typeKey] = acc[typeKey] || [];\n          acc[typeKey].push(item.name);\n          return acc;\n        }, {});\n\n        // Function to transform columns into options\n        const transformDataToOptions = (dataArray) => {\n          if (!Array.isArray(dataArray)) {\n            return [];\n          }\n          const uniqueItems = [...new Set(dataArray)];\n          return uniqueItems.map((item) => ({ label: item, value: item }));\n        };\n\n        // Set default options, ensuring the grouped columns exists\n        setDefaultDateTime64Options(transformDataToOptions(groupedByType['DateTime64'] || []));\n        setDefaultDateDate32Options(transformDataToOptions(groupedByType['Date'] || []));\n        setDefaultUint32Options(transformDataToOptions(groupedByType['UInt32'] || []));\n        setDefaultDateTimeOptions(transformDataToOptions(groupedByType['DateTime'] || []));\n        setDefaultFloatOptions(transformDataToOptions([...groupedByType['Float'],...groupedByType['Decimal']]));\n        setDefaultTimeStamp64_3Options(transformDataToOptions(groupedByType['UInt64'] || []));\n        setDefaultTimeStamp64_6Options(transformDataToOptions(groupedByType['UInt64'] || []));\n        setDefaultTimeStamp64_9Options(transformDataToOptions(groupedByType['UInt64'] || []));\n      } catch (e) {\n        setDefaultUint32Options([]);\n        setDefaultDateTimeOptions([]);\n        setDefaultDateTime64Options([]);\n        setDefaultDateDate32Options([]);\n        setDefaultFloatOptions([]);\n        setDefaultTimeStamp64_3Options([]);\n        setDefaultTimeStamp64_6Options([]);\n        setDefaultTimeStamp64_9Options([]);\n      }\n    };\n\n    doRequest();\n  }, [jsonData.dataSourceUrl, jsonData.useDefaultConfiguration, newOptions]);\n\n  return (\n    <div className=\"gf-form-group\">\n      <InlineField label=\"Use default values\" labelWidth={36}>\n        <InlineSwitch\n          id=\"useDefaultConfiguration\"\n          value={jsonData.useDefaultConfiguration || false}\n          onChange={(e) => onSwitchToggle('useDefaultConfiguration', e.currentTarget.checked)}\n        />\n      </InlineField>\n      {jsonData.useDefaultConfiguration && (\n        <>\n          {newOptions.version === 1 && (\n            <Alert\n              title={`Please save data source before use default configurations, \n        we need configured clickhouse connection to fetch options`}\n              severity={'info'}\n              key={'info'}\n            />\n          )}\n          <h6>TimestampType</h6>\n          <InlineField\n            labelWidth={32}\n            style={{ marginLeft: '30px' }}\n            label={\n              <InlineLabel\n                width={32}\n                tooltip={\n                  <div style={{ width: '200px', backgroundColor: 'black' }}>\n                    Select Type &nbsp;\n                    <a\n                      href=\"https://clickhouse.com/docs/en/sql-reference/data-types/datetime/\"\n                      rel=\"noreferrer\"\n                      target=\"_blank\"\n                    >\n                      DateTime\n                    </a>\n                    ,&nbsp;\n                    <a\n                      href=\"https://clickhouse.com/docs/en/sql-reference/data-types/datetime64/\"\n                      rel=\"noreferrer\"\n                      target=\"_blank\"\n                    >\n                      DateTime64\n                    </a>\n                    &nbsp; or{' '}\n                    <a\n                      href=\"https://clickhouse.com/docs/en/sql-reference/data-types/int-uint/\"\n                      rel=\"noreferrer\"\n                      target=\"_blank\"\n                    >\n                      UInt32\n                    </a>{' '}\n                    column for binding with Grafana range selector\n                  </div>\n                }\n              >\n                Column timestamp type\n              </InlineLabel>\n            }\n          >\n            <Select\n              width={24}\n              onChange={(changeEvent) => {\n                onFieldChange({ value: changeEvent ? changeEvent.value : undefined }, 'defaultDateTimeType');\n              }}\n              isClearable\n              placeholder={'Timestamp type'}\n              options={[\n                { label: 'DateTime', value: TimestampFormat.DateTime },\n                { label: 'DateTime64', value: TimestampFormat.DateTime64 },\n                { label: 'TimeStamp', value: TimestampFormat.TimeStamp },\n                { label: 'Float', value: TimestampFormat.Float },\n                { label: 'Timestamp64(3)', value: TimestampFormat.TimeStamp64_3 },\n                { label: 'Timestamp64(6)', value: TimestampFormat.TimeStamp64_6 },\n                { label: 'Timestamp64(9)', value: TimestampFormat.TimeStamp64_9 },\n              ]}\n              value={jsonData.defaultDateTimeType}\n            />\n          </InlineField>\n          <h6>DateTime columns</h6>\n          <InlineField label=\"Datetime Field\" labelWidth={32} style={{ marginLeft: '30px' }}>\n            <Select\n              isClearable\n              id=\"defaultDateTime\"\n              allowCustomValue={false}\n              width={24}\n              value={jsonData.defaultDateTime}\n              onChange={(changeEvent) => {\n                onFieldChange({ value: changeEvent ? changeEvent.value : undefined }, 'defaultDateTime');\n              }}\n              options={defaultDateTimeOptions}\n            />\n          </InlineField>\n          <InlineField label=\"Timestamp (Uint32) Field\" labelWidth={32} style={{ marginLeft: '30px' }}>\n            <Select\n              isClearable\n              id=\"defaultUint32\"\n              allowCustomValue={false}\n              width={24}\n              value={jsonData.defaultUint32}\n              onChange={(changeEvent) => {\n                onFieldChange({ value: changeEvent ? changeEvent.value : undefined }, 'defaultUint32');\n              }}\n              options={defaultUint32Options}\n            />\n          </InlineField>\n          <InlineField label=\"Datetime64 Field\" labelWidth={32} style={{ marginLeft: '30px' }}>\n            <Select\n              isClearable\n              id=\"defaultDateTime64\"\n              allowCustomValue={false}\n              width={24}\n              value={jsonData.defaultDateTime64}\n              onChange={(changeEvent) => {\n                onFieldChange({ value: changeEvent ? changeEvent.value : undefined }, 'defaultDateTime64');\n              }}\n              options={defaultDateTime64Options}\n            />\n          </InlineField>\n          <InlineField label=\"Float Field\" labelWidth={32} style={{ marginLeft: '30px' }}>\n            <Select\n              isClearable\n              id=\"defaultFloatTimestamp\"\n              allowCustomValue={false}\n              width={24}\n              value={jsonData.defaultFloat}\n              onChange={(changeEvent) => {\n                onFieldChange({ value: changeEvent ? changeEvent.value : undefined }, 'defaultFloat');\n              }}\n              options={defaultFloatOptions}\n            />\n          </InlineField>\n          <InlineField label=\"Timestamp64(3) Field\" labelWidth={32} style={{ marginLeft: '30px' }}>\n            <Select\n              isClearable\n              id=\"defaultTimeStamp64_3\"\n              allowCustomValue={false}\n              width={24}\n              value={jsonData.defaultTimeStamp64_3}\n              onChange={(changeEvent) => {\n                onFieldChange({ value: changeEvent ? changeEvent.value : undefined }, 'defaultTimeStamp64_3');\n              }}\n              options={defaultTimeStamp64_3Options}\n            />\n          </InlineField>\n          <InlineField label=\"Timestamp64(6) Field\" labelWidth={32} style={{ marginLeft: '30px' }}>\n            <Select\n              isClearable\n              id=\"defaultTimeStamp64_6\"\n              allowCustomValue={false}\n              width={24}\n              value={jsonData.defaultTimeStamp64_6}\n              onChange={(changeEvent) => {\n                onFieldChange({ value: changeEvent ? changeEvent.value : undefined }, 'defaultTimeStamp64_6');\n              }}\n              options={defaultTimeStamp64_6Options}\n            />\n          </InlineField>\n          <InlineField label=\"Timestamp64(9) Field\" labelWidth={32} style={{ marginLeft: '30px' }}>\n            <Select\n              isClearable\n              id=\"defaultTimeStamp64_9\"\n              allowCustomValue={false}\n              width={24}\n              value={jsonData.defaultTimeStamp64_9}\n              onChange={(changeEvent) => {\n                onFieldChange({ value: changeEvent ? changeEvent.value : undefined }, 'defaultTimeStamp64_9');\n              }}\n              options={defaultTimeStamp64_9Options}\n            />\n          </InlineField>\n          <h6>Date column</h6>\n          <InlineField label=\"Date Field\" labelWidth={32} style={{ marginLeft: '30px' }}>\n            <Select\n              isClearable\n              id=\"defaultDateDate32\"\n              allowCustomValue={false}\n              width={24}\n              value={jsonData.defaultDateDate32}\n              onChange={(changeEvent) => {\n                onFieldChange({ value: changeEvent ? changeEvent.value : undefined }, 'defaultDateDate32');\n              }}\n              options={defaultDateDate32Options}\n            />\n          </InlineField>\n          <h6>Logs settings</h6>\n          <InlineField label=\"Context window\" labelWidth={32} style={{ marginLeft: '30px' }}>\n            <Select\n              width={24}\n              data-testid=\"context-window-size-select\"\n              onChange={(changeEvent) => {\n                onFieldChange({ value: changeEvent ? changeEvent.value : undefined }, 'contextWindowSize');\n              }}\n              options={['10', '20', '50', '100'].map((value) => ({ label: value + ' entries', value }))}\n              value={jsonData.contextWindowSize}\n            />\n          </InlineField>\n          <h6>Macros settings</h6>\n          <InlineField label=\"Use window functions for macros\" labelWidth={32} style={{ marginLeft: '30px' }}>\n            <InlineSwitch\n              id=\"useWindowFuncForMacros\"\n              data-testid=\"use-window-func-for-macros\"\n              value={jsonData.useWindowFuncForMacros ?? true}\n              onChange={(e) => onSwitchToggle('useWindowFuncForMacros', e.currentTarget.checked)}\n            />\n          </InlineField>\n        </>\n      )}\n    </div>\n  );\n};\n","export const COMPRESSION_TYPE_OPTIONS = [\n  { label: 'gzip', value: 'gzip' },\n  { label: 'br', value: 'br' },\n  { label: 'deflate', value: 'deflate' },\n  { label: 'zstd', value: 'zstd' },\n];\n","import { DataSourcePlugin } from '@grafana/data';\nimport { CHDataSource } from './datasource/datasource';\nimport { ConfigEditor } from './views/ConfigEditor/ConfigEditor';\nimport { QueryEditor } from './views/QueryEditor/QueryEditor';\nimport { CHDataSourceOptions, CHQuery } from './types/types';\n\nexport const plugin = new DataSourcePlugin<CHDataSource, CHQuery, CHDataSourceOptions>(CHDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, {FormEvent, useEffect, useState} from 'react';\nimport { CodeEditor, DataSourceHttpSettings, InlineField, InlineSwitch, Input, SecretInput, Select } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, onUpdateDatasourceJsonDataOption, SelectableValue } from '@grafana/data';\nimport { CHDataSourceOptions } from '../../types/types';\nimport _ from 'lodash';\nimport { DefaultValues } from './FormParts/DefaultValues/DefaultValues';\nimport { LANGUAGE_ID } from '../QueryEditor/components/QueryTextEditor/editor/initiateEditor';\nimport { MONACO_EDITOR_OPTIONS } from '../constants';\nimport { COMPRESSION_TYPE_OPTIONS } from './constants';\nimport { DEFAULT_VALUES_QUERY } from '../../datasource/adhoc';\n\nexport interface CHSecureJsonData {\n  password?: string;\n  xHeaderKey?: string;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<CHDataSourceOptions> {}\n\nexport function ConfigEditor(props: Props) {\n  const { onOptionsChange, options } = props;\n  const newOptions = _.cloneDeep(options);\n  const { jsonData, secureJsonFields } = newOptions;\n  const secureJsonData = (options.secureJsonData || {}) as CHSecureJsonData;\n  const [selectedCompressionType, setSelectedCompressionType] = useState(jsonData.compressionType);\n  const [adHocValuesQuery, setAdHocValuesQuery] = useState(jsonData.adHocValuesQuery || DEFAULT_VALUES_QUERY);\n\n  useEffect(() => {\n    jsonData.adHocValuesQuery = adHocValuesQuery;\n\n    onOptionsChange({\n      ...newOptions,\n      jsonData: { ...jsonData },\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [adHocValuesQuery]);\n\n  // @todo remove when merged https://github.com/grafana/grafana/pull/80858\n  if (newOptions.url !== '') {\n    jsonData.dataSourceUrl = newOptions.url;\n  }\n  const onSwitchToggle = (\n    key: keyof Pick<\n      CHDataSourceOptions,\n      'useYandexCloudAuthorization' | 'addCorsHeader' | 'usePOST' | 'useCompression' | 'xClickHouseSSLCertificateAuth' | 'adHocHideTableNames'\n    >,\n    value: boolean\n  ) => {\n    onOptionsChange({\n      ...newOptions,\n      jsonData: { ...jsonData, [key]: value },\n    });\n  };\n\n  // @todo remove it when https://github.com/grafana/grafana/pull/80858 merged\n  const onDataHttpSettingsChange = (event: any) => {\n    const newOptions = _.cloneDeep(event);\n    newOptions.jsonData.dataSourceUrl = newOptions.url;\n    onOptionsChange({\n      ...newOptions,\n    });\n  };\n\n  const onResetXHeaderKey = () => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: { ...secureJsonFields, xHeaderKey: false },\n      secureJsonData: { ...secureJsonData, xHeaderKey: '' },\n    });\n  };\n\n  const onChangeXHeaderKey = (event: FormEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: { ...secureJsonFields },\n      secureJsonData: { ...secureJsonData, xHeaderKey: event.currentTarget.value },\n    });\n  };\n\n  const onCompressionTypeChange = (compressionType: SelectableValue) => {\n    setSelectedCompressionType(compressionType.value);\n    jsonData.compressionType = compressionType.value;\n    onOptionsChange({\n      ...options,\n      jsonData: { ...jsonData },\n    });\n  };\n\n  const onFieldChange = (column: SelectableValue, fieldName) => {\n    jsonData[fieldName] = column.value;\n    onOptionsChange({ ...options, jsonData: { ...jsonData } });\n  };\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        data-test-id=\"http-settings\"\n        defaultUrl=\"http://localhost:8123\"\n        dataSourceConfig={options}\n        showAccessOptions={true}\n        showForwardOAuthIdentityOption={true}\n        onChange={onDataHttpSettingsChange}\n      />\n      <div className=\"gf-form-group\">\n        <InlineField\n          label=\"Use Yandex.Cloud authorization headers\"\n          tooltip=\"Use authorization headers for managed Yandex.Cloud ClickHouse database, will work only for proxy access method\"\n          labelWidth={36}\n        >\n          <InlineSwitch\n            data-test-id=\"use-yandex-cloud-authorization-switch\"\n            id=\"useYandexCloudAuthorization\"\n            value={jsonData.useYandexCloudAuthorization || false}\n            onChange={(e) => onSwitchToggle('useYandexCloudAuthorization', e.currentTarget.checked)}\n          />\n        </InlineField>\n        {jsonData.useYandexCloudAuthorization && (\n          <>\n            <InlineField label=\"X-ClickHouse-User\" labelWidth={36}>\n              <Input\n                id=\"xHeaderUser\"\n                data-test-id=\"x-header-user-input\"\n                onChange={onUpdateDatasourceJsonDataOption(props, 'xHeaderUser')}\n                value={jsonData.xHeaderUser || ''}\n                placeholder=\"DB user name\"\n              />\n            </InlineField>\n            <InlineField label={'X-ClickHouse-Key'} labelWidth={36}>\n              <SecretInput\n                data-test-id=\"x-header-key-input\"\n                isConfigured={!!secureJsonFields?.['xHeaderKey']}\n                value={secureJsonData['xHeaderKey'] || ''}\n                placeholder={`DB user password`}\n                onReset={onResetXHeaderKey}\n                onChange={onChangeXHeaderKey}\n              />\n            </InlineField>\n            <InlineField label=\"X-ClickHouse-SSL-Certificate-Auth\" labelWidth={36} tooltip=\"Requires non empty X-ClickHouse-User and TLS/SSL client key and client cert, doesn't work with basic authorization\">\n              <InlineSwitch\n                data-test-id=\"x-clickhouse-ssl-certificate-auth\"\n                id=\"xClickHouseSSLCertificateAuth\"\n                value={jsonData.xClickHouseSSLCertificateAuth || false}\n                onChange={(e) => onSwitchToggle('xClickHouseSSLCertificateAuth', e.currentTarget.checked)}\n              />\n            </InlineField>\n          </>\n        )}\n      </div>\n      <DefaultValues\n        jsonData={jsonData}\n        newOptions={newOptions}\n        onSwitchToggle={onSwitchToggle}\n        onFieldChange={onFieldChange}\n      />\n      <h3 className=\"page-heading\">Additional</h3>\n      <div className=\"gf-form-group\">\n        <InlineField\n          label=\"Add CORS flag to requests\"\n          labelWidth={32}\n          tooltip=\"Whether 'add_http_cors_header=1' parameter should be attached to requests. Remember that read-only users cannot override this setting.\"\n        >\n          <InlineSwitch\n            id=\"addCorsHeader\"\n            data-test-id=\"add-cors-header-switch\"\n            value={jsonData.addCorsHeader || false}\n            onChange={(e) => onSwitchToggle('addCorsHeader', e.currentTarget.checked)}\n          />\n        </InlineField>\n        <InlineField\n          label=\"Use POST method to send queries\"\n          labelWidth={32}\n          tooltip=\"Remember that it's possible to change data via POST requests. Better to avoid using POST method if you connecting not as Read-Only user.\"\n        >\n          <InlineSwitch\n            data-test-id=\"use-post-method-switch\"\n            id=\"usePOST\"\n            value={jsonData.usePOST || false}\n            onChange={(e) => onSwitchToggle('usePOST', e.currentTarget.checked)}\n          />\n        </InlineField>\n        <InlineField\n          label=\"Default database\"\n          labelWidth={32}\n          tooltip=\"If you set the default database for this datasource, it will be prefilled in the query builder, and used to make ad-hoc filters more convenient.\"\n        >\n          <Input\n            data-test-id=\"default-database-input\"\n            value={jsonData.defaultDatabase || 'default'}\n            placeholder=\"default\"\n            onChange={onUpdateDatasourceJsonDataOption(props, 'defaultDatabase')}\n          />\n        </InlineField>\n        <InlineField label=\"Use Compression\" labelWidth={32} tooltip=\"Add `Accept-Encoding` header in each request.\">\n          <InlineSwitch\n            data-test-id=\"use-compression-switch\"\n            id=\"useCompressions\"\n            value={jsonData.useCompression || false}\n            onChange={(e) => onSwitchToggle('useCompression', e.currentTarget.checked)}\n          />\n        </InlineField>\n        <InlineField\n          label=\"Compressions type\"\n          labelWidth={32}\n          tooltip=\"read https://clickhouse.com/docs/en/interfaces/http#compression for details\"\n        >\n          <Select\n            data-test-id=\"compression-type-select\"\n            id=\"compressionType\"\n            allowCustomValue={false}\n            width={24}\n            value={selectedCompressionType}\n            onChange={({ value }) => onCompressionTypeChange({ value })}\n            options={COMPRESSION_TYPE_OPTIONS}\n          />\n        </InlineField>\n        <InlineField\n          label=\"Configure AdHoc Filters request\"\n          labelWidth={32}\n          tooltip=\"To be able to configure request properfly please use macroses {field} {database} {table}\"\n        >\n          <div style={{ position: 'relative', minWidth: '600px' }}>\n            <CodeEditor\n              height={Math.max((jsonData.adHocValuesQuery || '').split('\\n').length * 18, 150)}\n              value={adHocValuesQuery}\n              language={LANGUAGE_ID}\n              monacoOptions={MONACO_EDITOR_OPTIONS}\n              onChange={setAdHocValuesQuery}\n            />\n          </div>\n        </InlineField>\n        <InlineField label=\"Hide table names in adhoc filters\" labelWidth={32} tooltip=\"Applicable if you want adhoc with short filed names\">\n          <InlineSwitch\n            data-test-id=\"adhoc-hide-table-names\"\n            id=\"adhoc\"\n            value={jsonData.adHocHideTableNames || false}\n            onChange={(e) => onSwitchToggle('adHocHideTableNames', e.currentTarget.checked)}\n          />\n        </InlineField>\n      </div>\n    </>\n  );\n}\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","e","n","r","s","u","a","o","c","f","h","d","l","$","y","M","name","weekdays","split","months","ordinal","t","m","String","Array","v","z","utcOffset","Math","abs","floor","date","year","month","clone","add","ceil","p","w","D","ms","Q","toLowerCase","replace","g","S","_","O","args","arguments","b","locale","$L","utc","$u","x","$x","$offset","parse","prototype","$d","Date","NaN","test","match","substring","UTC","init","$y","getFullYear","$M","getMonth","$D","getDate","$W","getDay","$H","getHours","$m","getMinutes","$s","getSeconds","$ms","getMilliseconds","$utils","isValid","isSame","startOf","endOf","isAfter","isBefore","$g","set","unix","valueOf","getTime","toDate","apply","slice","$locale","weekStart","$set","min","daysInMonth","get","Number","round","subtract","format","invalidDate","meridiem","monthsShort","weekdaysMin","weekdaysShort","getTimezoneOffset","diff","toJSON","toISOString","toUTCString","forEach","extend","$i","isDayjs","en","Ls","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","options","idCountMap","identifiers","base","count","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","insert","style","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","getTarget","Error","appendChild","element","createElement","setAttributes","attributes","styleElement","nonce","setAttribute","insertStyleElement","styleTagTransform","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__241__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","getter","__esModule","definition","key","Object","defineProperty","enumerable","prop","hasOwnProperty","Symbol","toStringTag","value","nc","pow","millisecondsInHour","constructFromSymbol","for","constructFrom","constructor","argument","context","parseISO","in","additionalDigits","dateStrings","dateString","array","patterns","dateTimeDelimiter","timeString","timeZoneDelimiter","substr","token","timezone","exec","time","splitDateString","parseYearResult","regex","RegExp","captures","restDateString","parseInt","century","parseYear","dateRegex","isWeekDate","dayOfYear","parseDateUnit","day","week","dayOfWeek","_year","validateWeekDate","isoWeekYear","setUTCFullYear","getUTCDay","setUTCDate","getUTCDate","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","max","parseDate","isNaN","timestamp","offset","timeRegex","hours","parseTimeUnit","minutes","seconds","validateTime","parseTime","tmpDate","setFullYear","getUTCFullYear","getUTCMonth","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","timezoneString","timezoneRegex","sign","_hours","validateTimezone","parseTimezone","parseFloat","typeToPos","hour","minute","second","dtfCache","testDateFormatted","Intl","DateTimeFormat","hourCycle","timeZone","hourCycleSupported","fullYear","millisecond","utcDate","setUTCHours","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","timezoneZ","timezoneHH","timezoneHHMM","isUtcDate","absoluteOffset","timeZoneString","validIANATimezoneCache","error","isValidTimezoneIANAString","now","toUtcDate","calcOffset","fixedOffset","utcGuess","o2","o3","fixOffset","tokens","dtf","hour12","getDateTimeFormat","formatted","formatToParts","filled","pos","type","RangeError","partsOffset","parsed","hackyOffset","tzTokenizeDate","asUTC","asTS","over","getTimezoneOffsetInMilliseconds","dateTimePattern","datePattern","plainTime","YY","YYY","YYYY","YYYYY","MM","DDD","MMDD","Www","WwwD","HH","HHMM","HHMMSS","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","isLeapYear","toAnnotation","input","meta","parseTimeBasedOnType","timeStr","startsWith","offsetMilliseconds","TypeError","parts","trim","patternYYY","patternYYYYY","yearString","centuryString","toZonedTime","resultDate","inputData","fields","values","config","timeEnd","title","text","tags","annotation","timeType","find","timeEndType","time_end","transformAnnotationData","_toFieldType","dateTimeWithTZMatch","fieldType","FieldType","number","other","string","_toJSTypeInTable","_formatValue","numeric","extrapolateDataPoints","datapoints","self","tillNow","durationToStart","from","durationToEnd","to","averageDurationBetweenSamples","newDatapointValue","_pushDatapoint","metrics","seriesName","LuxonError","InvalidDateTimeError","reason","super","toMessage","InvalidIntervalError","InvalidDurationError","ConflictingSpecificationError","InvalidUnitError","unit","InvalidArgumentError","ZoneIsAbstractError","DATE_SHORT","DATE_MED","DATE_MED_WITH_WEEKDAY","weekday","DATE_FULL","DATE_HUGE","TIME_SIMPLE","TIME_WITH_SECONDS","TIME_WITH_SHORT_OFFSET","timeZoneName","TIME_WITH_LONG_OFFSET","TIME_24_SIMPLE","TIME_24_WITH_SECONDS","TIME_24_WITH_SHORT_OFFSET","TIME_24_WITH_LONG_OFFSET","DATETIME_SHORT","DATETIME_SHORT_WITH_SECONDS","DATETIME_MED","DATETIME_MED_WITH_SECONDS","DATETIME_MED_WITH_WEEKDAY","DATETIME_FULL","DATETIME_FULL_WITH_SECONDS","DATETIME_HUGE","DATETIME_HUGE_WITH_SECONDS","Zone","ianaName","isUniversal","offsetName","ts","opts","formatOffset","equals","otherZone","singleton","SystemZone","instance","resolvedOptions","parseZoneInfo","era","ianaZoneCache","IANAZone","create","resetCache","isValidSpecifier","isValidZone","zone","zoneName","valid","adOrBc","isUndefined","fMonth","fDay","fYear","fadOrBc","fHour","fMinute","fSecond","objToLocalTS","intlLFCache","intlDTCache","getCachedDTF","locString","intlNumCache","intlRelCache","sysLocaleCache","weekInfoCache","listStuff","loc","englishFn","intlFn","mode","listingMode","PolyNumberFormatter","intl","forceSimple","padTo","otherOpts","keys","intlOpts","useGrouping","minimumIntegerDigits","inf","NumberFormat","getCachedINF","fixed","padStart","roundTo","PolyDateFormatter","dt","originalZone","gmtOffset","offsetZ","setZone","plus","toJSDate","part","PolyRelFormatter","isEnglish","hasRelative","rtf","cacheKeyOpts","RelativeTimeFormat","getCachedRTF","narrow","units","years","quarters","weeks","days","lastable","indexOf","isDay","isInPast","is","fmtValue","singular","lilUnits","fmtUnit","fallbackWeekSettings","firstDay","minimalDays","weekend","Locale","fromOpts","numberingSystem","outputCalendar","weekSettings","defaultToEN","specifiedLocale","Settings","defaultLocale","localeR","numberingSystemR","defaultNumberingSystem","outputCalendarR","defaultOutputCalendar","weekSettingsR","validateWeekSettings","defaultWeekSettings","fromObject","numbering","parsedLocale","parsedNumberingSystem","parsedOutputCalendar","localeStr","xIndex","uIndex","selectedStr","smaller","calendar","parseLocaleString","includes","intlConfigString","weekdaysCache","standalone","monthsCache","meridiemCache","eraCache","fastNumbersCached","fastNumbers","isActuallyEn","hasNoWeirdness","alts","getOwnPropertyNames","redefaultToEN","redefaultToSystem","formatStr","DateTime","mapMonths","extract","mapWeekdays","meridiems","eras","field","matching","dtFormatter","numberFormatter","relFormatter","listFormatter","ListFormat","getCachedLF","getWeekSettings","hasLocaleWeekInfo","getWeekInfo","weekInfo","getCachedWeekInfo","getStartOfWeek","getMinDaysInFirstWeek","getWeekendDays","FixedOffsetZone","utcInstance","parseSpecifier","signedOffset","InvalidZone","normalizeZone","defaultZone","lowered","isNumber","numberingSystems","arab","arabext","bali","beng","deva","fullwide","gujr","hanidec","khmr","knda","laoo","limb","mlym","mong","mymr","orya","tamldec","telu","thai","tibt","latn","numberingSystemsUTF16","hanidecChars","digitRegexCache","digitRegex","append","ns","throwOnInvalid","twoDigitCutoffYear","cutoffYear","resetCaches","Invalid","explanation","nonLeapLadder","leapLadder","unitOutOfRange","js","computeOrdinal","uncomputeOrdinal","table","month0","findIndex","isoWeekdayToLocal","isoWeekday","startOfWeek","gregorianToWeek","gregObj","minDaysInFirstWeek","weekYear","weekNumber","weeksInWeekYear","timeObject","weekToGregorian","weekData","weekdayOfJan4","yearInDays","gregorianToOrdinal","gregData","ordinalToGregorian","ordinalData","usesLocalWeekValues","localWeekday","localWeekNumber","localWeekYear","hasInvalidGregorianData","validYear","isInteger","validMonth","integerBetween","validDay","hasInvalidTimeData","validHour","validMinute","validSecond","validMillisecond","bestBy","arr","by","compare","reduce","best","next","pair","settings","isArray","some","thing","bottom","top","padded","parseInteger","parseFloating","parseMillis","fraction","digits","towardZero","factor","trunc","modMonth","firstWeekOffset","weekOffset","weekOffsetNext","untruncateYear","offsetFormat","modified","offHourStr","offMinuteStr","offHour","offMin","asNumber","numericValue","normalizeObject","normalizer","normalized","monthsLong","monthsNarrow","weekdaysLong","weekdaysNarrow","erasLong","erasShort","erasNarrow","stringifyTokens","splits","tokenToString","literal","val","macroTokenToFormatOpts","DD","DDDD","tt","ttt","tttt","T","TT","TTT","TTTT","ff","fff","ffff","F","FF","FFF","FFFF","Formatter","parseFormat","fmt","current","currentFull","bracketed","charAt","formatOpts","systemLoc","formatWithSystemDefault","formatDateTime","formatDateTimeParts","formatInterval","interval","start","formatRange","end","num","formatDateTimeFromString","knownEnglish","useDateTimeFormatter","isOffsetFixed","allowZ","maybeMacro","quarter","formatDurationFromString","dur","tokenToField","realTokens","found","lildur","mapped","shiftTo","filter","ianaRegex","combineRegexes","regexes","full","source","combineExtractors","extractors","mergedVals","mergedZone","cursor","ex","extractor","simpleParse","ret","offsetRegex","isoTimeBaseRegex","isoTimeRegex","isoTimeExtensionRegex","extractISOWeekData","extractISOOrdinalData","sqlTimeRegex","sqlTimeExtensionRegex","fallback","extractISOTime","milliseconds","extractISOOffset","local","fullOffset","extractIANAZone","isoTimeOnly","isoDuration","extractISODuration","yearStr","monthStr","weekStr","dayStr","hourStr","minuteStr","secondStr","millisecondsStr","hasNegativePrefix","negativeSeconds","maybeNegate","force","obsOffsets","GMT","EDT","EST","CDT","CST","MDT","MST","PDT","PST","fromStrings","weekdayStr","rfc2822","extractRFC2822","obsOffset","milOffset","rfc1123","rfc850","ascii","extractRFC1123Or850","extractASCII","isoYmdWithTimeExtensionRegex","isoWeekWithTimeExtensionRegex","isoOrdinalWithTimeExtensionRegex","isoTimeCombinedRegex","extractISOYmdTimeAndOffset","extractISOWeekTimeAndOffset","extractISOOrdinalDateAndTime","extractISOTimeAndOffset","extractISOTimeOnly","sqlYmdWithTimeExtensionRegex","sqlTimeCombinedRegex","extractISOTimeOffsetAndIANAZone","INVALID","lowOrderMatrix","casualMatrix","accurateMatrix","daysInYearAccurate","daysInMonthAccurate","orderedUnits","reverseUnits","reverse","clear","conf","conversionAccuracy","matrix","Duration","durationToMillis","vals","sum","normalizeValues","reduceRight","previous","previousVal","conv","rollUp","accurate","invalid","isLuxonDuration","fromMillis","normalizeUnit","fromDurationLike","durationLike","isDuration","fromISO","parseISODuration","fromISOTime","parseISOTimeOnly","toFormat","fmtOpts","toHuman","unitDisplay","listStyle","toObject","toISO","toISOTime","millis","toMillis","suppressMilliseconds","suppressSeconds","includePrefix","includeOffset","invalidReason","duration","minus","negate","mapUnits","fn","reconfigure","as","normalize","rescale","newVals","entries","removeZeroes","shiftToAll","built","accumulated","lastUnit","own","ak","negated","invalidExplanation","v1","v2","Interval","isLuxonInterval","fromDateTimes","builtStart","friendlyDateTime","builtEnd","validateError","validateStartEnd","after","before","startIsValid","endIsValid","isInterval","toDuration","useLocaleWeeks","hasSame","isEmpty","dateTime","contains","splitAt","dateTimes","sorted","sort","results","added","splitBy","idx","divideEqually","numberOfParts","overlaps","abutsStart","abutsEnd","engulfs","intersection","union","merge","intervals","final","sofar","xor","currentCount","ends","difference","toLocaleString","toISODate","dateFormat","separator","mapEndpoints","mapFn","Info","hasDST","proto","isValidIANAZone","locObj","getMinimumDaysInFirstWeek","getWeekendWeekdays","monthsFormat","weekdaysFormat","features","relative","localeWeek","dayDiff","earlier","later","utcDayStart","toUTC","keepLocalTime","intUnit","post","deser","str","code","charCodeAt","search","parseDigits","spaceOrNBSP","fromCharCode","spaceOrNBSPRegExp","fixListRegex","stripInsensitivities","oneOf","strings","startIndex","groups","simple","partTypeStyleToTokenVal","short","long","dayperiod","dayPeriod","hour24","dummyDateTimeCache","expandMacroTokens","formatOptsToTokens","maybeExpandMacroToken","TokenParser","one","two","three","four","six","oneOrTwo","oneToThree","oneToSix","oneToNine","twoToFour","fourToSix","unitate","unitForToken","disqualifyingUnit","regexString","handlers","explainFromTokens","rawMatches","matches","all","matchIndex","specificOffset","Z","q","G","toField","dateTimeFromMatches","df","resolvedOpts","isSpace","actualType","tokenForPart","MAX_DATE","unsupportedZone","possiblyCachedWeekData","possiblyCachedLocalWeekData","localWeekData","inst","old","localTS","tz","tsToObj","objToTS","adjustTime","oPre","millisToAdd","parseDataToDateTime","parsedZone","interpretationZone","toTechFormat","extended","longFormat","extendedZone","defaultUnitValues","defaultWeekUnitValues","defaultOrdinalUnitValues","orderedWeekUnits","orderedOrdinalUnits","normalizeUnitWithLocalWeeks","weeknumber","weeksnumber","weeknumbers","weekyear","weekyears","quickDT","offsetProvis","zoneOffsetGuessCache","zoneOffsetTs","guessOffsetForZone","diffRelative","calendary","differ","lastOpts","argList","ot","_zone","isLuxonDateTime","fromJSDate","zoneToUse","fromSeconds","tsNow","containsOrdinal","containsGregorYear","containsGregorMD","containsGregor","definiteWeekDef","useWeekData","defaultValues","objNow","foundFirst","higherOrderInvalid","validWeek","validWeekday","hasInvalidWeekData","validOrdinal","hasInvalidOrdinalData","gregorian","tsFinal","offsetFinal","parseISODate","fromRFC2822","preprocessRFC2822","parseRFC2822Date","fromHTTP","parseHTTPDate","fromFormat","localeToUse","parseFromTokens","fromString","fromSQL","parseSQL","isDateTime","parseFormatForOpts","localeOpts","tokenList","expandFormat","isWeekend","monthShort","monthLong","weekdayShort","weekdayLong","offsetNameShort","offsetNameLong","isInDST","getPossibleOffsets","dayMs","minuteMs","oEarlier","oLater","o1","ts1","ts2","c1","c2","isInLeapYear","daysInYear","weeksInLocalWeekYear","resolvedLocaleOptions","toLocal","keepCalendarTime","newTS","offsetGuess","asObj","setLocale","settingWeekStuff","mixed","normalizedUnit","toLocaleParts","ext","toISOWeekDate","toRFC2822","toHTTP","toSQLDate","toSQLTime","includeZone","includeOffsetSpace","toSQL","toSeconds","toUnixInteger","toBSON","includeConfig","otherDateTime","durOpts","otherIsLater","diffed","highWater","lowestOrder","differs","highOrderDiffs","remainingMillis","lowerOrderUnits","diffNow","until","inputMs","adjustedToZone","toRelative","padding","toRelativeCalendar","every","fromFormatExplain","fromStringExplain","buildFormatParser","fromFormatParser","formatParser","dateTimeish","convertTimezonedDateToUTC","localDateTime","parsedDateTime","SqlSeries","refId","series","toFlamegraph","inputSeries","sortedData","level","label","acc","transformTraceData","message","toLogs","dataObjectValues","reservedFields","types","labelFields","labelFieldsList","timestampKey","messageField","each","col","ser","labels","pickBy","_value","transformObject","omitBy","timestampObject","object","createDataFrame","filterable","Boolean","DataFrameType","LogLines","preferredVisualisationType","toTable","columns","rows","_formatValueByType","toTimeSeries","extrapolate","timeSeries","timeCol","timeColType","lastTimeStamp","keyColumns","row","metricKey","dataPoints","toTraces","traceID","spanID","operationName","parentSpanID","serviceName","startTime","serviceTags","span","isTimeWithTimezone","startTimeProcessed","convertTimezonedDateToUnixTimestamp","wsRe","commentRe","idRe","statementRe","joinsRe","macroFuncRe","inRe","closureRe","macroRe","wsOnlyRe","commentOnlyRe","idOnlyRe","closureOnlyRe","macroFuncOnlyRe","statementOnlyRe","joinsOnlyRe","onJoinTokenOnlyRe","tableNameOnlyRe","tableFuncOnlyRe","macroOnlyRe","inOnlyRe","condOnlyRe","skipSpaceOnlyRe","tokenRe","tabSize","newLine","Scanner","raw","_sOriginal","expectNext","_next","skipSpace","isWS","_s","re","Format","print","toAST","Print","ast","tree","rootToken","aliases","expectedNext","setRoot","isExpectedNext","appendToken","isSkipSpace","subQuery","isStatement","toLower","isClosured","isClosureChars","betweenBraces","isTableFunc","isMacroFunc","func","subAST","isSet","isIn","isCond","isJoin","parseJOIN","isComment","statement","subQueryPos","toUpperCase","joinType","isID","isTable","isMacro","joinAST","using","on","joinExprToken","joinConditions","RemoveComments","query","AddMetadata","stack","isInQuote","quoteType","openBrackets","closeBrackets","char","pop","printItems","items","tab","openBraces","AST","root","$rate","$perSecond","$perSecondColumns","$perSecondColumnsAggregated","$delta","$deltaColumns","$deltaColumnsAggregated","$increaseColumnsAggregated","$columns","$columnsMs","$rateColumns","$rateColumnsAggregated","with","select","prewhere","where","having","limit","EditorMode","SQL","Builder","DateTimeColumnSelectorType","TimestampFormat","DateTime64","TimeStamp","TimeStamp64_3","TimeStamp64_6","TimeStamp64_9","Float","SqlQueryHelper","convertTimestamp","isString","dateMath","coefficient","rounded","dayjs","convertInterval","intervalFactor","unitsInSeconds","conditionalTest","templateSrv","macros","openMacros","arg","param1","lastIndexOf","param2","varInParam","done","variables","getVariables","varG","closeMacros","interpolateQueryExpr","variable","defaultFormatFn","multi","includeAll","clickhouseEscape","clickhouseOperator","console","warn","NumberOnlyRegexp","returnAsIs","returnAsArray","opt","contain","targetTable","targetDatabase","database","getFilterSqlForDateTime","columnName","dateTimeType","convertFn","getConvertFn","getFilterSqlForDateTimeMs","escapeTableIdentifier","escapeIdentifier","SqlQueryMacros","applyMacros","useWindowFunc","columnsMs","rate","rateColumns","rateColumnsAggregated","perSecond","perSecondColumns","perSecondColumnsAggregated","increase","increaseColumns","increaseColumnsAggregated","delta","deltaColumns","deltaColumnsAggregated","getDateFilter","getDateTimeFilter","getDateTimeFilterMs","getTimeSeries","getTimeSeriesMs","getNaturalTimeSeries","beforeMacrosQuery","fromQuery","_parseMacro","cols","_applyTimeFilter","macro","mLen","mPos","fromIndex","fromRe","fromRelativeIndex","toLocaleLowerCase","lastIndex","_fromIndex","useMs","timeFilterMacro","transformQuery","transformation","_columns","keyAlias","valueAlias","groupByQuery","havingQuery","orderByQuery","findKeywordOutsideBrackets","keyword","groupByIndex","havingIndex","orderByIndex","timeChange","_prepareColumnsAggregated","macroName","subKey","subKeyAlias","aggFuncs","aliasSplit","alias","_formatColumnsAggregated","finalAggregatedValues","finalValues","_detectAliasAndApplyTimeFilter","aliasIndex","maxPerSecond","maxIncrease","maxDelta","replaceTimeFilters","range","SqlQuery","adhocFilters","skip_comments","add_metadata","scopedVars","scanner","intervalMs","adhocCondition","topQueryAST","af","operator","cond","useWindowFuncForMacros","err","renderedAdHocCondition","timeFilter","timeFilterMs","dateColDataType","myround","rawQuery","dateTimeColDataType","ResponseParser","res","textColIndex","findColIndex","valueColIndex","keyValuePairs","isObject","textKey","valueKey","colName","transformAnnotationResponse","hasTime","hasRegion","hasType","len","column","event","isRegion","DEFAULT_VALUES_QUERY","AdHocFilter","GetTagKeys","tagKeys","Promise","resolve","datasource","metricFindQuery","then","response","processTagKeysResponse","columnNames","defaultDatabase","adHocHideTableNames","regexEnum","enumValues","tagValues","combine","GetTagValues","initialQuery","adHocValuesQuery","buildQuery","queryTemplate","allTablesColumnSQL","allValuesSQL","catch","processTagValuesResponse","keyItems","selectors","QuerySettings","SQLEditor","QueryHeaderTabs","QueryHeader","editorMode","setEditorMode","isAnnotationView","onTriggerQuery","onChange","modalOpen","setModalOpen","useState","differences","setDifferences","useEffect","checkValue","defaultDateTimeType","original","updated","fieldName","defaultUint32","defaultDateTime64","defaultDateTime","defaultDateDate32","contextWindowSize","findDifferences","div","display","marginTop","RadioButtonGroup","size","onEditorModeChange","Button","variant","icon","marginLeft","onClick","Modal","isOpen","onClickBackdrop","onDismiss","Label","fontSize","description","ButtonRow","fieldsToReset","h5","pre","currentEditor","TokenType","FUNCTIONS","KEYWORDS","CONSTANTS","DATATYPES","MACROS","PARENTHESIS","COMMENT","COMMENT_BLOCK","VARIABLE","STRING","THEME_NAME","LANGUAGE_ID","initiateEditor","templateVariables","monacoInstance","autocompletionData","systemDatabasesData","Method","Variable","Constant","Keyword","TypeParameter","Text","languages","CompletionItemKind","dynamicIdentifier","dynamicKeyword","dynamicString","dynamicSystemDatabases","dispose","Colors","Types","createCompletionItem","kind","insertText","documentation","register","keywordsImported","keywords","functionsImported","funcs","dataTypesImported","dataTypes","constantsImported","constants","macrosImported","setMonarchTokensProvider","tokenizer","tokenize","editor","defineTheme","inherit","rules","foreground","colors","registerCompletionItemProvider","provideCompletionItems","model","position","word","getWordUntilPosition","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","rangeMacros","mapToCompletionItems","incomplete","suggestions","def","docText","mapMacroToCompletionItems","registerAutocompletion","theme","language","useSystemDatabases","setData","fetchData","storageKey","uid","cachedData","localStorage","getItem","expiry","setItem","useAutocompleteData","groupByColor","groupedData","color","completion","groupedResult","defaultQuery","DEFAULT_FORMAT","DEFAULT_DATE_TIME_TYPE","MONACO_EDITOR_OPTIONS","scrollBeyondLastLine","wordWrap","wrappingStrategy","scrollbar","alwaysConsumeMouseWheel","minimap","enabled","overviewRulerLanes","SQLCodeEditor","onSqlChange","onRunQuery","initialized","setInitialized","updatedSQLQuery","setUpdatedSQLQuery","databasesData","monaco","setTimeout","setTheme","width","CodeEditor","height","monacoOptions","onBeforeEditorMount","onBlur","FormattedSQL","sql","showFormattedSQL","copyMessage","setCopyMessage","isFading","setIsFading","h4","marginBottom","right","alignItems","gap","margin","opacity","transition","IconButton","aria-label","navigator","clipboard","writeText","disabled","RESOLUTION_OPTIONS","FORMAT_OPTIONS","QueryTextEditor","onFieldChange","formattedData","areAdHocFiltersAvailable","sqlFormattedData","setSqlFormattedData","handleToggleField","TagsInput","className","tagsList","flexDirection","InlineFieldRow","InlineField","InlineLabel","tooltip","InlineSwitch","transparent","data-testid","Input","placeholder","Select","handleResolutionChange","handleFormatChange","handleContextWindowChange","ToolbarButton","showHelp","QueryMacrosInfo","UniversalSelectField","testId","customOptions","setCustomOptions","option","customValue","mergedOptions","uniqueOptions","isClearable","allowCustomValue","onCreateOption","changeEvent","QueryBuilder","databases","tables","dateColumns","timestampColumns","selectedColumnTimestampType","selectedColumnDateType","setSelectedDatabase","setSelectedTable","setSelectedColumnTimestampType","setSelectedColumnDateType","setSelectedDateTimeType","selectedTable","selectedDatabase","selectedDateTimeType","setDatabases","setTables","setdateColumns","setTimestampColumns","buildExploreQuery","useCallback","querySegment","useConnectionData","onDatabaseChange","selectedItem","onTableChange","backgroundColor","href","rel","onDateTimeColDataTypeChange","onDateColDataTypeChange","useQueryState","datasourceName","datasourceUid","accessKey","storedData","formattedQuery","dataToStore","locals","getAdhocFilters","adhocVariables","getTemplateSrv","filters","QueryEditor","props","app","initializedQuery","adHocFilters","defaultFloat","defaultTimeStamp64_3","defaultTimeStamp64_6","defaultTimeStamp64_9","initializeQueryDefaults","setFormattedData","setError","replaced","useFormattedData","adHocFiltersKey","Alert","elevated","CHDataSource","DataSourceApi","_getRequestOptions","usePOST","requestId","requestOptions","url","params","method","basicAuth","withCredentials","headers","Authorization","useCompression","compressionType","useYandexCloudAuthorization","xHeaderUser","xClickHouseSSLCertificateAuth","addCorsHeader","_request","queryParams","reject","backendSrv","fetch","subscribe","getLogRowContext","originalQuery","createQuery","stmt","timestampColumn","getLogsTimeBoundaries","formattedDate","timeEpochMs","timeUtc","boundariesRequest","direction","LogRowContextQueryDirection","Backward","inputTimestampValue","inputTimestampColumn","generateQueryForTimestampForward","_seriesQuery","getLogContext","contextDataRequest","timestampField","currentRowTimestamp","generateRequestForTimestampBackward","generateRequestForTimestampForward","toggleQueryFilter","isFilterAdded","queryHasFilter","queries","targets","hide","allQueryPromise","responses","sqlSeries","rangeRaw","modifyQuery","action","queryAST","labelFilter","alreadyAdded","modifiedQuery","queryModel","adHocFilter","log","panelId","annotationQuery","assign","responseParser","interpolatedQuery","__searchFilter","searchFilter","curry","testDatasource","status","formatQuery","targetContainsTemplate","containsTemplate","getTagKeys","queryFilter","getTagValues","interpolateVariablesInQueries","expandedQueries","getRef","instanceSettings","jsonData","useDefaultConfiguration","getBackendSrv","annotations","getOptions","datasourceOptions","access","getSettings","DefaultValues","newOptions","onSwitchToggle","defaultDateTime64Options","setDefaultDateTime64Options","defaultDateTimeOptions","setDefaultDateTimeOptions","defaultUint32Options","setDefaultUint32Options","defaultDateDate32Options","setDefaultDateDate32Options","defaultFloatOptions","setDefaultFloatOptions","defaultTimeStamp64_3Options","setDefaultTimeStamp64_3Options","defaultTimeStamp64_6Options","setDefaultTimeStamp64_6Options","defaultTimeStamp64_9Options","setDefaultTimeStamp64_9Options","doRequest","version","dataSourceUrl","dashboardUID","datasources","currentDatasource","groupedByType","typeKey","transformDataToOptions","dataArray","Set","labelWidth","currentTarget","checked","severity","h6","COMPRESSION_TYPE_OPTIONS","plugin","DataSourcePlugin","setConfigEditor","secureJsonFields","onOptionsChange","secureJsonData","selectedCompressionType","setSelectedCompressionType","setAdHocValuesQuery","DataSourceHttpSettings","data-test-id","defaultUrl","dataSourceConfig","showAccessOptions","showForwardOAuthIdentityOption","onUpdateDatasourceJsonDataOption","SecretInput","isConfigured","onReset","xHeaderKey","h3","onCompressionTypeChange","minWidth","setQueryEditor"],"sourceRoot":""}