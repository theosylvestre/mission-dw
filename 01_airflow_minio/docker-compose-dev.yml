services:
    mc:
        container_name: ${DOCKER_MINIO_MC_HOSTNAME}
        image: minio/mc
        volumes:
            - ./minio-entrypoint.sh:/minio-entrypoint.sh:ro
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            MINIO_DAGS_BUCKET: ${MINIO_DAGS_BUCKET}
            MINIO_LOGS_BUCKET: ${MINIO_LOGS_BUCKET}
            DOCKER_MINIO_HOSTNAME: ${DOCKER_MINIO_HOSTNAME}
            DOCKER_MINIO_PORT: ${DOCKER_MINIO_PORT}
        entrypoint: [ "sh", "/minio-entrypoint.sh" ]
        depends_on:
            - minio
        
    minio:
        container_name: ${DOCKER_MINIO_HOSTNAME}
        image: minio/minio
        ports:
            - "${DOCKER_MINIO_PORT}:9000"
            - "${DOCKER_MINIO_CONSOLE_PORT}:9001"
        environment:
            MINIO_PORT: ${DOCKER_MINIO_PORT}
            MINIO_CONSOLE_PORT: ${DOCKER_MINIO_CONSOLE_PORT}
        command: server /data --console-address ":9001"
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
            interval: 5s
            timeout: 3s
            retries: 10


    postgres:
        image: postgres:15
        container_name: ${DOCKER_POSTGRES_HOSTNAME}
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
            interval: 5s
            retries: 5

    airflow-init:
        container_name: ${DOCKER_AIRFLOW_INIT_HOSTNAME}
        build: .
        command: init
        environment:
            AIRFLOW__CORE__LOGGING_CONFIG_CLASS: airflow_local_settings.LOGGING_CONFIG
            PYTHONPATH: /opt/airflow/config

            AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}

            AIRFLOW_ADMIN_USERNAME: ${AIRFLOW_ADMIN_USERNAME}
            AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
            AIRFLOW_ADMIN_EMAIL: ${AIRFLOW_ADMIN_EMAIL}
            AIRFLOW_ADMIN_FIRSTNAME: ${AIRFLOW_ADMIN_FIRSTNAME}
            AIRFLOW_ADMIN_LASTNAME: ${AIRFLOW_ADMIN_LASTNAME}
            AIRFLOW__API_AUTH__JWT_SECRET: ${AIRFLOW__API_AUTH__JWT_SECRET}
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DOCKER_POSTGRES_HOSTNAME}:5432/${POSTGRES_DB}
            AIRFLOW__CORE__AUTH_MANAGER: ${AIRFLOW__CORE__AUTH_MANAGER}
            AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
            
            AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://${DOCKER_AIRFLOW_APISERVER_HOSTNAME}:${DOCKER_AIRFLOW_APISERVER_PORT}/execution/

            AIRFLOW__LOGGING__REMOTE_LOGGING: ${AIRFLOW__LOGGING__REMOTE_LOGGING}
            AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: ${AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID}
            AIRFLOW__LOGGING__DELETE_LOCAL_LOGS: ${AIRFLOW__LOGGING__DELETE_LOCAL_LOGS}
            AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: ${AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER}
            AIRFLOW__LOGGING__S3_LOG_WRITE_HEAD_OBJECT: ${AIRFLOW__LOGGING__S3_LOG_WRITE_HEAD_OBJECT}
            AIRFLOW__LOGGING__TASK_LOG_READER: ${AIRFLOW__LOGGING__TASK_LOG_READER}

            DOCKER_MINIO_HOSTNAME: ${DOCKER_MINIO_HOSTNAME}
            DOCKER_MINIO_PORT: ${DOCKER_MINIO_PORT}
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            MINIO_DAGS_BUCKET: ${MINIO_DAGS_BUCKET}

            AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
        volumes:
            - ./config/airflow_local_settings.py:/opt/airflow/config/airflow_local_settings.py:ro
        depends_on:
            postgres:
                condition: service_healthy
            minio:
                condition: service_started

    api-server:
        container_name: ${DOCKER_AIRFLOW_APISERVER_HOSTNAME}
        build:
            context: .
            dockerfile: Dockerfile
        command: "api-server"
        environment:
            AIRFLOW__CORE__LOGGING_CONFIG_CLASS: airflow_local_settings.LOGGING_CONFIG
            PYTHONPATH: /opt/airflow/config

            AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
            AIRFLOW__API_AUTH__JWT_SECRET: ${AIRFLOW__API_AUTH__JWT_SECRET}
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DOCKER_POSTGRES_HOSTNAME}:5432/${POSTGRES_DB}
            AIRFLOW__CORE__AUTH_MANAGER: ${AIRFLOW__CORE__AUTH_MANAGER}

            AIRFLOW__CORE__DAGS_FOLDER: s3://airflow-dags/
            AIRFLOW__AWS__AWS_DEFAULT_REGION: us-east-1
            AIRFLOW__S3__S3_ENDPOINT_URL: http://${DOCKER_MINIO_HOSTNAME}:${DOCKER_MINIO_PORT}

            AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://${DOCKER_AIRFLOW_APISERVER_HOSTNAME}:${DOCKER_AIRFLOW_APISERVER_PORT}/execution/

            AIRFLOW__LOGGING__REMOTE_LOGGING: ${AIRFLOW__LOGGING__REMOTE_LOGGING}
            AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: ${AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID}
            AIRFLOW__LOGGING__DELETE_LOCAL_LOGS: ${AIRFLOW__LOGGING__DELETE_LOCAL_LOGS}
            AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: ${AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER}
            AIRFLOW__LOGGING__S3_LOG_WRITE_HEAD_OBJECT: ${AIRFLOW__LOGGING__S3_LOG_WRITE_HEAD_OBJECT}
            AIRFLOW__LOGGING__TASK_LOG_READER: ${AIRFLOW__LOGGING__TASK_LOG_READER}

            DOCKER_MINIO_HOSTNAME: ${DOCKER_MINIO_HOSTNAME}
            DOCKER_MINIO_PORT: ${DOCKER_MINIO_PORT}
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            MINIO_DAGS_BUCKET: ${MINIO_DAGS_BUCKET}

            AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
        ports:
            - "${DOCKER_AIRFLOW_APISERVER_PORT}:8080"
        volumes:
            - ./config/airflow_local_settings.py:/opt/airflow/config/airflow_local_settings.py:ro
        depends_on:
            postgres:
                condition: service_healthy
            minio:
                condition: service_started
            airflow-init:
                condition: service_completed_successfully
            mc:
                condition: service_completed_successfully

    scheduler:
        container_name: ${DOCKER_AIRFLOW_SCHEDULER_HOSTNAME}
        build:
            context: .
            dockerfile: Dockerfile
        command: "scheduler"
        environment:
            AIRFLOW__CORE__LOGGING_CONFIG_CLASS: airflow_local_settings.LOGGING_CONFIG
            PYTHONPATH: /opt/airflow/config
            
            AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
            
            AIRFLOW__API_AUTH__JWT_SECRET: ${AIRFLOW__API_AUTH__JWT_SECRET}
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DOCKER_POSTGRES_HOSTNAME}:5432/${POSTGRES_DB}
            AIRFLOW__CORE__AUTH_MANAGER: ${AIRFLOW__CORE__AUTH_MANAGER}
            AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}

            AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
            AIRFLOW__CELERY__BROKER_URL: redis://${DOCKER_REDIS_HOSTNAME}:${DOCKER_REDIS_PORT}/0
            AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DOCKER_POSTGRES_HOSTNAME}/${POSTGRES_DB}

            AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://${DOCKER_AIRFLOW_APISERVER_HOSTNAME}:${DOCKER_AIRFLOW_APISERVER_PORT}/execution/

            AIRFLOW__LOGGING__REMOTE_LOGGING: ${AIRFLOW__LOGGING__REMOTE_LOGGING}
            AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: ${AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID}
            AIRFLOW__LOGGING__DELETE_LOCAL_LOGS: ${AIRFLOW__LOGGING__DELETE_LOCAL_LOGS}
            AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: ${AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER}
            AIRFLOW__LOGGING__S3_LOG_WRITE_HEAD_OBJECT: ${AIRFLOW__LOGGING__S3_LOG_WRITE_HEAD_OBJECT}
            AIRFLOW__LOGGING__TASK_LOG_READER: ${AIRFLOW__LOGGING__TASK_LOG_READER}

            DOCKER_MINIO_HOSTNAME: ${DOCKER_MINIO_HOSTNAME}
            DOCKER_MINIO_PORT: ${DOCKER_MINIO_PORT}
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            MINIO_DAGS_BUCKET: ${MINIO_DAGS_BUCKET}

            AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
        volumes:
            - ./config/airflow_local_settings.py:/opt/airflow/config/airflow_local_settings.py:ro
        depends_on:
            postgres:
                condition: service_healthy
            minio:
                condition: service_started
            mc:
                condition: service_completed_successfully
            airflow-init:
                condition: service_completed_successfully
            api-server:
                condition: service_started

    triggerer:
        container_name: ${DOCKER_AIRFLOW_TRIGGERER_HOSTNAME}
        build:
            context: .
            dockerfile: Dockerfile
        command: "triggerer"
        volumes:
            - ./config/airflow_local_settings.py:/opt/airflow/config/airflow_local_settings.py:ro
        environment:
            AIRFLOW__CORE__LOGGING_CONFIG_CLASS: airflow_local_settings.LOGGING_CONFIG
            PYTHONPATH: /opt/airflow/config
            
            AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
            AIRFLOW__API_AUTH__JWT_SECRET: ${AIRFLOW__API_AUTH__JWT_SECRET}
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DOCKER_POSTGRES_HOSTNAME}:5432/${POSTGRES_DB}
            AIRFLOW__CORE__AUTH_MANAGER: ${AIRFLOW__CORE__AUTH_MANAGER}
            
            AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://${DOCKER_AIRFLOW_APISERVER_HOSTNAME}:${DOCKER_AIRFLOW_APISERVER_PORT}/execution/

            AIRFLOW__LOGGING__REMOTE_LOGGING: ${AIRFLOW__LOGGING__REMOTE_LOGGING}
            AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: ${AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID}
            AIRFLOW__LOGGING__DELETE_LOCAL_LOGS: ${AIRFLOW__LOGGING__DELETE_LOCAL_LOGS}
            AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: ${AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER}
            AIRFLOW__LOGGING__S3_LOG_WRITE_HEAD_OBJECT: ${AIRFLOW__LOGGING__S3_LOG_WRITE_HEAD_OBJECT}
            AIRFLOW__LOGGING__TASK_LOG_READER: ${AIRFLOW__LOGGING__TASK_LOG_READER}

            AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}

            DOCKER_MINIO_HOSTNAME: ${DOCKER_MINIO_HOSTNAME}
            DOCKER_MINIO_PORT: ${DOCKER_MINIO_PORT}
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            MINIO_DAGS_BUCKET: ${MINIO_DAGS_BUCKET}
        depends_on:
            postgres:
                condition: service_healthy
            airflow-init:
                condition: service_completed_successfully


    dag-processor:
        container_name: ${DOCKER_AIRFLOW_DAGPROCESSOR_HOSTNAME}
        build:
            context: .
            dockerfile: Dockerfile
        command: "dag-processor"
        environment:
            AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}

            AIRFLOW__API_AUTH__JWT_SECRET: ${AIRFLOW__API_AUTH__JWT_SECRET}
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DOCKER_POSTGRES_HOSTNAME}:5432/${POSTGRES_DB}
            AIRFLOW__CORE__AUTH_MANAGER: ${AIRFLOW__CORE__AUTH_MANAGER}
            AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
            AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: ${AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID}            
            AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://${DOCKER_AIRFLOW_APISERVER_HOSTNAME}:${DOCKER_AIRFLOW_APISERVER_PORT}/execution/

            AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 1

            AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}

            DOCKER_MINIO_HOSTNAME: ${DOCKER_MINIO_HOSTNAME}
            DOCKER_MINIO_PORT: ${DOCKER_MINIO_PORT}
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            MINIO_DAGS_BUCKET: ${MINIO_DAGS_BUCKET}
        depends_on:
            postgres:
                condition: service_healthy
            airflow-init:
                condition: service_completed_successfully


    redis:
        container_name: ${DOCKER_REDIS_HOSTNAME}
        image: redis:6
        ports:
        - "${DOCKER_REDIS_PORT}:6379"
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 3s
            retries: 5

    worker:
        container_name: ${DOCKER_AIRFLOW_WORKER_HOSTNAME}
        command: celery-worker
        build:
            context: .
            dockerfile: Dockerfile
        volumes:
            - ./config/airflow_local_settings.py:/opt/airflow/config/airflow_local_settings.py:ro
        environment:
            AIRFLOW__CORE__LOGGING_CONFIG_CLASS: airflow_local_settings.LOGGING_CONFIG
            PYTHONPATH: /opt/airflow/config
            
            AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
            AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DOCKER_POSTGRES_HOSTNAME}:5432/${POSTGRES_DB}
            AIRFLOW__CELERY__BROKER_URL: redis://${DOCKER_REDIS_HOSTNAME}:${DOCKER_REDIS_PORT}/0
            AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DOCKER_POSTGRES_HOSTNAME}/${POSTGRES_DB}
            
            AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://${DOCKER_AIRFLOW_APISERVER_HOSTNAME}:${DOCKER_AIRFLOW_APISERVER_PORT}/execution/

            AIRFLOW__LOGGING__REMOTE_LOGGING: ${AIRFLOW__LOGGING__REMOTE_LOGGING}
            AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: ${AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID}
            AIRFLOW__LOGGING__DELETE_LOCAL_LOGS: ${AIRFLOW__LOGGING__DELETE_LOCAL_LOGS}
            AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: ${AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER}
            AIRFLOW__LOGGING__S3_LOG_WRITE_HEAD_OBJECT: ${AIRFLOW__LOGGING__S3_LOG_WRITE_HEAD_OBJECT}
            AIRFLOW__LOGGING__TASK_LOG_READER: ${AIRFLOW__LOGGING__TASK_LOG_READER}

            AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}

            DOCKER_MINIO_HOSTNAME: ${DOCKER_MINIO_HOSTNAME}
            DOCKER_MINIO_PORT: ${DOCKER_MINIO_PORT}
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            MINIO_DAGS_BUCKET: ${MINIO_DAGS_BUCKET}

        depends_on:
            airflow-init:
                condition: service_completed_successfully
            redis:
                condition: service_healthy
            postgres:
                condition: service_healthy
volumes:
    minio_data:
    postgres_data:
