services:
    minio:
        container_name: ${DOCKER_MINIO_HOSTNAME}
        image: minio/minio
        ports:
            - "${DOCKER_MINIO_PORT}:9000"
            - "${DOCKER_MINIO_CONSOLE_PORT}:9001"
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
            MINIO_PORT: ${DOCKER_MINIO_PORT}
            MINIO_CONSOLE_PORT: ${DOCKER_MINIO_CONSOLE_PORT}
        command: server /data --console-address ":9001"
        volumes:
            - minio_data:/data

    mc:
        container_name: ${DOCKER_MINIO_MC_HOSTNAME}
        image: minio/mc
        depends_on:
            - minio
        volumes:
            - ./minio-entrypoint.sh:/minio-entrypoint.sh:ro
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
            MINIO_DAGS_BUCKET: ${MINIO_DAGS_BUCKET}
            MINIO_LOGS_BUCKET: ${MINIO_LOGS_BUCKET}
            DOCKER_MINIO_HOSTNAME: ${DOCKER_MINIO_HOSTNAME}
            DOCKER_MINIO_PORT: ${DOCKER_MINIO_PORT}
        entrypoint: [ "sh", "/minio-entrypoint.sh" ]

    postgres:
        image: postgres:15
        container_name: ${DOCKER_POSTGRES_HOSTNAME}
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
            interval: 5s
            retries: 5

    airflow-init:
        container_name: ${DOCKER_AIRFLOW_INIT_HOSTNAME}
        build: .
        command: init
        environment:
            AIRFLOW_ADMIN_USERNAME: ${AIRFLOW_ADMIN_USERNAME}
            AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
            AIRFLOW_ADMIN_EMAIL: ${AIRFLOW_ADMIN_EMAIL}
            AIRFLOW_ADMIN_FIRSTNAME: ${AIRFLOW_ADMIN_FIRSTNAME}
            AIRFLOW_ADMIN_LASTNAME: ${AIRFLOW_ADMIN_LASTNAME}
            AIRFLOW_APISERVER_PORT: ${AIRFLOW_APISERVER_PORT}
            AIRFLOW__API_AUTH__JWT_SECRET: ${AIRFLOW__API_AUTH__JWT_SECRET}
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
            AIRFLOW__CORE__AUTH_MANAGER: ${AIRFLOW__CORE__AUTH_MANAGER}
        depends_on:
            postgres:
                condition: service_healthy
            minio:
                condition: service_started

    api-server:
        container_name: ${DOCKER_AIRFLOW_APISERVER_HOSTNAME}
        build:
            context: .
            dockerfile: Dockerfile
        command: "api-server"
        environment:
            AIRFLOW_APISERVER_PORT: ${AIRFLOW_APISERVER_PORT}
            AIRFLOW__API_AUTH__JWT_SECRET: ${AIRFLOW__API_AUTH__JWT_SECRET}
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
            AIRFLOW__CORE__AUTH_MANAGER: ${AIRFLOW__CORE__AUTH_MANAGER}
            MINIO_BUCKET_ACCESS_KEY_ID: ${MINIO_BUCKET_ACCESS_KEY_ID}
            MINIO_BUCKET_SECRET_ACCESS_KEY: ${MINIO_BUCKET_SECRET_ACCESS_KEY}
            BUCKET_ENDPOINT_URL: ${BUCKET_ENDPOINT_URL}
            DOCKER_MINIO_HOSTNAME: ${DOCKER_MINIO_HOSTNAME}
            DOCKER_MINIO_PORT: ${DOCKER_MINIO_PORT}
        ports:
            - "${AIRFLOW_APISERVER_PORT}:8080"
        depends_on:
            postgres:
                condition: service_healthy
            minio:
                condition: service_started
            airflow-init:
                condition: service_completed_successfully
            mc:
                condition: service_completed_successfully

    scheduler:
        container_name: ${DOCKER_AIRFLOW_SCHEDULER_HOSTNAME}
        build:
            context: .
            dockerfile: Dockerfile
        command: "scheduler"
        environment:
            AIRFLOW_APISERVER_PORT: ${AIRFLOW_APISERVER_PORT}
            AIRFLOW__API_AUTH__JWT_SECRET: ${AIRFLOW__API_AUTH__JWT_SECRET}
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
            AIRFLOW__CORE__AUTH_MANAGER: ${AIRFLOW__CORE__AUTH_MANAGER}
            MINIO_BUCKET_ACCESS_KEY_ID: ${MINIO_BUCKET_ACCESS_KEY_ID}
            MINIO_BUCKET_SECRET_ACCESS_KEY: ${MINIO_BUCKET_SECRET_ACCESS_KEY}
            BUCKET_ENDPOINT_URL: ${BUCKET_ENDPOINT_URL}
            DOCKER_MINIO_HOSTNAME: ${DOCKER_MINIO_HOSTNAME}
            DOCKER_MINIO_PORT: ${DOCKER_MINIO_PORT}
        depends_on:
            postgres:
                condition: service_healthy
            minio:
                condition: service_started
            mc:
                condition: service_completed_successfully
            airflow-init:
                condition: service_completed_successfully
            api-server:
                condition: service_started

    # triggerer:

    # dag-processor:

    redis:
        container_name: ${DOCKER_REDIS_HOSTNAME}
        image: redis:6
        ports:
        - "${DOCKER_REDIS_PORT}:6379"
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 3s
            retries: 5

    worker:
        container_name: ${DOCKER_AIRFLOW_WORKER_HOSTNAME}
        command: celery-worker
        build:
            context: .
            dockerfile: Dockerfile
        environment:
            AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
            AIRFLOW__CELERY__BROKER_URL: redis://${DOCKER_REDIS_HOSTNAME}:${DOCKER_REDIS_PORT}/0
            AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DOCKER_POSTGRES_HOSTNAME}/${POSTGRES_DB}
        depends_on:
            airflow-init:
                condition: service_completed_successfully
            redis:
                condition: service_healthy
            postgres:
                condition: service_healthy
volumes:
    minio_data:
    postgres_data:
