services:
    minio:
        container_name: airflow-minio
        image: minio/minio
        ports:
            - "${MINIO_PORT}:9000"
            - "${MINIO_CONSOLE_PORT}:9001"
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
            MINIO_PORT: ${MINIO_PORT}
            MINIO_CONSOLE_PORT: ${MINIO_CONSOLE_PORT}
        command: server /data --console-address ":9001"
        volumes:
            - minio_data:/data

    mc:
        image: minio/mc
        depends_on:
            - minio
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
            MINIO_DAGS_BUCKET: ${MINIO_DAGS_BUCKET}
            MINIO_LOGS_BUCKET: ${MINIO_LOGS_BUCKET}
        entrypoint: >
            /bin/sh -c "
            sleep 5;
            mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
            mc mb -p ${MINIO_DAGS_BUCKET};
            mc mb -p ${MINIO_LOGS_BUCKET};
            exit 0;
            "

    postgres:
        image: postgres:15
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
            interval: 5s
            retries: 5

    airflow-init:
        build: .
        env_file: .env
        environment:
            AIRFLOW_ADMIN_USERNAME: ${AIRFLOW_ADMIN_USERNAME}
            AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
            AIRFLOW_ADMIN_EMAIL: ${AIRFLOW_ADMIN_EMAIL}
            AIRFLOW_ADMIN_FIRSTNAME: ${AIRFLOW_ADMIN_FIRSTNAME}
            AIRFLOW_ADMIN_LASTNAME: ${AIRFLOW_ADMIN_LASTNAME}
            AIRFLOW_WEBSERVER_PORT: ${AIRFLOW_WEBSERVER_PORT}
            AIRFLOW__API_AUTH__JWT_SECRET: ${AIRFLOW__API_AUTH__JWT_SECRET}
            AIRFLOW__WEBSERVER__RBAC: ${AIRFLOW__WEBSERVER__RBAC}
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
            AIRFLOW__AUTH__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
        depends_on:
            postgres:
                condition: service_healthy
            minio:
                condition: service_started
    webserver:
        build:
            context: .
            dockerfile: Dockerfile
        environment:
            AIRFLOW_WEBSERVER_PORT: ${AIRFLOW_WEBSERVER_PORT}
            AIRFLOW__API_AUTH__JWT_SECRET: ${AIRFLOW__API_AUTH__JWT_SECRET}
            AIRFLOW__WEBSERVER__RBAC: ${AIRFLOW__WEBSERVER__RBAC}
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
            AIRFLOW__AUTH__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
        ports:
            - "${AIRFLOW_WEBSERVER_PORT}:8080"
        depends_on:
            postgres:
                condition: service_healthy
            minio:
                condition: service_started
        command: api-server

    scheduler:
        build:
            context: .
            dockerfile: Dockerfile
        environment:
            AIRFLOW_WEBSERVER_PORT: ${AIRFLOW_WEBSERVER_PORT}
            AIRFLOW__API_AUTH__JWT_SECRET: ${AIRFLOW__API_AUTH__JWT_SECRET}
            AIRFLOW__WEBSERVER__RBAC: ${AIRFLOW__WEBSERVER__RBAC}
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
            AIRFLOW__AUTH__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
        depends_on:
            postgres:
                condition: service_healthy
            minio:
                condition: service_started
            webserver:
                condition: service_started
        command: scheduler

volumes:
    minio_data:
    postgres_data:
